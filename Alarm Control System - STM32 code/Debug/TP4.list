
TP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  0800b760  0800b760  0000c760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a8  0800c9a8  0000e264  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9a8  0800c9a8  0000d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9b0  0800c9b0  0000e264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9b0  0800c9b0  0000d9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9b4  0800c9b4  0000d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800c9b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f0  20000270  0800cc1c  0000e270  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  0800cc1c  0000eb60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e331  00000000  00000000  0000e294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004232  00000000  00000000  0002c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001499  00000000  00000000  00032280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbab  00000000  00000000  00033719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002334a  00000000  00000000  000602c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d483  00000000  00000000  0008360e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190a91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008178  00000000  00000000  00190ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00198c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b748 	.word	0x0800b748

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800b748 	.word	0x0800b748

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eba:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ebc:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0xe8>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000efa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1e:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f20:	f002 f8c6 	bl	80030b0 <HAL_ADC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000f2a:	f000 fb2b 	bl	8001584 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f3a:	f003 f88b 	bl	8004054 <HAL_ADCEx_MultiModeConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f44:	f000 fb1e 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_ADC1_Init+0xec>)
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f54:	237f      	movs	r3, #127	@ 0x7f
 8000f56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f66:	f002 fc2b 	bl	80037c0 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000f70:	f000 fb08 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	@ 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000028c 	.word	0x2000028c
 8000f80:	50040000 	.word	0x50040000
 8000f84:	25b00200 	.word	0x25b00200

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2288      	movs	r2, #136	@ 0x88
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 fb85 	bl	80096b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001060 <HAL_ADC_MspInit+0xd8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d14f      	bne.n	8001058 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fbc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fbe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 feb3 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ff4:	f000 fac6 	bl	8001584 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 8000ffe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_ADC_MspInit+0xdc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001028:	2310      	movs	r3, #16
 800102a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800102e:	230b      	movs	r3, #11
 8001030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001044:	f003 f998 	bl	8004378 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2012      	movs	r0, #18
 800104e:	f003 f969 	bl	8004324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001052:	2012      	movs	r0, #18
 8001054:	f003 f982 	bl	800435c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	37b0      	adds	r7, #176	@ 0xb0
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	50040000 	.word	0x50040000
 8001064:	40021000 	.word	0x40021000

08001068 <encoder_init>:
#include "encoder.h"
#include "utils.h"

static ENCODER encoder;

void encoder_init(TIM_HandleTypeDef* htim_param, int32_t min, int32_t max){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	encoder.htim = htim_param;
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <encoder_init+0x3c>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6013      	str	r3, [r2, #0]
	encoder.max_value = max;
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <encoder_init+0x3c>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6053      	str	r3, [r2, #4]
	encoder.min_value = min;
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <encoder_init+0x3c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6093      	str	r3, [r2, #8]

	HAL_TIM_Encoder_Start(encoder.htim, TIM_CHANNEL_ALL);
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <encoder_init+0x3c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	213c      	movs	r1, #60	@ 0x3c
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fd8e 	bl	8006bae <HAL_TIM_Encoder_Start>
	encoder.htim->Instance->CNT=0;
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <encoder_init+0x3c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200002f0 	.word	0x200002f0

080010a8 <encoder_read>:

int32_t encoder_read(){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
	int32_t cnt = encoder.htim->Instance->CNT;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <encoder_read+0x40>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b6:	607b      	str	r3, [r7, #4]
	if(cnt >= encoder.max_value){
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <encoder_read+0x40>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	db02      	blt.n	80010c8 <encoder_read+0x20>
		//encoder.htim->Instance->CNT = encoder.max_value;
		return encoder.max_value;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <encoder_read+0x40>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	e008      	b.n	80010da <encoder_read+0x32>
	}
	if(cnt <= encoder.min_value){
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <encoder_read+0x40>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dc02      	bgt.n	80010d8 <encoder_read+0x30>
		//encoder.htim->Instance->CNT = encoder.min_value;
		return encoder.min_value;
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <encoder_read+0x40>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	e000      	b.n	80010da <encoder_read+0x32>
	}
	return cnt;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200002f0 	.word	0x200002f0

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b66      	ldr	r3, [pc, #408]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a65      	ldr	r2, [pc, #404]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b63      	ldr	r3, [pc, #396]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b60      	ldr	r3, [pc, #384]	@ (800129c <MX_GPIO_Init+0x1b0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a5f      	ldr	r2, [pc, #380]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b5d      	ldr	r3, [pc, #372]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b5a      	ldr	r3, [pc, #360]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a59      	ldr	r2, [pc, #356]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b57      	ldr	r3, [pc, #348]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b54      	ldr	r3, [pc, #336]	@ (800129c <MX_GPIO_Init+0x1b0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a53      	ldr	r2, [pc, #332]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b51      	ldr	r3, [pc, #324]	@ (800129c <MX_GPIO_Init+0x1b0>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2101      	movs	r1, #1
 8001166:	484e      	ldr	r0, [pc, #312]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 8001168:	f003 fac8 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 8001172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001176:	f003 fac1 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 800117a:	2200      	movs	r2, #0
 800117c:	f24e 0136 	movw	r1, #57398	@ 0xe036
 8001180:	4848      	ldr	r0, [pc, #288]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 8001182:	f003 fabb 	bl	80046fc <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	4845      	ldr	r0, [pc, #276]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 800118c:	f003 fab6 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_ENN_GPIO_Port, STEPPER_ENN_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119a:	f003 faaf 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	483a      	ldr	r0, [pc, #232]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 80011b6:	f003 f8df 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 80011ba:	2381      	movs	r3, #129	@ 0x81
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4833      	ldr	r0, [pc, #204]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 80011d2:	f003 f8d1 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 80011d6:	2302      	movs	r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	482d      	ldr	r0, [pc, #180]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 80011ea:	f003 f8c5 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 80011ee:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 80011f2:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120a:	f003 f8b5 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_CENTER_Pin|BTN_LEFT_Pin|BTN_TOP_Pin
 800120e:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8001212:	617b      	str	r3, [r7, #20]
                          |BTN_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	481e      	ldr	r0, [pc, #120]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 8001226:	f003 f8a7 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_BOTTOM_Pin;
 800122a:	f640 0301 	movw	r3, #2049	@ 0x801
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001230:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4818      	ldr	r0, [pc, #96]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 8001242:	f003 f899 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 8001246:	f24e 0336 	movw	r3, #57398	@ 0xe036
 800124a:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4811      	ldr	r0, [pc, #68]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 8001260:	f003 f88a 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127e:	f003 f87b 	bl	8004378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2028      	movs	r0, #40	@ 0x28
 8001288:	f003 f84c 	bl	8004324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800128c:	2028      	movs	r0, #40	@ 0x28
 800128e:	f003 f865 	bl	800435c <HAL_NVIC_EnableIRQ>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000400 	.word	0x48000400

080012a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <MX_I2C1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_I2C1_Init+0x74>)
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <MX_I2C1_Init+0x7c>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_I2C1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_I2C1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <MX_I2C1_Init+0x74>)
 80012e4:	f003 fa3a 	bl	800475c <HAL_I2C_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ee:	f000 f949 	bl	8001584 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <MX_I2C1_Init+0x74>)
 80012f6:	f003 fdff 	bl	8004ef8 <HAL_I2CEx_ConfigAnalogFilter>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001300:	f000 f940 	bl	8001584 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_I2C1_Init+0x74>)
 8001308:	f003 fe41 	bl	8004f8e <HAL_I2CEx_ConfigDigitalFilter>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 f937 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002fc 	.word	0x200002fc
 8001320:	40005400 	.word	0x40005400
 8001324:	10909cec 	.word	0x10909cec

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0ac      	sub	sp, #176	@ 0xb0
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2288      	movs	r2, #136	@ 0x88
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 f9b5 	bl	80096b8 <memset>
  if(i2cHandle->Instance==I2C1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <HAL_I2C_MspInit+0xb0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d13a      	bne.n	80013ce <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fcf5 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001370:	f000 f908 	bl	8001584 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138c:	23c0      	movs	r3, #192	@ 0xc0
 800138e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a4:	2304      	movs	r3, #4
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <HAL_I2C_MspInit+0xb8>)
 80013b2:	f002 ffe1 	bl	8004378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 80013bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_I2C_MspInit+0xb4>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	37b0      	adds	r7, #176	@ 0xb0
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400

080013e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013ec:	1d39      	adds	r1, r7, #4
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2201      	movs	r2, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <__io_putchar+0x20>)
 80013f6:	f006 fca5 	bl	8007d44 <HAL_UART_Transmit>
	return ch;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000980 	.word	0x20000980

08001408 <__io_getchar>:

int __io_getchar(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <__io_getchar+0x38>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2208      	movs	r2, #8
 8001418:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800141a:	1df9      	adds	r1, r7, #7
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	2201      	movs	r2, #1
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <__io_getchar+0x38>)
 8001424:	f006 fd17 	bl	8007e56 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001428:	1df9      	adds	r1, r7, #7
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	2201      	movs	r2, #1
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <__io_getchar+0x38>)
 8001432:	f006 fc87 	bl	8007d44 <HAL_UART_Transmit>
	return ch;
 8001436:	79fb      	ldrb	r3, [r7, #7]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000980 	.word	0x20000980

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f001 fc23 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f835 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f7ff fe4b 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001456:	f000 fee5 	bl	8002224 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800145a:	f7ff ff25 	bl	80012a8 <MX_I2C1_Init>
  MX_SPI2_Init();
 800145e:	f000 f897 	bl	8001590 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001462:	f000 fce5 	bl	8001e30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001466:	f000 fd37 	bl	8001ed8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800146a:	f000 feab 	bl	80021c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800146e:	f7ff fd13 	bl	8000e98 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001472:	f000 fda9 	bl	8001fc8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001476:	f001 fb3f 	bl	8002af8 <setup>

  ssd1315_Init();
 800147a:	f000 f929 	bl	80016d0 <ssd1315_Init>
  ssd1315_Clear(SSD1315_COLOR_BLACK);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f95a 	bl	8001738 <ssd1315_Clear>

  char buffer[16] = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  snprintf(buffer, 16, "ALARM OFF");
 8001492:	463b      	mov	r3, r7
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <main+0x70>)
 8001496:	2110      	movs	r1, #16
 8001498:	4618      	mov	r0, r3
 800149a:	f008 f801 	bl	80094a0 <sniprintf>
  ssd1315_Draw_String(0, 0, buffer, &Font_11x18); //Tailles disponibles : 7x10; 11x18; 16x26
 800149e:	463a      	mov	r2, r7
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <main+0x74>)
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 fa2f 	bl	8001908 <ssd1315_Draw_String>
  ssd1315_Refresh();
 80014aa:	f000 f9ad 	bl	8001808 <ssd1315_Refresh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80014ae:	f001 fb33 	bl	8002b18 <loop>
 80014b2:	e7fc      	b.n	80014ae <main+0x6a>
 80014b4:	0800b760 	.word	0x0800b760
 80014b8:	20000000 	.word	0x20000000

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b096      	sub	sp, #88	@ 0x58
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2244      	movs	r2, #68	@ 0x44
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 f8f4 	bl	80096b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014e2:	f003 fdaf 	bl	8005044 <HAL_PWREx_ControlVoltageScaling>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014ec:	f000 f84a 	bl	8001584 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f0:	2302      	movs	r3, #2
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fa:	2310      	movs	r3, #16
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	2302      	movs	r3, #2
 8001500:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001502:	2302      	movs	r3, #2
 8001504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800150a:	230a      	movs	r3, #10
 800150c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800150e:	2307      	movs	r3, #7
 8001510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001516:	2302      	movs	r3, #2
 8001518:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fde6 	bl	80050f0 <HAL_RCC_OscConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800152a:	f000 f82b 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	230f      	movs	r3, #15
 8001530:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001532:	2303      	movs	r3, #3
 8001534:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	2104      	movs	r1, #4
 8001546:	4618      	mov	r0, r3
 8001548:	f004 f9ae 	bl	80058a8 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001552:	f000 f817 	bl	8001584 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3758      	adds	r7, #88	@ 0x58
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001572:	f001 fbaf 	bl	8002cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40001000 	.word	0x40001000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <Error_Handler+0x8>

08001590 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_SPI2_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <MX_SPI2_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_SPI2_Init+0x74>)
 800159c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015c6:	2230      	movs	r2, #48	@ 0x30
 80015c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015de:	2207      	movs	r2, #7
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015f0:	f005 f86c 	bl	80066cc <HAL_SPI_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f7ff ffc3 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000350 	.word	0x20000350
 8001608:	40003800 	.word	0x40003800

0800160c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <HAL_SPI_MspInit+0xb4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d144      	bne.n	80016b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	4a24      	ldr	r2, [pc, #144]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001638:	6593      	str	r3, [r2, #88]	@ 0x58
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_SPI_MspInit+0xb8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001676:	230c      	movs	r3, #12
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001686:	2305      	movs	r3, #5
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <HAL_SPI_MspInit+0xbc>)
 8001692:	f002 fe71 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a8:	2305      	movs	r3, #5
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	@ (80016cc <HAL_SPI_MspInit+0xc0>)
 80016b4:	f002 fe60 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40003800 	.word	0x40003800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000400 	.word	0x48000400

080016d0 <ssd1315_Init>:
  * @brief  Initialise the ssd1315 LCD Component.
  * @param  None
  * @retval None
  */
void ssd1315_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  if(Is_ssd1315_Initialized == 0)
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <ssd1315_Init+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <ssd1315_Init+0x4c>
  {
    Is_ssd1315_Initialized = 1;
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <ssd1315_Init+0x60>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    /* Initialise ssd1315 low level bus layer --------------------------------*/
    LCD_IO_Init();
 80016e2:	f000 f93d 	bl	8001960 <LCD_IO_Init>

    /* Driving ability setting */
    /* Initialisation sequence */
    LCD_IO_WriteCommand(0x80);
 80016e6:	2080      	movs	r0, #128	@ 0x80
 80016e8:	f000 f96e 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x8D);  /* Disable charge pump regulator */
 80016ec:	208d      	movs	r0, #141	@ 0x8d
 80016ee:	f000 f96b 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x14);
 80016f2:	2014      	movs	r0, #20
 80016f4:	f000 f968 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x20);  /* Set Memory Addressing Mode */
 80016f8:	2020      	movs	r0, #32
 80016fa:	f000 f965 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x00);  /* 00b: Horizontal Addressing Mode */
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f962 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x40);  /* 00b: Horizontal Addressing Mode */
 8001704:	2040      	movs	r0, #64	@ 0x40
 8001706:	f000 f95f 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xC8);  /* c8:flip the 64 rows */
 800170a:	20c8      	movs	r0, #200	@ 0xc8
 800170c:	f000 f95c 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xA1);  /* a1:flip the 128 columns */
 8001710:	20a1      	movs	r0, #161	@ 0xa1
 8001712:	f000 f959 	bl	80019c8 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xAF);  /* Display On */
 8001716:	20af      	movs	r0, #175	@ 0xaf
 8001718:	f000 f956 	bl	80019c8 <LCD_IO_WriteCommand>
  }

  ssd1315_Clear(SSD1315_COLOR_BLACK);
 800171c:	2000      	movs	r0, #0
 800171e:	f000 f80b 	bl	8001738 <ssd1315_Clear>

  LCD_IO_WriteMultipleData((uint8_t*)PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8001722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001726:	4803      	ldr	r0, [pc, #12]	@ (8001734 <ssd1315_Init+0x64>)
 8001728:	f000 f96c 	bl	8001a04 <LCD_IO_WriteMultipleData>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200003b4 	.word	0x200003b4
 8001734:	200003c0 	.word	0x200003c0

08001738 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode: the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_Clear(uint16_t ColorCode)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d106      	bne.n	8001756 <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, 0xFF, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8001748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174c:	21ff      	movs	r1, #255	@ 0xff
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <ssd1315_Clear+0x34>)
 8001750:	f007 ffb2 	bl	80096b8 <memset>
  }
  else
  {
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 8001754:	e005      	b.n	8001762 <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8001756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800175a:	2100      	movs	r1, #0
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <ssd1315_Clear+0x34>)
 800175e:	f007 ffab 	bl	80096b8 <memset>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003c0 	.word	0x200003c0

08001770 <ssd1315_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  ColorCode: the pixel color (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t ColorCode)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	80bb      	strh	r3, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	807b      	strh	r3, [r7, #2]
  /* Set color */
  if (ColorCode == SSD1315_COLOR_WHITE) {
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	2bff      	cmp	r3, #255	@ 0xff
 8001786:	d11a      	bne.n	80017be <ssd1315_WritePixel+0x4e>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	b298      	uxth	r0, r3
 8001790:	4603      	mov	r3, r0
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	4413      	add	r3, r2
 8001796:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <ssd1315_WritePixel+0x94>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	b25a      	sxtb	r2, r3
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b259      	sxtb	r1, r3
 80017ae:	88fa      	ldrh	r2, [r7, #6]
 80017b0:	4603      	mov	r3, r0
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4413      	add	r3, r2
 80017b6:	b2c9      	uxtb	r1, r1
 80017b8:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <ssd1315_WritePixel+0x94>)
 80017ba:	54d1      	strb	r1, [r2, r3]
  } else {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
  }
}
 80017bc:	e01b      	b.n	80017f6 <ssd1315_WritePixel+0x86>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b298      	uxth	r0, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	01db      	lsls	r3, r3, #7
 80017ca:	4413      	add	r3, r2
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <ssd1315_WritePixel+0x94>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	4013      	ands	r3, r2
 80017e6:	b259      	sxtb	r1, r3
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	4603      	mov	r3, r0
 80017ec:	01db      	lsls	r3, r3, #7
 80017ee:	4413      	add	r3, r2
 80017f0:	b2c9      	uxtb	r1, r1
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <ssd1315_WritePixel+0x94>)
 80017f4:	54d1      	strb	r1, [r2, r3]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200003c0 	.word	0x200003c0

08001808 <ssd1315_Refresh>:
  * @brief  Refresh Displays.
  * @param  None
  * @retval None
  */
void ssd1315_Refresh(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Set Display Start Line to 0*/
  LCD_IO_WriteCommand(0x40);
 800180c:	2040      	movs	r0, #64	@ 0x40
 800180e:	f000 f8db 	bl	80019c8 <LCD_IO_WriteCommand>
  /* Set Column Address Setup column start(0) and end address (127)*/
  LCD_IO_WriteCommand(0x21);
 8001812:	2021      	movs	r0, #33	@ 0x21
 8001814:	f000 f8d8 	bl	80019c8 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f8d5 	bl	80019c8 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x7F);
 800181e:	207f      	movs	r0, #127	@ 0x7f
 8001820:	f000 f8d2 	bl	80019c8 <LCD_IO_WriteCommand>
  /* Set Page Address Setup page start (0)  and end address (7)*/
  LCD_IO_WriteCommand(0x22);
 8001824:	2022      	movs	r0, #34	@ 0x22
 8001826:	f000 f8cf 	bl	80019c8 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f8cc 	bl	80019c8 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x07);
 8001830:	2007      	movs	r0, #7
 8001832:	f000 f8c9 	bl	80019c8 <LCD_IO_WriteCommand>
  /* Fill Buffer in GDDRAM of LCD */
  LCD_IO_WriteMultipleData(PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8001836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183a:	4802      	ldr	r0, [pc, #8]	@ (8001844 <ssd1315_Refresh+0x3c>)
 800183c:	f000 f8e2 	bl	8001a04 <LCD_IO_WriteMultipleData>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200003c0 	.word	0x200003c0

08001848 <ssd1315_DrawChar>:

/**
* @}
*/
void ssd1315_DrawChar(uint8_t X, uint8_t Y, char c, FontDef_t * font){
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	460b      	mov	r3, r1
 8001856:	71bb      	strb	r3, [r7, #6]
 8001858:	4613      	mov	r3, r2
 800185a:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<font->FontHeight;i++){
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e047      	b.n	80018f2 <ssd1315_DrawChar+0xaa>
		uint16_t line = (font->data)[((c-32)*font->FontHeight)+i];
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	797b      	ldrb	r3, [r7, #5]
 8001868:	3b20      	subs	r3, #32
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	7849      	ldrb	r1, [r1, #1]
 800186e:	fb03 f101 	mul.w	r1, r3, r1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	440b      	add	r3, r1
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	81fb      	strh	r3, [r7, #14]
		for (int j=0;j<font->FontWidth;j++){
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e02d      	b.n	80018e0 <ssd1315_DrawChar+0x98>
			if (((line>>(15-j))&1)==1)
 8001884:	89fa      	ldrh	r2, [r7, #14]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f1c3 030f 	rsb	r3, r3, #15
 800188c:	fa42 f303 	asr.w	r3, r2, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <ssd1315_DrawChar+0x72>
				ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_WHITE);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	b29a      	uxth	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	b298      	uxth	r0, r3
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	22ff      	movs	r2, #255	@ 0xff
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff ff5c 	bl	8001770 <ssd1315_WritePixel>
 80018b8:	e00f      	b.n	80018da <ssd1315_DrawChar+0x92>
			else{ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_BLACK);}
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b298      	uxth	r0, r3
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff ff4b 	bl	8001770 <ssd1315_WritePixel>
		for (int j=0;j<font->FontWidth;j++){
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3301      	adds	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dbcb      	blt.n	8001884 <ssd1315_DrawChar+0x3c>
	for(int i=0;i<font->FontHeight;i++){
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	785b      	ldrb	r3, [r3, #1]
 80018f6:	461a      	mov	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	dbb1      	blt.n	8001862 <ssd1315_DrawChar+0x1a>
		}
	}
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <ssd1315_Draw_String>:

void ssd1315_Draw_String(uint8_t X, uint8_t Y, char * s, FontDef_t * font){
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	460b      	mov	r3, r1
 8001918:	73bb      	strb	r3, [r7, #14]
	int column=0;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 800191e:	e015      	b.n	800194c <ssd1315_Draw_String+0x44>
		ssd1315_DrawChar(X+(column*font->FontWidth),Y,*s,font);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	fb12 f303 	smulbb	r3, r2, r3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	4413      	add	r3, r2
 8001932:	b2d8      	uxtb	r0, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	7bb9      	ldrb	r1, [r7, #14]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f7ff ff84 	bl	8001848 <ssd1315_DrawChar>
		s++;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3301      	adds	r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
		column++;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e5      	bne.n	8001920 <ssd1315_Draw_String+0x18>
	}
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <LCD_IO_Init>:

extern I2C_HandleTypeDef hi2c1;

int ssd1315_i2c_adress;

void LCD_IO_Init(){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
	int status;
	HAL_I2C_Init(&hi2c1);
 8001966:	4814      	ldr	r0, [pc, #80]	@ (80019b8 <LCD_IO_Init+0x58>)
 8001968:	f002 fef8 	bl	800475c <HAL_I2C_Init>
		for (int i=0;i<255;i++){
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e018      	b.n	80019a4 <LCD_IO_Init+0x44>
			status=HAL_I2C_Master_Transmit(&hi2c1,i,NULL,0,10);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	b299      	uxth	r1, r3
 8001976:	230a      	movs	r3, #10
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	2200      	movs	r2, #0
 800197e:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <LCD_IO_Init+0x58>)
 8001980:	f002 ff88 	bl	8004894 <HAL_I2C_Master_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	603b      	str	r3, [r7, #0]
			if(status==HAL_OK){
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <LCD_IO_Init+0x3e>
				printf("Found one display at 0x%x\r\n",i);
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	480a      	ldr	r0, [pc, #40]	@ (80019bc <LCD_IO_Init+0x5c>)
 8001992:	f007 fd15 	bl	80093c0 <iprintf>
				ssd1315_i2c_adress=i;
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <LCD_IO_Init+0x60>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6013      	str	r3, [r2, #0]
				return;
 800199c:	e008      	b.n	80019b0 <LCD_IO_Init+0x50>
		for (int i=0;i<255;i++){
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80019a8:	dde3      	ble.n	8001972 <LCD_IO_Init+0x12>
			}
		}
	printf("Found no LCD in I2C bus \r\n");
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <LCD_IO_Init+0x64>)
 80019ac:	f007 fd70 	bl	8009490 <puts>
}
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002fc 	.word	0x200002fc
 80019bc:	0800b76c 	.word	0x0800b76c
 80019c0:	200007c0 	.word	0x200007c0
 80019c4:	0800b788 	.word	0x0800b788

080019c8 <LCD_IO_WriteCommand>:
void LCD_IO_WriteCommand(uint8_t Value){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	uint8_t command_buffer[2]={0x80,0};
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	81bb      	strh	r3, [r7, #12]
	command_buffer[1]=Value;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,command_buffer,2,-1);
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <LCD_IO_WriteCommand+0x34>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b299      	uxth	r1, r3
 80019e0:	f107 020c 	add.w	r2, r7, #12
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <LCD_IO_WriteCommand+0x38>)
 80019ee:	f002 ff51 	bl	8004894 <HAL_I2C_Master_Transmit>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200007c0 	.word	0x200007c0
 8001a00:	200002fc 	.word	0x200002fc

08001a04 <LCD_IO_WriteMultipleData>:
void    LCD_IO_WriteData(uint8_t Value){
	uint8_t data_buffer[2]={0xc0,0};
	data_buffer[1]=Value;
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,2,-1);
}
void    LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001a10:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001a14:	6018      	str	r0, [r3, #0]
 8001a16:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001a1a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001a1e:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer[1025];
	data_buffer[0]=0x40;
 8001a20:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001a24:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001a28:	2240      	movs	r2, #64	@ 0x40
 8001a2a:	701a      	strb	r2, [r3, #0]
	memcpy(data_buffer+1,pData,Size+1);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	3301      	adds	r3, #1
 8001a32:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001a36:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	3201      	adds	r2, #1
 8001a3e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8001a42:	f2a1 410c 	subw	r1, r1, #1036	@ 0x40c
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 fec4 	bl	80097d6 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,Size+1,-1);
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <LCD_IO_WriteMultipleData+0x7c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b299      	uxth	r1, r3
 8001a54:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001a58:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f107 020c 	add.w	r2, r7, #12
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	9000      	str	r0, [sp, #0]
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <LCD_IO_WriteMultipleData+0x80>)
 8001a70:	f002 ff10 	bl	8004894 <HAL_I2C_Master_Transmit>

}
 8001a74:	bf00      	nop
 8001a76:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200007c0 	.word	0x200007c0
 8001a84:	200002fc 	.word	0x200002fc

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_MspInit+0x44>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	@ 0x38
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_InitTick+0xe0>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	4a33      	ldr	r2, [pc, #204]	@ (8001bb0 <HAL_InitTick+0xe0>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_InitTick+0xe0>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af6:	f107 0210 	add.w	r2, r7, #16
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 f895 	bl	8005c30 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b10:	f004 f862 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8001b14:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b16:	e004      	b.n	8001b22 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b18:	f004 f85e 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <HAL_InitTick+0xe4>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b30:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b32:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_InitTick+0xec>)
 8001b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b56:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b58:	f004 fe5b 	bl	8006812 <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11b      	bne.n	8001ba2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b6c:	f004 fea8 	bl	80068c0 <HAL_TIM_Base_Start_IT>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d111      	bne.n	8001ba2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b7e:	2036      	movs	r0, #54	@ 0x36
 8001b80:	f002 fbec 	bl	800435c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	d808      	bhi.n	8001b9c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	2036      	movs	r0, #54	@ 0x36
 8001b90:	f002 fbc8 	bl	8004324 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b94:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_InitTick+0xf0>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e002      	b.n	8001ba2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3738      	adds	r7, #56	@ 0x38
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	431bde83 	.word	0x431bde83
 8001bb8:	200007c4 	.word	0x200007c4
 8001bbc:	40001000 	.word	0x40001000
 8001bc0:	20000094 	.word	0x20000094

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <ADC1_2_IRQHandler+0x10>)
 8001c2a:	f001 fb91 	bl	8003350 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000028c 	.word	0x2000028c

08001c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM4_IRQHandler+0x10>)
 8001c3e:	f005 f844 	bl	8006cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200008ac 	.word	0x200008ac

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_BOTTOM_Pin);
 8001c50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c54:	f002 fd6a 	bl	800472c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c5c:	f002 fd66 	bl	800472c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001c60:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c64:	f002 fd62 	bl	800472c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <TIM6_DAC_IRQHandler+0x10>)
 8001c72:	f005 f82a 	bl	8006cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200007c4 	.word	0x200007c4

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f007 fd6f 	bl	800977c <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	bf00      	nop
 8001cc4:	e7fd      	b.n	8001cc2 <_exit+0x12>

08001cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e00a      	b.n	8001cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd8:	f7ff fb96 	bl	8001408 <__io_getchar>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf0      	blt.n	8001cd8 <_read+0x12>
  }

  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e009      	b.n	8001d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fb62 	bl	80013e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf1      	blt.n	8001d12 <_write+0x12>
  }
  return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_close>:

int _close(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	605a      	str	r2, [r3, #4]
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_isatty>:

int _isatty(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f007 fcd4 	bl	800977c <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20018000 	.word	0x20018000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000810 	.word	0x20000810
 8001e08:	20000b60 	.word	0x20000b60

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f007 fc3a 	bl	80096b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001ea2:	f004 fdde 	bl	8006a62 <HAL_TIM_Encoder_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001eac:	f7ff fb6a 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001ebe:	f005 fe4d 	bl	8007b5c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ec8:	f7ff fb5c 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	@ 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000814 	.word	0x20000814

08001ed8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	@ 0x38
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <MX_TIM3_Init+0xec>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f12:	224f      	movs	r2, #79	@ 0x4f
 8001f14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f30:	4823      	ldr	r0, [pc, #140]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f32:	f004 fc6e 	bl	8006812 <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f3c:	f7ff fb22 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481c      	ldr	r0, [pc, #112]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f4e:	f005 f8d7 	bl	8007100 <HAL_TIM_ConfigClockSource>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f58:	f7ff fb14 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f5c:	4818      	ldr	r0, [pc, #96]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f5e:	f004 fd1f 	bl	80069a0 <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f68:	f7ff fb0c 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001f7c:	f005 fdee 	bl	8007b5c <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f86:	f7ff fafd 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	@ 0x60
 8001f8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001fa2:	f004 ff99 	bl	8006ed8 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001fac:	f7ff faea 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb0:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <MX_TIM3_Init+0xe8>)
 8001fb2:	f000 f8d1 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3738      	adds	r7, #56	@ 0x38
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000860 	.word	0x20000860
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <MX_TIM4_Init+0x94>)
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <MX_TIM4_Init+0x98>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <MX_TIM4_Init+0x94>)
 8001fee:	224f      	movs	r2, #79	@ 0x4f
 8001ff0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <MX_TIM4_Init+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_TIM4_Init+0x94>)
 8001ffa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ffe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b16      	ldr	r3, [pc, #88]	@ (800205c <MX_TIM4_Init+0x94>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_TIM4_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800200c:	4813      	ldr	r0, [pc, #76]	@ (800205c <MX_TIM4_Init+0x94>)
 800200e:	f004 fc00 	bl	8006812 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002018:	f7ff fab4 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4619      	mov	r1, r3
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <MX_TIM4_Init+0x94>)
 800202a:	f005 f869 	bl	8007100 <HAL_TIM_ConfigClockSource>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002034:	f7ff faa6 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002038:	2320      	movs	r3, #32
 800203a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_TIM4_Init+0x94>)
 8002046:	f005 fd89 	bl	8007b5c <HAL_TIMEx_MasterConfigSynchronization>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002050:	f7ff fa98 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200008ac 	.word	0x200008ac
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d128      	bne.n	80020d8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b6:	2303      	movs	r3, #3
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c6:	2301      	movs	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d4:	f002 f950 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	@ 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a16      	ldr	r2, [pc, #88]	@ (800214c <HAL_TIM_Base_MspInit+0x68>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10c      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6593      	str	r3, [r2, #88]	@ 0x58
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800210e:	e018      	b.n	8002142 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0f      	ldr	r2, [pc, #60]	@ (8002154 <HAL_TIM_Base_MspInit+0x70>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d113      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_TIM_Base_MspInit+0x6c>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	201e      	movs	r0, #30
 8002138:	f002 f8f4 	bl	8004324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800213c:	201e      	movs	r0, #30
 800213e:	f002 f90d 	bl	800435c <HAL_NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40000400 	.word	0x40000400
 8002150:	40021000 	.word	0x40021000
 8002154:	40000800 	.word	0x40000800

08002158 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_TIM_MspPostInit+0x64>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11c      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_TIM_MspPostInit+0x68>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	4a10      	ldr	r2, [pc, #64]	@ (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002192:	2340      	movs	r3, #64	@ 0x40
 8002194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b0:	f002 f8e2 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40021000 	.word	0x40021000

080021c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021ca:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <MX_USART1_UART_Init+0x5c>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <MX_USART1_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <MX_USART1_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	@ (800221c <MX_USART1_UART_Init+0x58>)
 8002208:	f005 fd4e 	bl	8007ca8 <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002212:	f7ff f9b7 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200008f8 	.word	0x200008f8
 8002220:	40013800 	.word	0x40013800

08002224 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800222a:	4a15      	ldr	r2, [pc, #84]	@ (8002280 <MX_USART2_UART_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002268:	f005 fd1e 	bl	8007ca8 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002272:	f7ff f987 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000980 	.word	0x20000980
 8002280:	40004400 	.word	0x40004400

08002284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0ae      	sub	sp, #184	@ 0xb8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	2288      	movs	r2, #136	@ 0x88
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f007 fa07 	bl	80096b8 <memset>
  if(uartHandle->Instance==USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a43      	ldr	r2, [pc, #268]	@ (80023bc <HAL_UART_MspInit+0x138>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d13d      	bne.n	8002330 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022b8:	2300      	movs	r3, #0
 80022ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fd47 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022cc:	f7ff f95a 	bl	8001584 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	4a3a      	ldr	r2, [pc, #232]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022da:	6613      	str	r3, [r2, #96]	@ 0x60
 80022dc:	4b38      	ldr	r3, [pc, #224]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b35      	ldr	r3, [pc, #212]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	4a34      	ldr	r2, [pc, #208]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f4:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002300:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800231a:	2307      	movs	r3, #7
 800231c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002324:	4619      	mov	r1, r3
 8002326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232a:	f002 f825 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800232e:	e040      	b.n	80023b2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a23      	ldr	r2, [pc, #140]	@ (80023c4 <HAL_UART_MspInit+0x140>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d13b      	bne.n	80023b2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800233a:	2302      	movs	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800233e:	2300      	movs	r3, #0
 8002340:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fd04 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002352:	f7ff f917 	bl	8001584 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	6593      	str	r3, [r2, #88]	@ 0x58
 8002362:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_UART_MspInit+0x13c>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002386:	230c      	movs	r3, #12
 8002388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239e:	2307      	movs	r3, #7
 80023a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ae:	f001 ffe3 	bl	8004378 <HAL_GPIO_Init>
}
 80023b2:	bf00      	nop
 80023b4:	37b8      	adds	r7, #184	@ 0xb8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40004400 	.word	0x40004400

080023c8 <is_equal>:
static int i = 0;
static int x = 0;

static char* caracteres[CHARACTER_LIST_LENGTH] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};

int is_equal(char** correct_code, char** test_code){
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	return (correct_code[0]==test_code[0]) && (correct_code[1]==test_code[1]) && (correct_code[2]==test_code[2]);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d111      	bne.n	8002402 <is_equal+0x3a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d109      	bne.n	8002402 <is_equal+0x3a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3308      	adds	r3, #8
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	3308      	adds	r3, #8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d101      	bne.n	8002402 <is_equal+0x3a>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <is_equal+0x3c>
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_15){
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002420:	d112      	bne.n	8002448 <HAL_GPIO_EXTI_Callback+0x38>
		printf("\r\nButton pressed !\r\n");
 8002422:	480b      	ldr	r0, [pc, #44]	@ (8002450 <HAL_GPIO_EXTI_Callback+0x40>)
 8002424:	f007 f834 	bl	8009490 <puts>
		enteredCode[i] = caracteres[encoder_read()];
 8002428:	f7fe fe3e 	bl	80010a8 <encoder_read>
 800242c:	4602      	mov	r2, r0
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_GPIO_EXTI_Callback+0x44>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4909      	ldr	r1, [pc, #36]	@ (8002458 <HAL_GPIO_EXTI_Callback+0x48>)
 8002434:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002438:	4908      	ldr	r1, [pc, #32]	@ (800245c <HAL_GPIO_EXTI_Callback+0x4c>)
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_GPIO_EXTI_Callback+0x44>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a03      	ldr	r2, [pc, #12]	@ (8002454 <HAL_GPIO_EXTI_Callback+0x44>)
 8002446:	6013      	str	r3, [r2, #0]
	}
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800b7e8 	.word	0x0800b7e8
 8002454:	20000a08 	.word	0x20000a08
 8002458:	20000054 	.word	0x20000054
 800245c:	2000000c 	.word	0x2000000c

08002460 <etape0>:


void etape0(void){
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800246c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002470:	f002 f944 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2104      	movs	r1, #4
 8002478:	4811      	ldr	r0, [pc, #68]	@ (80024c0 <etape0+0x60>)
 800247a:	f002 f93f 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2120      	movs	r1, #32
 8002482:	480f      	ldr	r0, [pc, #60]	@ (80024c0 <etape0+0x60>)
 8002484:	f002 f93a 	bl	80046fc <HAL_GPIO_WritePin>
	ssd1315_Clear(SSD1315_COLOR_BLACK);
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff f955 	bl	8001738 <ssd1315_Clear>

	char buffer[16] = {0};
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
	snprintf(buffer, 16, "ALARM OFF");
 800249c:	463b      	mov	r3, r7
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <etape0+0x64>)
 80024a0:	2110      	movs	r1, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f006 fffc 	bl	80094a0 <sniprintf>
	ssd1315_Draw_String(0, 0, buffer, &Font_11x18); //Tailles disponibles : 7x10; 11x18; 16x26
 80024a8:	463a      	mov	r2, r7
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <etape0+0x68>)
 80024ac:	2100      	movs	r1, #0
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff fa2a 	bl	8001908 <ssd1315_Draw_String>
	ssd1315_Refresh();
 80024b4:	f7ff f9a8 	bl	8001808 <ssd1315_Refresh>
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	48000400 	.word	0x48000400
 80024c4:	0800b7fc 	.word	0x0800b7fc
 80024c8:	20000000 	.word	0x20000000

080024cc <etape1>:

void etape1(void){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
	i=0;
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <etape1+0x124>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
	enteredCode[0] = "X";
 80024d8:	4b46      	ldr	r3, [pc, #280]	@ (80025f4 <etape1+0x128>)
 80024da:	4a47      	ldr	r2, [pc, #284]	@ (80025f8 <etape1+0x12c>)
 80024dc:	601a      	str	r2, [r3, #0]
	enteredCode[1] = "X";
 80024de:	4b45      	ldr	r3, [pc, #276]	@ (80025f4 <etape1+0x128>)
 80024e0:	4a45      	ldr	r2, [pc, #276]	@ (80025f8 <etape1+0x12c>)
 80024e2:	605a      	str	r2, [r3, #4]
	enteredCode[2] = "X";
 80024e4:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <etape1+0x128>)
 80024e6:	4a44      	ldr	r2, [pc, #272]	@ (80025f8 <etape1+0x12c>)
 80024e8:	609a      	str	r2, [r3, #8]
	while(i!=3){
 80024ea:	e077      	b.n	80025dc <etape1+0x110>
		char CNT1[16] = {0};
 80024ec:	2300      	movs	r3, #0
 80024ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80024f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
		strcpy(CNT1, "CODE 1 : ");
 80024fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002500:	4a3e      	ldr	r2, [pc, #248]	@ (80025fc <etape1+0x130>)
 8002502:	ca07      	ldmia	r2, {r0, r1, r2}
 8002504:	c303      	stmia	r3!, {r0, r1}
 8002506:	801a      	strh	r2, [r3, #0]
		strcat(CNT1, caracteres[encoder_read()]);
 8002508:	f7fe fdce 	bl	80010a8 <encoder_read>
 800250c:	4603      	mov	r3, r0
 800250e:	4a3c      	ldr	r2, [pc, #240]	@ (8002600 <etape1+0x134>)
 8002510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002514:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f007 f8d4 	bl	80096c8 <strcat>

		ssd1315_Clear(SSD1315_COLOR_BLACK);
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff f909 	bl	8001738 <ssd1315_Clear>

		char buffer_cnt1[16] = {0};
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
 800252a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
		char buffer_caractere1_c1[16] = {0};
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
		char buffer_caractere2_c1[16] = {0};
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
		char buffer_caractere3_c1[16] = {0};
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
		snprintf(buffer_cnt1, 16, CNT1);
 8002564:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800256c:	2110      	movs	r1, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f006 ff96 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere1_c1, 16, enteredCode[0]);
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <etape1+0x128>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f107 0320 	add.w	r3, r7, #32
 800257c:	2110      	movs	r1, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f006 ff8e 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere2_c1, 16, enteredCode[1]);
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <etape1+0x128>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2110      	movs	r1, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f006 ff86 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere3_c1, 16, enteredCode[2]);
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <etape1+0x128>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	463b      	mov	r3, r7
 800259a:	2110      	movs	r1, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f006 ff7f 	bl	80094a0 <sniprintf>
		ssd1315_Draw_String(0, 0, buffer_cnt1, &Font_11x18);
 80025a2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80025a6:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <etape1+0x138>)
 80025a8:	2100      	movs	r1, #0
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7ff f9ac 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(0, 20, buffer_caractere1_c1, &Font_11x18);
 80025b0:	f107 0220 	add.w	r2, r7, #32
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <etape1+0x138>)
 80025b6:	2114      	movs	r1, #20
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff f9a5 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(10, 20, buffer_caractere2_c1, &Font_11x18);
 80025be:	f107 0210 	add.w	r2, r7, #16
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <etape1+0x138>)
 80025c4:	2114      	movs	r1, #20
 80025c6:	200a      	movs	r0, #10
 80025c8:	f7ff f99e 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(20, 20, buffer_caractere3_c1, &Font_11x18);
 80025cc:	463a      	mov	r2, r7
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <etape1+0x138>)
 80025d0:	2114      	movs	r1, #20
 80025d2:	2014      	movs	r0, #20
 80025d4:	f7ff f998 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Refresh();
 80025d8:	f7ff f916 	bl	8001808 <ssd1315_Refresh>
	while(i!=3){
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <etape1+0x124>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d183      	bne.n	80024ec <etape1+0x20>
	}
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3750      	adds	r7, #80	@ 0x50
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000a08 	.word	0x20000a08
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	0800b7a4 	.word	0x0800b7a4
 80025fc:	0800b808 	.word	0x0800b808
 8002600:	20000054 	.word	0x20000054
 8002604:	20000000 	.word	0x20000000

08002608 <etape2>:

void etape2(void){
 8002608:	b580      	push	{r7, lr}
 800260a:	b094      	sub	sp, #80	@ 0x50
 800260c:	af00      	add	r7, sp, #0
	i=0;
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <etape2+0x124>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	enteredCode[0] = "X";
 8002614:	4b46      	ldr	r3, [pc, #280]	@ (8002730 <etape2+0x128>)
 8002616:	4a47      	ldr	r2, [pc, #284]	@ (8002734 <etape2+0x12c>)
 8002618:	601a      	str	r2, [r3, #0]
	enteredCode[1] = "X";
 800261a:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <etape2+0x128>)
 800261c:	4a45      	ldr	r2, [pc, #276]	@ (8002734 <etape2+0x12c>)
 800261e:	605a      	str	r2, [r3, #4]
	enteredCode[2] = "X";
 8002620:	4b43      	ldr	r3, [pc, #268]	@ (8002730 <etape2+0x128>)
 8002622:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <etape2+0x12c>)
 8002624:	609a      	str	r2, [r3, #8]
	while(i!=3){
 8002626:	e077      	b.n	8002718 <etape2+0x110>
		char CNT1[16] = {0};
 8002628:	2300      	movs	r3, #0
 800262a:	643b      	str	r3, [r7, #64]	@ 0x40
 800262c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
		strcpy(CNT1, "CODE 2 : ");
 8002638:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800263c:	4a3e      	ldr	r2, [pc, #248]	@ (8002738 <etape2+0x130>)
 800263e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002640:	c303      	stmia	r3!, {r0, r1}
 8002642:	801a      	strh	r2, [r3, #0]
		strcat(CNT1, caracteres[encoder_read()]);
 8002644:	f7fe fd30 	bl	80010a8 <encoder_read>
 8002648:	4603      	mov	r3, r0
 800264a:	4a3c      	ldr	r2, [pc, #240]	@ (800273c <etape2+0x134>)
 800264c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002650:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f007 f836 	bl	80096c8 <strcat>

		ssd1315_Clear(SSD1315_COLOR_BLACK);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff f86b 	bl	8001738 <ssd1315_Clear>

		char buffer_cnt1[16] = {0};
 8002662:	2300      	movs	r3, #0
 8002664:	633b      	str	r3, [r7, #48]	@ 0x30
 8002666:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
		char buffer_caractere1_c1[16] = {0};
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
		char buffer_caractere2_c1[16] = {0};
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
		char buffer_caractere3_c1[16] = {0};
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
		snprintf(buffer_cnt1, 16, CNT1);
 80026a0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80026a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026a8:	2110      	movs	r1, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f006 fef8 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere1_c1, 16, enteredCode[0]);
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <etape2+0x128>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f107 0320 	add.w	r3, r7, #32
 80026b8:	2110      	movs	r1, #16
 80026ba:	4618      	mov	r0, r3
 80026bc:	f006 fef0 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere2_c1, 16, enteredCode[1]);
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <etape2+0x128>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	2110      	movs	r1, #16
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 fee8 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere3_c1, 16, enteredCode[2]);
 80026d0:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <etape2+0x128>)
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	463b      	mov	r3, r7
 80026d6:	2110      	movs	r1, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f006 fee1 	bl	80094a0 <sniprintf>
		ssd1315_Draw_String(0, 0, buffer_cnt1, &Font_11x18);
 80026de:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80026e2:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <etape2+0x138>)
 80026e4:	2100      	movs	r1, #0
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff f90e 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(0, 20, buffer_caractere1_c1, &Font_11x18);
 80026ec:	f107 0220 	add.w	r2, r7, #32
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <etape2+0x138>)
 80026f2:	2114      	movs	r1, #20
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff f907 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(10, 20, buffer_caractere2_c1, &Font_11x18);
 80026fa:	f107 0210 	add.w	r2, r7, #16
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <etape2+0x138>)
 8002700:	2114      	movs	r1, #20
 8002702:	200a      	movs	r0, #10
 8002704:	f7ff f900 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(20, 20, buffer_caractere3_c1, &Font_11x18);
 8002708:	463a      	mov	r2, r7
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <etape2+0x138>)
 800270c:	2114      	movs	r1, #20
 800270e:	2014      	movs	r0, #20
 8002710:	f7ff f8fa 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Refresh();
 8002714:	f7ff f878 	bl	8001808 <ssd1315_Refresh>
	while(i!=3){
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <etape2+0x124>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d183      	bne.n	8002628 <etape2+0x20>
	}
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3750      	adds	r7, #80	@ 0x50
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000a08 	.word	0x20000a08
 8002730:	2000000c 	.word	0x2000000c
 8002734:	0800b7a4 	.word	0x0800b7a4
 8002738:	0800b814 	.word	0x0800b814
 800273c:	20000054 	.word	0x20000054
 8002740:	20000000 	.word	0x20000000

08002744 <etape3>:

void etape3(void){
 8002744:	b580      	push	{r7, lr}
 8002746:	b094      	sub	sp, #80	@ 0x50
 8002748:	af00      	add	r7, sp, #0
	i=0;
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <etape3+0x124>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
	enteredCode[0] = "X";
 8002750:	4b46      	ldr	r3, [pc, #280]	@ (800286c <etape3+0x128>)
 8002752:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <etape3+0x12c>)
 8002754:	601a      	str	r2, [r3, #0]
	enteredCode[1] = "X";
 8002756:	4b45      	ldr	r3, [pc, #276]	@ (800286c <etape3+0x128>)
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <etape3+0x12c>)
 800275a:	605a      	str	r2, [r3, #4]
	enteredCode[2] = "X";
 800275c:	4b43      	ldr	r3, [pc, #268]	@ (800286c <etape3+0x128>)
 800275e:	4a44      	ldr	r2, [pc, #272]	@ (8002870 <etape3+0x12c>)
 8002760:	609a      	str	r2, [r3, #8]
	while(i!=3){
 8002762:	e077      	b.n	8002854 <etape3+0x110>
		char CNT1[16] = {0};
 8002764:	2300      	movs	r3, #0
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
 8002768:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
		strcpy(CNT1, "CODE 3 : ");
 8002774:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002778:	4a3e      	ldr	r2, [pc, #248]	@ (8002874 <etape3+0x130>)
 800277a:	ca07      	ldmia	r2, {r0, r1, r2}
 800277c:	c303      	stmia	r3!, {r0, r1}
 800277e:	801a      	strh	r2, [r3, #0]
		strcat(CNT1, caracteres[encoder_read()]);
 8002780:	f7fe fc92 	bl	80010a8 <encoder_read>
 8002784:	4603      	mov	r3, r0
 8002786:	4a3c      	ldr	r2, [pc, #240]	@ (8002878 <etape3+0x134>)
 8002788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800278c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f006 ff98 	bl	80096c8 <strcat>

		ssd1315_Clear(SSD1315_COLOR_BLACK);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe ffcd 	bl	8001738 <ssd1315_Clear>

		char buffer_cnt1[16] = {0};
 800279e:	2300      	movs	r3, #0
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
		char buffer_caractere1_c1[16] = {0};
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
		char buffer_caractere2_c1[16] = {0};
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
		char buffer_caractere3_c1[16] = {0};
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
		snprintf(buffer_cnt1, 16, CNT1);
 80027dc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80027e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e4:	2110      	movs	r1, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f006 fe5a 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere1_c1, 16, enteredCode[0]);
 80027ec:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <etape3+0x128>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	2110      	movs	r1, #16
 80027f6:	4618      	mov	r0, r3
 80027f8:	f006 fe52 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere2_c1, 16, enteredCode[1]);
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <etape3+0x128>)
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	2110      	movs	r1, #16
 8002806:	4618      	mov	r0, r3
 8002808:	f006 fe4a 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere3_c1, 16, enteredCode[2]);
 800280c:	4b17      	ldr	r3, [pc, #92]	@ (800286c <etape3+0x128>)
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	463b      	mov	r3, r7
 8002812:	2110      	movs	r1, #16
 8002814:	4618      	mov	r0, r3
 8002816:	f006 fe43 	bl	80094a0 <sniprintf>
		ssd1315_Draw_String(0, 0, buffer_cnt1, &Font_11x18);
 800281a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <etape3+0x138>)
 8002820:	2100      	movs	r1, #0
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff f870 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(0, 20, buffer_caractere1_c1, &Font_11x18);
 8002828:	f107 0220 	add.w	r2, r7, #32
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <etape3+0x138>)
 800282e:	2114      	movs	r1, #20
 8002830:	2000      	movs	r0, #0
 8002832:	f7ff f869 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(10, 20, buffer_caractere2_c1, &Font_11x18);
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <etape3+0x138>)
 800283c:	2114      	movs	r1, #20
 800283e:	200a      	movs	r0, #10
 8002840:	f7ff f862 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(20, 20, buffer_caractere3_c1, &Font_11x18);
 8002844:	463a      	mov	r2, r7
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <etape3+0x138>)
 8002848:	2114      	movs	r1, #20
 800284a:	2014      	movs	r0, #20
 800284c:	f7ff f85c 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Refresh();
 8002850:	f7fe ffda 	bl	8001808 <ssd1315_Refresh>
	while(i!=3){
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <etape3+0x124>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d183      	bne.n	8002764 <etape3+0x20>
	}
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3750      	adds	r7, #80	@ 0x50
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000a08 	.word	0x20000a08
 800286c:	2000000c 	.word	0x2000000c
 8002870:	0800b7a4 	.word	0x0800b7a4
 8002874:	0800b820 	.word	0x0800b820
 8002878:	20000054 	.word	0x20000054
 800287c:	20000000 	.word	0x20000000

08002880 <etapeD>:

void etapeD(void){
 8002880:	b580      	push	{r7, lr}
 8002882:	b094      	sub	sp, #80	@ 0x50
 8002884:	af00      	add	r7, sp, #0
	i=0;
 8002886:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <etapeD+0x124>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	enteredCode[0] = "X";
 800288c:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <etapeD+0x128>)
 800288e:	4a47      	ldr	r2, [pc, #284]	@ (80029ac <etapeD+0x12c>)
 8002890:	601a      	str	r2, [r3, #0]
	enteredCode[1] = "X";
 8002892:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <etapeD+0x128>)
 8002894:	4a45      	ldr	r2, [pc, #276]	@ (80029ac <etapeD+0x12c>)
 8002896:	605a      	str	r2, [r3, #4]
	enteredCode[2] = "X";
 8002898:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <etapeD+0x128>)
 800289a:	4a44      	ldr	r2, [pc, #272]	@ (80029ac <etapeD+0x12c>)
 800289c:	609a      	str	r2, [r3, #8]
	while(i!=3){
 800289e:	e077      	b.n	8002990 <etapeD+0x110>
		char CNT1[16] = {0};
 80028a0:	2300      	movs	r3, #0
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
		strcpy(CNT1, "CODE D : ");
 80028b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028b4:	4a3e      	ldr	r2, [pc, #248]	@ (80029b0 <etapeD+0x130>)
 80028b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b8:	c303      	stmia	r3!, {r0, r1}
 80028ba:	801a      	strh	r2, [r3, #0]
		strcat(CNT1, caracteres[encoder_read()]);
 80028bc:	f7fe fbf4 	bl	80010a8 <encoder_read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a3c      	ldr	r2, [pc, #240]	@ (80029b4 <etapeD+0x134>)
 80028c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f006 fefa 	bl	80096c8 <strcat>

		ssd1315_Clear(SSD1315_COLOR_BLACK);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe ff2f 	bl	8001738 <ssd1315_Clear>

		char buffer_cnt1[16] = {0};
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
		char buffer_caractere1_c1[16] = {0};
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
		char buffer_caractere2_c1[16] = {0};
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
		char buffer_caractere3_c1[16] = {0};
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
		snprintf(buffer_cnt1, 16, CNT1);
 8002918:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800291c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002920:	2110      	movs	r1, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f006 fdbc 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere1_c1, 16, enteredCode[0]);
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <etapeD+0x128>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f107 0320 	add.w	r3, r7, #32
 8002930:	2110      	movs	r1, #16
 8002932:	4618      	mov	r0, r3
 8002934:	f006 fdb4 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere2_c1, 16, enteredCode[1]);
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <etapeD+0x128>)
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	2110      	movs	r1, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f006 fdac 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere3_c1, 16, enteredCode[2]);
 8002948:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <etapeD+0x128>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	463b      	mov	r3, r7
 800294e:	2110      	movs	r1, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f006 fda5 	bl	80094a0 <sniprintf>
		ssd1315_Draw_String(0, 0, buffer_cnt1, &Font_11x18);
 8002956:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <etapeD+0x138>)
 800295c:	2100      	movs	r1, #0
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe ffd2 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(0, 20, buffer_caractere1_c1, &Font_11x18);
 8002964:	f107 0220 	add.w	r2, r7, #32
 8002968:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <etapeD+0x138>)
 800296a:	2114      	movs	r1, #20
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe ffcb 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(10, 20, buffer_caractere2_c1, &Font_11x18);
 8002972:	f107 0210 	add.w	r2, r7, #16
 8002976:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <etapeD+0x138>)
 8002978:	2114      	movs	r1, #20
 800297a:	200a      	movs	r0, #10
 800297c:	f7fe ffc4 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(20, 20, buffer_caractere3_c1, &Font_11x18);
 8002980:	463a      	mov	r2, r7
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <etapeD+0x138>)
 8002984:	2114      	movs	r1, #20
 8002986:	2014      	movs	r0, #20
 8002988:	f7fe ffbe 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Refresh();
 800298c:	f7fe ff3c 	bl	8001808 <ssd1315_Refresh>
	while(i!=3){
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <etapeD+0x124>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d183      	bne.n	80028a0 <etapeD+0x20>
	}
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3750      	adds	r7, #80	@ 0x50
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000a08 	.word	0x20000a08
 80029a8:	2000000c 	.word	0x2000000c
 80029ac:	0800b7a4 	.word	0x0800b7a4
 80029b0:	0800b82c 	.word	0x0800b82c
 80029b4:	20000054 	.word	0x20000054
 80029b8:	20000000 	.word	0x20000000

080029bc <etapeE>:

void etapeE(void){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b094      	sub	sp, #80	@ 0x50
 80029c0:	af00      	add	r7, sp, #0
	i=0;
 80029c2:	4b47      	ldr	r3, [pc, #284]	@ (8002ae0 <etapeE+0x124>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
	enteredCode[0] = "X";
 80029c8:	4b46      	ldr	r3, [pc, #280]	@ (8002ae4 <etapeE+0x128>)
 80029ca:	4a47      	ldr	r2, [pc, #284]	@ (8002ae8 <etapeE+0x12c>)
 80029cc:	601a      	str	r2, [r3, #0]
	enteredCode[1] = "X";
 80029ce:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <etapeE+0x128>)
 80029d0:	4a45      	ldr	r2, [pc, #276]	@ (8002ae8 <etapeE+0x12c>)
 80029d2:	605a      	str	r2, [r3, #4]
	enteredCode[2] = "X";
 80029d4:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <etapeE+0x128>)
 80029d6:	4a44      	ldr	r2, [pc, #272]	@ (8002ae8 <etapeE+0x12c>)
 80029d8:	609a      	str	r2, [r3, #8]
	while(i!=3){
 80029da:	e077      	b.n	8002acc <etapeE+0x110>
		char CNT1[16] = {0};
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
		strcpy(CNT1, "CODE E : ");
 80029ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029f0:	4a3e      	ldr	r2, [pc, #248]	@ (8002aec <etapeE+0x130>)
 80029f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f4:	c303      	stmia	r3!, {r0, r1}
 80029f6:	801a      	strh	r2, [r3, #0]
		strcat(CNT1, caracteres[encoder_read()]);
 80029f8:	f7fe fb56 	bl	80010a8 <encoder_read>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a3c      	ldr	r2, [pc, #240]	@ (8002af0 <etapeE+0x134>)
 8002a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 fe5c 	bl	80096c8 <strcat>

		ssd1315_Clear(SSD1315_COLOR_BLACK);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fe91 	bl	8001738 <ssd1315_Clear>

		char buffer_cnt1[16] = {0};
 8002a16:	2300      	movs	r3, #0
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
		char buffer_caractere1_c1[16] = {0};
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
		char buffer_caractere2_c1[16] = {0};
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
		char buffer_caractere3_c1[16] = {0};
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
		snprintf(buffer_cnt1, 16, CNT1);
 8002a54:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fd1e 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere1_c1, 16, enteredCode[0]);
 8002a64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <etapeE+0x128>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f006 fd16 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere2_c1, 16, enteredCode[1]);
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <etapeE+0x128>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fd0e 	bl	80094a0 <sniprintf>
		snprintf(buffer_caractere3_c1, 16, enteredCode[2]);
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <etapeE+0x128>)
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	463b      	mov	r3, r7
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f006 fd07 	bl	80094a0 <sniprintf>
		ssd1315_Draw_String(0, 0, buffer_cnt1, &Font_11x18);
 8002a92:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <etapeE+0x138>)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe ff34 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(0, 20, buffer_caractere1_c1, &Font_11x18);
 8002aa0:	f107 0220 	add.w	r2, r7, #32
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <etapeE+0x138>)
 8002aa6:	2114      	movs	r1, #20
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe ff2d 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(10, 20, buffer_caractere2_c1, &Font_11x18);
 8002aae:	f107 0210 	add.w	r2, r7, #16
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <etapeE+0x138>)
 8002ab4:	2114      	movs	r1, #20
 8002ab6:	200a      	movs	r0, #10
 8002ab8:	f7fe ff26 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Draw_String(20, 20, buffer_caractere3_c1, &Font_11x18);
 8002abc:	463a      	mov	r2, r7
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <etapeE+0x138>)
 8002ac0:	2114      	movs	r1, #20
 8002ac2:	2014      	movs	r0, #20
 8002ac4:	f7fe ff20 	bl	8001908 <ssd1315_Draw_String>
		ssd1315_Refresh();
 8002ac8:	f7fe fe9e 	bl	8001808 <ssd1315_Refresh>
	while(i!=3){
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <etapeE+0x124>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d183      	bne.n	80029dc <etapeE+0x20>
	}
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3750      	adds	r7, #80	@ 0x50
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000a08 	.word	0x20000a08
 8002ae4:	2000000c 	.word	0x2000000c
 8002ae8:	0800b7a4 	.word	0x0800b7a4
 8002aec:	0800b838 	.word	0x0800b838
 8002af0:	20000054 	.word	0x20000054
 8002af4:	20000000 	.word	0x20000000

08002af8 <setup>:

void setup(){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	printf("\r\n\r\n=====================================================================\r\n");
 8002afc:	4804      	ldr	r0, [pc, #16]	@ (8002b10 <setup+0x18>)
 8002afe:	f006 fcc7 	bl	8009490 <puts>
	encoder_init(&htim2, ENCODER_MIN_VALUE, ENCODER_MAX_VALUE);
 8002b02:	220f      	movs	r2, #15
 8002b04:	2100      	movs	r1, #0
 8002b06:	4803      	ldr	r0, [pc, #12]	@ (8002b14 <setup+0x1c>)
 8002b08:	f7fe faae 	bl	8001068 <encoder_init>
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	0800b844 	.word	0x0800b844
 8002b14:	20000814 	.word	0x20000814

08002b18 <loop>:

void loop(){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	if (x!=1){
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c18 <loop+0x100>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <loop+0x10>
	etape0();
 8002b24:	f7ff fc9c 	bl	8002460 <etape0>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)==0 || x==1){
 8002b28:	2120      	movs	r1, #32
 8002b2a:	483c      	ldr	r0, [pc, #240]	@ (8002c1c <loop+0x104>)
 8002b2c:	f001 fdce 	bl	80046cc <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <loop+0x26>
 8002b36:	4b38      	ldr	r3, [pc, #224]	@ (8002c18 <loop+0x100>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d16a      	bne.n	8002c14 <loop+0xfc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2104      	movs	r1, #4
 8002b42:	4837      	ldr	r0, [pc, #220]	@ (8002c20 <loop+0x108>)
 8002b44:	f001 fdda 	bl	80046fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	4834      	ldr	r0, [pc, #208]	@ (8002c20 <loop+0x108>)
 8002b4e:	f001 fdd5 	bl	80046fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b5c:	f001 fdce 	bl	80046fc <HAL_GPIO_WritePin>
		etape1();
 8002b60:	f7ff fcb4 	bl	80024cc <etape1>
		while((i==3)){
 8002b64:	e051      	b.n	8002c0a <loop+0xf2>
			if(is_equal(code1, enteredCode)){
 8002b66:	492f      	ldr	r1, [pc, #188]	@ (8002c24 <loop+0x10c>)
 8002b68:	482f      	ldr	r0, [pc, #188]	@ (8002c28 <loop+0x110>)
 8002b6a:	f7ff fc2d 	bl	80023c8 <is_equal>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <loop+0x88>
				etape2();
 8002b74:	f7ff fd48 	bl	8002608 <etape2>
				if(is_equal(code2, enteredCode)){
 8002b78:	492a      	ldr	r1, [pc, #168]	@ (8002c24 <loop+0x10c>)
 8002b7a:	482c      	ldr	r0, [pc, #176]	@ (8002c2c <loop+0x114>)
 8002b7c:	f7ff fc24 	bl	80023c8 <is_equal>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <loop+0x88>
					etape3();
 8002b86:	f7ff fddd 	bl	8002744 <etape3>
					if(is_equal(code3, enteredCode)){
 8002b8a:	4926      	ldr	r1, [pc, #152]	@ (8002c24 <loop+0x10c>)
 8002b8c:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <loop+0x118>)
 8002b8e:	f7ff fc1b 	bl	80023c8 <is_equal>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <loop+0x88>
						x=0;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <loop+0x100>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
						break;
 8002b9e:	e039      	b.n	8002c14 <loop+0xfc>
					}
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002baa:	f001 fda7 	bl	80046fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2120      	movs	r1, #32
 8002bb2:	481b      	ldr	r0, [pc, #108]	@ (8002c20 <loop+0x108>)
 8002bb4:	f001 fda2 	bl	80046fc <HAL_GPIO_WritePin>
			etapeD();
 8002bb8:	f7ff fe62 	bl	8002880 <etapeD>
			if(is_equal(codeD, enteredCode)){
 8002bbc:	4919      	ldr	r1, [pc, #100]	@ (8002c24 <loop+0x10c>)
 8002bbe:	481d      	ldr	r0, [pc, #116]	@ (8002c34 <loop+0x11c>)
 8002bc0:	f7ff fc02 	bl	80023c8 <is_equal>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <loop+0xba>
				x = 1;
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <loop+0x100>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
				break;
 8002bd0:	e020      	b.n	8002c14 <loop+0xfc>
			}else{
				while(1){
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bdc:	f001 fd8e 	bl	80046fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8002be0:	2201      	movs	r2, #1
 8002be2:	2104      	movs	r1, #4
 8002be4:	480e      	ldr	r0, [pc, #56]	@ (8002c20 <loop+0x108>)
 8002be6:	f001 fd89 	bl	80046fc <HAL_GPIO_WritePin>
					etapeE();
 8002bea:	f7ff fee7 	bl	80029bc <etapeE>
					if(is_equal(codeE, enteredCode)){
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <loop+0x10c>)
 8002bf0:	4811      	ldr	r0, [pc, #68]	@ (8002c38 <loop+0x120>)
 8002bf2:	f7ff fbe9 	bl	80023c8 <is_equal>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ea      	beq.n	8002bd2 <loop+0xba>
						x=0;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <loop+0x100>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
						break;
 8002c02:	bf00      	nop
					}
				}
				i=0;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <loop+0x124>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
		while((i==3)){
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <loop+0x124>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d0a9      	beq.n	8002b66 <loop+0x4e>
			}
		}
	}
}
 8002c12:	e7ff      	b.n	8002c14 <loop+0xfc>
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000a0c 	.word	0x20000a0c
 8002c1c:	48000800 	.word	0x48000800
 8002c20:	48000400 	.word	0x48000400
 8002c24:	2000000c 	.word	0x2000000c
 8002c28:	20000018 	.word	0x20000018
 8002c2c:	20000024 	.word	0x20000024
 8002c30:	20000030 	.word	0x20000030
 8002c34:	2000003c 	.word	0x2000003c
 8002c38:	20000048 	.word	0x20000048
 8002c3c:	20000a08 	.word	0x20000a08

08002c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c44:	f7ff f8e2 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c48:	480c      	ldr	r0, [pc, #48]	@ (8002c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4a:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <LoopForever+0xe>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <LoopForever+0x16>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c6e:	f006 fd8b 	bl	8009788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c72:	f7fe fbe7 	bl	8001444 <main>

08002c76 <LoopForever>:

LoopForever:
    b LoopForever
 8002c76:	e7fe      	b.n	8002c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002c84:	0800c9b8 	.word	0x0800c9b8
  ldr r2, =_sbss
 8002c88:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002c8c:	20000b60 	.word	0x20000b60

08002c90 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC3_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <HAL_Init+0x3c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd0 <HAL_Init+0x3c>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002caa:	2003      	movs	r0, #3
 8002cac:	f001 fb2f 	bl	800430e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb0:	200f      	movs	r0, #15
 8002cb2:	f7fe ff0d 	bl	8001ad0 <HAL_InitTick>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	71fb      	strb	r3, [r7, #7]
 8002cc0:	e001      	b.n	8002cc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cc2:	f7fe fee1 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40022000 	.word	0x40022000

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000098 	.word	0x20000098
 8002cf8:	20000a10 	.word	0x20000a10

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000a10 	.word	0x20000a10

08002d14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3360      	adds	r3, #96	@ 0x60
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <LL_ADC_SetOffset+0x44>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	03fff000 	.word	0x03fff000

08002dc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3360      	adds	r3, #96	@ 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3360      	adds	r3, #96	@ 0x60
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3330      	adds	r3, #48	@ 0x30
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	211f      	movs	r1, #31
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	f003 011f 	and.w	r1, r3, #31
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	431a      	orrs	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0e5b      	lsrs	r3, r3, #25
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0d1b      	lsrs	r3, r3, #20
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2107      	movs	r1, #7
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	0d1b      	lsrs	r3, r3, #20
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0318 	and.w	r3, r3, #24
 8002f42:	4908      	ldr	r1, [pc, #32]	@ (8002f64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f44:	40d9      	lsrs	r1, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	400b      	ands	r3, r1
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	0007ffff 	.word	0x0007ffff

08002f68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 031f 	and.w	r3, r3, #31
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6093      	str	r3, [r2, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003000:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003028:	d101      	bne.n	800302e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <LL_ADC_IsEnabled+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_IsEnabled+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d101      	bne.n	800307a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d101      	bne.n	80030a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b089      	sub	sp, #36	@ 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e130      	b.n	800332c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd ff55 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff67 	bl	8002fc4 <LL_ADC_IsDeepPowerDownEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff4d 	bl	8002fa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff82 	bl	8003014 <LL_ADC_IsInternalRegulatorEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff66 	bl	8002fec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003120:	4b84      	ldr	r3, [pc, #528]	@ (8003334 <HAL_ADC_Init+0x284>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a84      	ldr	r2, [pc, #528]	@ (8003338 <HAL_ADC_Init+0x288>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003134:	e002      	b.n	800313c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff64 	bl	8003014 <LL_ADC_IsInternalRegulatorEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff75 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 8003178:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80c9 	bne.w	800331a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80c5 	bne.w	800331a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003198:	f043 0202 	orr.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff49 	bl	800303c <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d115      	bne.n	80031dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b0:	4862      	ldr	r0, [pc, #392]	@ (800333c <HAL_ADC_Init+0x28c>)
 80031b2:	f7ff ff43 	bl	800303c <LL_ADC_IsEnabled>
 80031b6:	4604      	mov	r4, r0
 80031b8:	4861      	ldr	r0, [pc, #388]	@ (8003340 <HAL_ADC_Init+0x290>)
 80031ba:	f7ff ff3f 	bl	800303c <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	431c      	orrs	r4, r3
 80031c2:	4860      	ldr	r0, [pc, #384]	@ (8003344 <HAL_ADC_Init+0x294>)
 80031c4:	f7ff ff3a 	bl	800303c <LL_ADC_IsEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4323      	orrs	r3, r4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4619      	mov	r1, r3
 80031d6:	485c      	ldr	r0, [pc, #368]	@ (8003348 <HAL_ADC_Init+0x298>)
 80031d8:	f7ff fd9c 	bl	8002d14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7e5b      	ldrb	r3, [r3, #25]
 80031e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80031ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80031f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d106      	bne.n	8003218 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	3b01      	subs	r3, #1
 8003210:	045b      	lsls	r3, r3, #17
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	4b44      	ldr	r3, [pc, #272]	@ (800334c <HAL_ADC_Init+0x29c>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	430b      	orrs	r3, r1
 8003246:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff1b 	bl	8003088 <LL_ADC_INJ_IsConversionOngoing>
 8003252:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13a      	bne.n	80032d6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003264:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800326c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	69b9      	ldr	r1, [r7, #24]
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003290:	2b01      	cmp	r3, #1
 8003292:	d118      	bne.n	80032c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032b6:	430a      	orrs	r2, r1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	611a      	str	r2, [r3, #16]
 80032c4:	e007      	b.n	80032d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10c      	bne.n	80032f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	f023 010f 	bic.w	r1, r3, #15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80032f6:	e007      	b.n	8003308 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 020f 	bic.w	r2, r2, #15
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	f023 0303 	bic.w	r3, r3, #3
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
 8003318:	e007      	b.n	800332a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f043 0210 	orr.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800332a:	7ffb      	ldrb	r3, [r7, #31]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3724      	adds	r7, #36	@ 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}
 8003334:	20000008 	.word	0x20000008
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	50040000 	.word	0x50040000
 8003340:	50040100 	.word	0x50040100
 8003344:	50040200 	.word	0x50040200
 8003348:	50040300 	.word	0x50040300
 800334c:	fff0c007 	.word	0xfff0c007

08003350 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800336c:	4882      	ldr	r0, [pc, #520]	@ (8003578 <HAL_ADC_IRQHandler+0x228>)
 800336e:	f7ff fdfb 	bl	8002f68 <LL_ADC_GetMultimode>
 8003372:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_ADC_IRQHandler+0x5e>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fe4d 	bl	8004040 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_ADC_IRQHandler+0x72>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8083 	beq.w	80034d4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d07d      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fd16 	bl	8002e26 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d062      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5d      	ldr	r2, [pc, #372]	@ (800357c <HAL_ADC_IRQHandler+0x22c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d002      	beq.n	8003410 <HAL_ADC_IRQHandler+0xc0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	e000      	b.n	8003412 <HAL_ADC_IRQHandler+0xc2>
 8003410:	4b5b      	ldr	r3, [pc, #364]	@ (8003580 <HAL_ADC_IRQHandler+0x230>)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	4293      	cmp	r3, r2
 8003418:	d008      	beq.n	800342c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d002      	beq.n	800342c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d104      	bne.n	8003436 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	e00c      	b.n	8003450 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a50      	ldr	r2, [pc, #320]	@ (800357c <HAL_ADC_IRQHandler+0x22c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d002      	beq.n	8003446 <HAL_ADC_IRQHandler+0xf6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e000      	b.n	8003448 <HAL_ADC_IRQHandler+0xf8>
 8003446:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <HAL_ADC_IRQHandler+0x230>)
 8003448:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d135      	bne.n	80034c6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d12e      	bne.n	80034c6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fdf8 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11a      	bne.n	80034ae <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 020c 	bic.w	r2, r2, #12
 8003486:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d112      	bne.n	80034c6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80034ac:	e00b      	b.n	80034c6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f95c 	bl	8003784 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	220c      	movs	r2, #12
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x198>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 809f 	beq.w	8003632 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8099 	beq.w	8003632 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fcc1 	bl	8002ea4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003522:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fc7c 	bl	8002e26 <LL_ADC_REG_IsTriggerSourceSWStart>
 800352e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a11      	ldr	r2, [pc, #68]	@ (800357c <HAL_ADC_IRQHandler+0x22c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d002      	beq.n	8003540 <HAL_ADC_IRQHandler+0x1f0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	e000      	b.n	8003542 <HAL_ADC_IRQHandler+0x1f2>
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <HAL_ADC_IRQHandler+0x230>)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	4293      	cmp	r3, r2
 8003548:	d008      	beq.n	800355c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d002      	beq.n	800355c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b07      	cmp	r3, #7
 800355a:	d104      	bne.n	8003566 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	e013      	b.n	800358e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a04      	ldr	r2, [pc, #16]	@ (800357c <HAL_ADC_IRQHandler+0x22c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_ADC_IRQHandler+0x234>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e007      	b.n	8003586 <HAL_ADC_IRQHandler+0x236>
 8003576:	bf00      	nop
 8003578:	50040300 	.word	0x50040300
 800357c:	50040100 	.word	0x50040100
 8003580:	50040000 	.word	0x50040000
 8003584:	4b7d      	ldr	r3, [pc, #500]	@ (800377c <HAL_ADC_IRQHandler+0x42c>)
 8003586:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d047      	beq.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_ADC_IRQHandler+0x25e>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03f      	beq.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d13a      	bne.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d133      	bne.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d12e      	bne.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fd5c 	bl	8003088 <LL_ADC_INJ_IsConversionOngoing>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11a      	bne.n	800360c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035e4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
 800360a:	e00b      	b.n	8003624 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fce3 	bl	8003ff0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2260      	movs	r2, #96	@ 0x60
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d011      	beq.n	8003660 <HAL_ADC_IRQHandler+0x310>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8a0 	bl	8003798 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2280      	movs	r2, #128	@ 0x80
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <HAL_ADC_IRQHandler+0x340>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fcc9 	bl	8004018 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x370>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fcbb 	bl	800402c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d036      	beq.n	8003738 <HAL_ADC_IRQHandler+0x3e8>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d031      	beq.n	8003738 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80036dc:	2301      	movs	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	e014      	b.n	800370c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036e8:	4825      	ldr	r0, [pc, #148]	@ (8003780 <HAL_ADC_IRQHandler+0x430>)
 80036ea:	f7ff fc4b 	bl	8002f84 <LL_ADC_GetMultiDMATransfer>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036f4:	2301      	movs	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f8:	e008      	b.n	800370c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003708:	2301      	movs	r3, #1
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10e      	bne.n	8003730 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f83e 	bl	80037ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d018      	beq.n	8003774 <HAL_ADC_IRQHandler+0x424>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	f043 0208 	orr.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fc48 	bl	8004004 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	@ 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	50040000 	.word	0x50040000
 8003780:	50040300 	.word	0x50040300

08003784 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0b6      	sub	sp, #216	@ 0xd8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x22>
 80037de:	2302      	movs	r3, #2
 80037e0:	e3c9      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x7b6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fc37 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 83aa 	bne.w	8003f50 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d824      	bhi.n	8003856 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	3b02      	subs	r3, #2
 8003812:	2b03      	cmp	r3, #3
 8003814:	d81b      	bhi.n	800384e <HAL_ADC_ConfigChannel+0x8e>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <HAL_ADC_ConfigChannel+0x5c>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003835 	.word	0x08003835
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003845 	.word	0x08003845
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800382c:	230c      	movs	r3, #12
 800382e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003832:	e010      	b.n	8003856 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003834:	2312      	movs	r3, #18
 8003836:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800383a:	e00c      	b.n	8003856 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800383c:	2318      	movs	r3, #24
 800383e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003842:	e008      	b.n	8003856 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800384e:	2306      	movs	r3, #6
 8003850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003854:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003864:	f7ff faf2 	bl	8002e4c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fbf8 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 8003872:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fc04 	bl	8003088 <LL_ADC_INJ_IsConversionOngoing>
 8003880:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 81a4 	bne.w	8003bd6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800388e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 819f 	bne.w	8003bd6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f7ff fb10 	bl	8002eca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00a      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6919      	ldr	r1, [r3, #16]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038dc:	f7ff fa4e 	bl	8002d7c <LL_ADC_SetOffset>
 80038e0:	e179      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fa6b 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_ADC_ConfigChannel+0x14e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fa60 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	e01e      	b.n	800394c <HAL_ADC_ConfigChannel+0x18c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fa55 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800392c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800393c:	2320      	movs	r3, #32
 800393e:	e004      	b.n	800394a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003944:	fab3 f383 	clz	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x1a4>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	e018      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1d6>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e004      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800398c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003996:	429a      	cmp	r2, r3
 8003998:	d106      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fa24 	bl	8002df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fa08 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x214>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f9fd 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	f003 021f 	and.w	r2, r3, #31
 80039d2:	e01e      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x252>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f9f2 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80039f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80039fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e004      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x26a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0e9b      	lsrs	r3, r3, #26
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	e018      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x29c>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e004      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d106      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f9c1 	bl	8002df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f9a5 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x2da>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2102      	movs	r1, #2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f99a 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003a90:	4603      	mov	r3, r0
 8003a92:	0e9b      	lsrs	r3, r3, #26
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	e01e      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x318>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff f98f 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003abc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e004      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x330>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	e014      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x35a>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e004      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d106      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f962 	bl	8002df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2103      	movs	r1, #3
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff f946 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x398>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2103      	movs	r1, #3
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff f93b 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	f003 021f 	and.w	r2, r3, #31
 8003b56:	e017      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x3c8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f930 	bl	8002dc4 <LL_ADC_GetOffsetChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b72:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e003      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x3e0>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	e011      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x404>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003bae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003bb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e003      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d106      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2103      	movs	r1, #3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f90d 	bl	8002df0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fa2e 	bl	800303c <LL_ADC_IsEnabled>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 8140 	bne.w	8003e68 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f7ff f993 	bl	8002f20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a8f      	ldr	r2, [pc, #572]	@ (8003e3c <HAL_ADC_ConfigChannel+0x67c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 8131 	bne.w	8003e68 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x46e>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0e9b      	lsrs	r3, r3, #26
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2b09      	cmp	r3, #9
 8003c24:	bf94      	ite	ls
 8003c26:	2301      	movls	r3, #1
 8003c28:	2300      	movhi	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e019      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x4a2>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003c46:	2320      	movs	r3, #32
 8003c48:	e003      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d079      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d107      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x4c2>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0e9b      	lsrs	r3, r3, #26
 8003c78:	3301      	adds	r3, #1
 8003c7a:	069b      	lsls	r3, r3, #26
 8003c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c80:	e015      	b.n	8003cae <HAL_ADC_ConfigChannel+0x4ee>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c92:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	069b      	lsls	r3, r3, #26
 8003caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x50e>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	e017      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x53e>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e003      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	ea42 0103 	orr.w	r1, r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x564>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	3301      	adds	r3, #1
 8003d16:	f003 021f 	and.w	r2, r3, #31
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	051b      	lsls	r3, r3, #20
 8003d22:	e018      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x596>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e003      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d56:	430b      	orrs	r3, r1
 8003d58:	e081      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x5b6>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d74:	e015      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x5e2>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003d8e:	2320      	movs	r3, #32
 8003d90:	e003      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	069b      	lsls	r3, r3, #26
 8003d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x602>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	3301      	adds	r3, #1
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2101      	movs	r1, #1
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	e017      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x632>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	61bb      	str	r3, [r7, #24]
  return result;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003dda:	2320      	movs	r3, #32
 8003ddc:	e003      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x65e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f003 021f 	and.w	r2, r3, #31
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	3b1e      	subs	r3, #30
 8003e16:	051b      	lsls	r3, r3, #20
 8003e18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	e01e      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x69c>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
  return result;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e006      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x688>
 8003e3a:	bf00      	nop
 8003e3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 021f 	and.w	r2, r3, #31
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	3b1e      	subs	r3, #30
 8003e56:	051b      	lsls	r3, r3, #20
 8003e58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e62:	4619      	mov	r1, r3
 8003e64:	f7ff f831 	bl	8002eca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b44      	ldr	r3, [pc, #272]	@ (8003f80 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d07a      	beq.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e74:	4843      	ldr	r0, [pc, #268]	@ (8003f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e76:	f7fe ff73 	bl	8002d60 <LL_ADC_GetCommonPathInternalCh>
 8003e7a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a41      	ldr	r2, [pc, #260]	@ (8003f88 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12c      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d126      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3c      	ldr	r2, [pc, #240]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7cc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x6e8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d15d      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4834      	ldr	r0, [pc, #208]	@ (8003f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8003eb4:	f7fe ff41 	bl	8002d3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb8:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <HAL_ADC_ConfigChannel+0x7d4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	4a36      	ldr	r2, [pc, #216]	@ (8003f98 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ed2:	e002      	b.n	8003eda <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f9      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee0:	e040      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d118      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d112      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a23      	ldr	r2, [pc, #140]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7cc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x74c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a22      	ldr	r2, [pc, #136]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d12d      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	4619      	mov	r1, r3
 8003f16:	481b      	ldr	r0, [pc, #108]	@ (8003f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f18:	f7fe ff0f 	bl	8002d3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f1c:	e024      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d120      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11a      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7cc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d115      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f46:	4619      	mov	r1, r3
 8003f48:	480e      	ldr	r0, [pc, #56]	@ (8003f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f4a:	f7fe fef6 	bl	8002d3a <LL_ADC_SetCommonPathInternalCh>
 8003f4e:	e00c      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f62:	e002      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f64:	bf00      	nop
 8003f66:	e000      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	37d8      	adds	r7, #216	@ 0xd8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	80080000 	.word	0x80080000
 8003f84:	50040300 	.word	0x50040300
 8003f88:	c7520000 	.word	0xc7520000
 8003f8c:	50040000 	.word	0x50040000
 8003f90:	50040200 	.word	0x50040200
 8003f94:	20000008 	.word	0x20000008
 8003f98:	053e2d63 	.word	0x053e2d63
 8003f9c:	cb840000 	.word	0xcb840000
 8003fa0:	80000001 	.word	0x80000001

08003fa4 <LL_ADC_IsEnabled>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <LL_ADC_IsEnabled+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_ADC_IsEnabled+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_REG_IsConversionOngoing>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d101      	bne.n	8003fe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b09f      	sub	sp, #124	@ 0x7c
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800406e:	2302      	movs	r3, #2
 8004070:	e093      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800407a:	2300      	movs	r3, #0
 800407c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800407e:	2300      	movs	r3, #0
 8004080:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a47      	ldr	r2, [pc, #284]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d102      	bne.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800408c:	4b46      	ldr	r3, [pc, #280]	@ (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	e001      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e072      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff87 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 80040bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff81 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d154      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d151      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040d4:	4b35      	ldr	r3, [pc, #212]	@ (80041ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80040d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02c      	beq.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040f2:	035b      	lsls	r3, r3, #13
 80040f4:	430b      	orrs	r3, r1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040fc:	4829      	ldr	r0, [pc, #164]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040fe:	f7ff ff51 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004102:	4604      	mov	r4, r0
 8004104:	4828      	ldr	r0, [pc, #160]	@ (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004106:	f7ff ff4d 	bl	8003fa4 <LL_ADC_IsEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	431c      	orrs	r4, r3
 800410e:	4828      	ldr	r0, [pc, #160]	@ (80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004110:	f7ff ff48 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	4323      	orrs	r3, r4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d137      	bne.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800411c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004124:	f023 030f 	bic.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	6892      	ldr	r2, [r2, #8]
 8004130:	430a      	orrs	r2, r1
 8004132:	431a      	orrs	r2, r3
 8004134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004136:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004138:	e028      	b.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800413a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004144:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004146:	4817      	ldr	r0, [pc, #92]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004148:	f7ff ff2c 	bl	8003fa4 <LL_ADC_IsEnabled>
 800414c:	4604      	mov	r4, r0
 800414e:	4816      	ldr	r0, [pc, #88]	@ (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004150:	f7ff ff28 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004154:	4603      	mov	r3, r0
 8004156:	431c      	orrs	r4, r3
 8004158:	4815      	ldr	r0, [pc, #84]	@ (80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800415a:	f7ff ff23 	bl	8003fa4 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	4323      	orrs	r3, r4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d112      	bne.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800416e:	f023 030f 	bic.w	r3, r3, #15
 8004172:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004174:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004176:	e009      	b.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800418a:	e000      	b.n	800418e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800418c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004196:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800419a:	4618      	mov	r0, r3
 800419c:	377c      	adds	r7, #124	@ 0x7c
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	50040000 	.word	0x50040000
 80041a8:	50040100 	.word	0x50040100
 80041ac:	50040300 	.word	0x50040300
 80041b0:	50040200 	.word	0x50040200

080041b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c4:	4b0c      	ldr	r3, [pc, #48]	@ (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e6:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004200:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <__NVIC_GetPriorityGrouping+0x18>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0307 	and.w	r3, r3, #7
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db0b      	blt.n	8004242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4907      	ldr	r1, [pc, #28]	@ (8004250 <__NVIC_EnableIRQ+0x38>)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2001      	movs	r0, #1
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db0a      	blt.n	800427e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	490c      	ldr	r1, [pc, #48]	@ (80042a0 <__NVIC_SetPriority+0x4c>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	440b      	add	r3, r1
 8004278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800427c:	e00a      	b.n	8004294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <__NVIC_SetPriority+0x50>)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3b04      	subs	r3, #4
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	440b      	add	r3, r1
 8004292:	761a      	strb	r2, [r3, #24]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000e100 	.word	0xe000e100
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf28      	it	cs
 80042c6:	2304      	movcs	r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d902      	bls.n	80042d8 <NVIC_EncodePriority+0x30>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3b03      	subs	r3, #3
 80042d6:	e000      	b.n	80042da <NVIC_EncodePriority+0x32>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43d9      	mvns	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	4313      	orrs	r3, r2
         );
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	@ 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff4c 	bl	80041b4 <__NVIC_SetPriorityGrouping>
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004336:	f7ff ff61 	bl	80041fc <__NVIC_GetPriorityGrouping>
 800433a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	6978      	ldr	r0, [r7, #20]
 8004342:	f7ff ffb1 	bl	80042a8 <NVIC_EncodePriority>
 8004346:	4602      	mov	r2, r0
 8004348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff80 	bl	8004254 <__NVIC_SetPriority>
}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff54 	bl	8004218 <__NVIC_EnableIRQ>
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004386:	e17f      	b.n	8004688 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2101      	movs	r1, #1
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8171 	beq.w	8004682 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d005      	beq.n	80043b8 <HAL_GPIO_Init+0x40>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d130      	bne.n	800441a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ee:	2201      	movs	r2, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f003 0201 	and.w	r2, r3, #1
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d118      	bne.n	8004458 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800442c:	2201      	movs	r2, #1
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0201 	and.w	r2, r3, #1
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d017      	beq.n	8004494 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d123      	bne.n	80044e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	08da      	lsrs	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3208      	adds	r2, #8
 80044a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	220f      	movs	r2, #15
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	08da      	lsrs	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3208      	adds	r2, #8
 80044e2:	6939      	ldr	r1, [r7, #16]
 80044e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	2203      	movs	r2, #3
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80ac 	beq.w	8004682 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_GPIO_Init+0x330>)
 800452c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452e:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <HAL_GPIO_Init+0x330>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6613      	str	r3, [r2, #96]	@ 0x60
 8004536:	4b5c      	ldr	r3, [pc, #368]	@ (80046a8 <HAL_GPIO_Init+0x330>)
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004542:	4a5a      	ldr	r2, [pc, #360]	@ (80046ac <HAL_GPIO_Init+0x334>)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800456c:	d025      	beq.n	80045ba <HAL_GPIO_Init+0x242>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a4f      	ldr	r2, [pc, #316]	@ (80046b0 <HAL_GPIO_Init+0x338>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01f      	beq.n	80045b6 <HAL_GPIO_Init+0x23e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a4e      	ldr	r2, [pc, #312]	@ (80046b4 <HAL_GPIO_Init+0x33c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d019      	beq.n	80045b2 <HAL_GPIO_Init+0x23a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a4d      	ldr	r2, [pc, #308]	@ (80046b8 <HAL_GPIO_Init+0x340>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_GPIO_Init+0x236>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a4c      	ldr	r2, [pc, #304]	@ (80046bc <HAL_GPIO_Init+0x344>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00d      	beq.n	80045aa <HAL_GPIO_Init+0x232>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a4b      	ldr	r2, [pc, #300]	@ (80046c0 <HAL_GPIO_Init+0x348>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <HAL_GPIO_Init+0x22e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a4a      	ldr	r2, [pc, #296]	@ (80046c4 <HAL_GPIO_Init+0x34c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_GPIO_Init+0x22a>
 800459e:	2306      	movs	r3, #6
 80045a0:	e00c      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045a2:	2307      	movs	r3, #7
 80045a4:	e00a      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e008      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045aa:	2304      	movs	r3, #4
 80045ac:	e006      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045ae:	2303      	movs	r3, #3
 80045b0:	e004      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_GPIO_Init+0x244>
 80045ba:	2300      	movs	r3, #0
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	f002 0203 	and.w	r2, r2, #3
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	4093      	lsls	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045cc:	4937      	ldr	r1, [pc, #220]	@ (80046ac <HAL_GPIO_Init+0x334>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045da:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045fe:	4a32      	ldr	r2, [pc, #200]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004604:	4b30      	ldr	r3, [pc, #192]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004628:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800462e:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	43db      	mvns	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004652:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800467c:	4a12      	ldr	r2, [pc, #72]	@ (80046c8 <HAL_GPIO_Init+0x350>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f47f ae78 	bne.w	8004388 <HAL_GPIO_Init+0x10>
  }
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40010000 	.word	0x40010000
 80046b0:	48000400 	.word	0x48000400
 80046b4:	48000800 	.word	0x48000800
 80046b8:	48000c00 	.word	0x48000c00
 80046bc:	48001000 	.word	0x48001000
 80046c0:	48001400 	.word	0x48001400
 80046c4:	48001800 	.word	0x48001800
 80046c8:	40010400 	.word	0x40010400

080046cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	887b      	ldrh	r3, [r7, #2]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e001      	b.n	80046ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800470c:	787b      	ldrb	r3, [r7, #1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004718:	e002      	b.n	8004720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004736:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004742:	4a05      	ldr	r2, [pc, #20]	@ (8004758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fe60 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40010400 	.word	0x40010400

0800475c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e08d      	b.n	800488a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fdd0 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	@ 0x24
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	e006      	b.n	80047e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d108      	bne.n	80047fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	e007      	b.n	800480e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800480c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	460b      	mov	r3, r1
 80048a2:	817b      	strh	r3, [r7, #10]
 80048a4:	4613      	mov	r3, r2
 80048a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	f040 80fd 	bne.w	8004ab0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_I2C_Master_Transmit+0x30>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0f6      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048cc:	f7fe fa16 	bl	8002cfc <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2319      	movs	r3, #25
 80048d8:	2201      	movs	r2, #1
 80048da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f914 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0e1      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2221      	movs	r2, #33	@ 0x21
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2210      	movs	r2, #16
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	893a      	ldrh	r2, [r7, #8]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2bff      	cmp	r3, #255	@ 0xff
 800491e:	d906      	bls.n	800492e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	22ff      	movs	r2, #255	@ 0xff
 8004924:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004926:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e007      	b.n	800493e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004938:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800493c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d024      	beq.n	8004990 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	781a      	ldrb	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	b2da      	uxtb	r2, r3
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	4b4e      	ldr	r3, [pc, #312]	@ (8004abc <HAL_I2C_Master_Transmit+0x228>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa83 	bl	8004e94 <I2C_TransferConfig>
 800498e:	e066      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	b2da      	uxtb	r2, r3
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	4b48      	ldr	r3, [pc, #288]	@ (8004abc <HAL_I2C_Master_Transmit+0x228>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fa78 	bl	8004e94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049a4:	e05b      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f907 	bl	8004bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07b      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d034      	beq.n	8004a5e <HAL_I2C_Master_Transmit+0x1ca>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d130      	bne.n	8004a5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2180      	movs	r1, #128	@ 0x80
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f880 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e04d      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2bff      	cmp	r3, #255	@ 0xff
 8004a1e:	d90e      	bls.n	8004a3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	22ff      	movs	r2, #255	@ 0xff
 8004a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa2c 	bl	8004e94 <I2C_TransferConfig>
 8004a3c:	e00f      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	8979      	ldrh	r1, [r7, #10]
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fa1b 	bl	8004e94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d19e      	bne.n	80049a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	6a39      	ldr	r1, [r7, #32]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f8ed 	bl	8004c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e01a      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2220      	movs	r2, #32
 8004a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <HAL_I2C_Master_Transmit+0x22c>)
 8004a90:	400b      	ands	r3, r1
 8004a92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	80002000 	.word	0x80002000
 8004ac0:	fe00e800 	.word	0xfe00e800

08004ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d103      	bne.n	8004ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d007      	beq.n	8004b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	619a      	str	r2, [r3, #24]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1c:	e03b      	b.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8d6 	bl	8004cd4 <I2C_IsErrorOccurred>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e041      	b.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d02d      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fe f8df 	bl	8002cfc <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d122      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d113      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00f      	b.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699a      	ldr	r2, [r3, #24]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d0b4      	beq.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bca:	e033      	b.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f87f 	bl	8004cd4 <I2C_IsErrorOccurred>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e031      	b.n	8004c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d025      	beq.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fe f888 	bl	8002cfc <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11a      	bne.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d013      	beq.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e007      	b.n	8004c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d1c4      	bne.n	8004bcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c58:	e02f      	b.n	8004cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f838 	bl	8004cd4 <I2C_IsErrorOccurred>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e02d      	b.n	8004cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe f845 	bl	8002cfc <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11a      	bne.n	8004cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d013      	beq.n	8004cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e007      	b.n	8004cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d1c8      	bne.n	8004c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	@ 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d068      	beq.n	8004dd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d08:	e049      	b.n	8004d9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d045      	beq.n	8004d9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fd fff3 	bl	8002cfc <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <I2C_IsErrorOccurred+0x54>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d13a      	bne.n	8004d9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4a:	d121      	bne.n	8004d90 <I2C_IsErrorOccurred+0xbc>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d52:	d01d      	beq.n	8004d90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d01a      	beq.n	8004d90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d6a:	f7fd ffc7 	bl	8002cfc <HAL_GetTick>
 8004d6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d70:	e00e      	b.n	8004d90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d72:	f7fd ffc3 	bl	8002cfc <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b19      	cmp	r3, #25
 8004d7e:	d907      	bls.n	8004d90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	f043 0320 	orr.w	r3, r3, #32
 8004d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004d8e:	e006      	b.n	8004d9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d1e9      	bne.n	8004d72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d003      	beq.n	8004db4 <I2C_IsErrorOccurred+0xe0>
 8004dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0aa      	beq.n	8004d0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f043 0308 	orr.w	r3, r3, #8
 8004e0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01c      	beq.n	8004e82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff fe3b 	bl	8004ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <I2C_IsErrorOccurred+0x1bc>)
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	@ 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	fe00e800 	.word	0xfe00e800

08004e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	817b      	strh	r3, [r7, #10]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eac:	7a7b      	ldrb	r3, [r7, #9]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	0d5b      	lsrs	r3, r3, #21
 8004ece:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ed2:	4b08      	ldr	r3, [pc, #32]	@ (8004ef4 <I2C_TransferConfig+0x60>)
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	ea02 0103 	and.w	r1, r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	03ff63ff 	.word	0x03ff63ff

08004ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d138      	bne.n	8004f80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e032      	b.n	8004f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	@ 0x24
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d139      	bne.n	8005018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e033      	b.n	800501a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2224      	movs	r2, #36	@ 0x24
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
  }
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800502c:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <HAL_PWREx_GetVoltageRange+0x18>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40007000 	.word	0x40007000

08005044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005052:	d130      	bne.n	80050b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800505c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005060:	d038      	beq.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005062:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800506a:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005072:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2232      	movs	r2, #50	@ 0x32
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9b      	lsrs	r3, r3, #18
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005088:	e002      	b.n	8005090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b01      	subs	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005090:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509c:	d102      	bne.n	80050a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f2      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050a4:	4b0f      	ldr	r3, [pc, #60]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b0:	d110      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00f      	b.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b6:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c2:	d007      	beq.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050c4:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050cc:	4a05      	ldr	r2, [pc, #20]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40007000 	.word	0x40007000
 80050e8:	20000008 	.word	0x20000008
 80050ec:	431bde83 	.word	0x431bde83

080050f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e3ca      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	4b97      	ldr	r3, [pc, #604]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800510c:	4b94      	ldr	r3, [pc, #592]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80e4 	beq.w	80052ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_RCC_OscConfig+0x4a>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b0c      	cmp	r3, #12
 800512e:	f040 808b 	bne.w	8005248 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b01      	cmp	r3, #1
 8005136:	f040 8087 	bne.w	8005248 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800513a:	4b89      	ldr	r3, [pc, #548]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e3a2      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	4b82      	ldr	r3, [pc, #520]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_RCC_OscConfig+0x7c>
 8005162:	4b7f      	ldr	r3, [pc, #508]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800516a:	e005      	b.n	8005178 <HAL_RCC_OscConfig+0x88>
 800516c:	4b7c      	ldr	r3, [pc, #496]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	4293      	cmp	r3, r2
 800517a:	d223      	bcs.n	80051c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fd87 	bl	8005c94 <RCC_SetFlashLatencyFromMSIRange>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e383      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005190:	4b73      	ldr	r3, [pc, #460]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a72      	ldr	r2, [pc, #456]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005196:	f043 0308 	orr.w	r3, r3, #8
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b70      	ldr	r3, [pc, #448]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	496d      	ldr	r1, [pc, #436]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	4968      	ldr	r1, [pc, #416]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
 80051c2:	e025      	b.n	8005210 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c4:	4b66      	ldr	r3, [pc, #408]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a65      	ldr	r2, [pc, #404]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051ca:	f043 0308 	orr.w	r3, r3, #8
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b63      	ldr	r3, [pc, #396]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4960      	ldr	r1, [pc, #384]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	495b      	ldr	r1, [pc, #364]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fd47 	bl	8005c94 <RCC_SetFlashLatencyFromMSIRange>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e343      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005210:	f000 fc4a 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	4950      	ldr	r1, [pc, #320]	@ (8005364 <HAL_RCC_OscConfig+0x274>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	4a4e      	ldr	r2, [pc, #312]	@ (8005368 <HAL_RCC_OscConfig+0x278>)
 800522e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005230:	4b4e      	ldr	r3, [pc, #312]	@ (800536c <HAL_RCC_OscConfig+0x27c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fc fc4b 	bl	8001ad0 <HAL_InitTick>
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d052      	beq.n	80052ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	e327      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d032      	beq.n	80052b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005250:	4b43      	ldr	r3, [pc, #268]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a42      	ldr	r2, [pc, #264]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800525c:	f7fd fd4e 	bl	8002cfc <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005264:	f7fd fd4a 	bl	8002cfc <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e310      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005276:	4b3a      	ldr	r3, [pc, #232]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005282:	4b37      	ldr	r3, [pc, #220]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a36      	ldr	r2, [pc, #216]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005288:	f043 0308 	orr.w	r3, r3, #8
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b34      	ldr	r3, [pc, #208]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4931      	ldr	r1, [pc, #196]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	492c      	ldr	r1, [pc, #176]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
 80052b4:	e01a      	b.n	80052ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a29      	ldr	r2, [pc, #164]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052c2:	f7fd fd1b 	bl	8002cfc <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052ca:	f7fd fd17 	bl	8002cfc <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e2dd      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052dc:	4b20      	ldr	r3, [pc, #128]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <HAL_RCC_OscConfig+0x1da>
 80052e8:	e000      	b.n	80052ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d074      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d005      	beq.n	800530a <HAL_RCC_OscConfig+0x21a>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d10e      	bne.n	8005322 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d10b      	bne.n	8005322 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530a:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d064      	beq.n	80053e0 <HAL_RCC_OscConfig+0x2f0>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d160      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e2ba      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x24a>
 800532c:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e026      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005342:	d115      	bne.n	8005370 <HAL_RCC_OscConfig+0x280>
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a05      	ldr	r2, [pc, #20]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 800534a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	4b03      	ldr	r3, [pc, #12]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a02      	ldr	r2, [pc, #8]	@ (8005360 <HAL_RCC_OscConfig+0x270>)
 8005356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	e014      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	0800c5ec 	.word	0x0800c5ec
 8005368:	20000008 	.word	0x20000008
 800536c:	20000094 	.word	0x20000094
 8005370:	4ba0      	ldr	r3, [pc, #640]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a9f      	ldr	r2, [pc, #636]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b9d      	ldr	r3, [pc, #628]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a9c      	ldr	r2, [pc, #624]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d013      	beq.n	80053b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fd fcb4 	bl	8002cfc <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7fd fcb0 	bl	8002cfc <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	@ 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e276      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053aa:	4b92      	ldr	r3, [pc, #584]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x2a8>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd fca0 	bl	8002cfc <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fd fc9c 	bl	8002cfc <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	@ 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e262      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d2:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2d0>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d060      	beq.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_OscConfig+0x310>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d119      	bne.n	800542e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d116      	bne.n	800542e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005400:	4b7c      	ldr	r3, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x328>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e23f      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b76      	ldr	r3, [pc, #472]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	4973      	ldr	r1, [pc, #460]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542c:	e040      	b.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d023      	beq.n	800547e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005436:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6e      	ldr	r2, [pc, #440]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800543c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fd fc5b 	bl	8002cfc <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544a:	f7fd fc57 	bl	8002cfc <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e21d      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800545c:	4b65      	ldr	r3, [pc, #404]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b62      	ldr	r3, [pc, #392]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	495f      	ldr	r1, [pc, #380]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	e018      	b.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b5d      	ldr	r3, [pc, #372]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a5c      	ldr	r2, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd fc37 	bl	8002cfc <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005492:	f7fd fc33 	bl	8002cfc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e1f9      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a4:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d03c      	beq.n	8005536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01c      	beq.n	80054fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c4:	4b4b      	ldr	r3, [pc, #300]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80054c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ca:	4a4a      	ldr	r2, [pc, #296]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fd fc12 	bl	8002cfc <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054dc:	f7fd fc0e 	bl	8002cfc <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e1d4      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ee:	4b41      	ldr	r3, [pc, #260]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ef      	beq.n	80054dc <HAL_RCC_OscConfig+0x3ec>
 80054fc:	e01b      	b.n	8005536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fe:	4b3d      	ldr	r3, [pc, #244]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005504:	4a3b      	ldr	r2, [pc, #236]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fd fbf5 	bl	8002cfc <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005516:	f7fd fbf1 	bl	8002cfc <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1b7      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005528:	4b32      	ldr	r3, [pc, #200]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ef      	bne.n	8005516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a6 	beq.w	8005690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005548:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005554:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	4a26      	ldr	r2, [pc, #152]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005560:	4b24      	ldr	r3, [pc, #144]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 8005562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556c:	2301      	movs	r3, #1
 800556e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <HAL_RCC_OscConfig+0x508>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d118      	bne.n	80055ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800557c:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <HAL_RCC_OscConfig+0x508>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1d      	ldr	r2, [pc, #116]	@ (80055f8 <HAL_RCC_OscConfig+0x508>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005588:	f7fd fbb8 	bl	8002cfc <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fd fbb4 	bl	8002cfc <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e17a      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a2:	4b15      	ldr	r3, [pc, #84]	@ (80055f8 <HAL_RCC_OscConfig+0x508>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4d8>
 80055b6:	4b0f      	ldr	r3, [pc, #60]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055bc:	4a0d      	ldr	r2, [pc, #52]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055c6:	e029      	b.n	800561c <HAL_RCC_OscConfig+0x52c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d115      	bne.n	80055fc <HAL_RCC_OscConfig+0x50c>
 80055d0:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a07      	ldr	r2, [pc, #28]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e0:	4b04      	ldr	r3, [pc, #16]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	4a03      	ldr	r2, [pc, #12]	@ (80055f4 <HAL_RCC_OscConfig+0x504>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f0:	e014      	b.n	800561c <HAL_RCC_OscConfig+0x52c>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
 80055fc:	4b9c      	ldr	r3, [pc, #624]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	4a9b      	ldr	r2, [pc, #620]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800560c:	4b98      	ldr	r3, [pc, #608]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005612:	4a97      	ldr	r2, [pc, #604]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d016      	beq.n	8005652 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fd fb6a 	bl	8002cfc <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562a:	e00a      	b.n	8005642 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562c:	f7fd fb66 	bl	8002cfc <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e12a      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005642:	4b8b      	ldr	r3, [pc, #556]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ed      	beq.n	800562c <HAL_RCC_OscConfig+0x53c>
 8005650:	e015      	b.n	800567e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005652:	f7fd fb53 	bl	8002cfc <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005658:	e00a      	b.n	8005670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fd fb4f 	bl	8002cfc <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e113      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005670:	4b7f      	ldr	r3, [pc, #508]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1ed      	bne.n	800565a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567e:	7ffb      	ldrb	r3, [r7, #31]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005684:	4b7a      	ldr	r3, [pc, #488]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005688:	4a79      	ldr	r2, [pc, #484]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800568a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80fe 	beq.w	8005896 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	2b02      	cmp	r3, #2
 80056a0:	f040 80d0 	bne.w	8005844 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056a4:	4b72      	ldr	r3, [pc, #456]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f003 0203 	and.w	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d130      	bne.n	800571a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	3b01      	subs	r3, #1
 80056c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d127      	bne.n	800571a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d11f      	bne.n	800571a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e4:	2a07      	cmp	r2, #7
 80056e6:	bf14      	ite	ne
 80056e8:	2201      	movne	r2, #1
 80056ea:	2200      	moveq	r2, #0
 80056ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d113      	bne.n	800571a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	3b01      	subs	r3, #1
 8005700:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d109      	bne.n	800571a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d06e      	beq.n	80057f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d069      	beq.n	80057f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005720:	4b53      	ldr	r3, [pc, #332]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800572c:	4b50      	ldr	r3, [pc, #320]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0ad      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800573c:	4b4c      	ldr	r3, [pc, #304]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4b      	ldr	r2, [pc, #300]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005746:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005748:	f7fd fad8 	bl	8002cfc <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd fad4 	bl	8002cfc <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e09a      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005762:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800576e:	4b40      	ldr	r3, [pc, #256]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	4b40      	ldr	r3, [pc, #256]	@ (8005874 <HAL_RCC_OscConfig+0x784>)
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800577e:	3a01      	subs	r2, #1
 8005780:	0112      	lsls	r2, r2, #4
 8005782:	4311      	orrs	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005788:	0212      	lsls	r2, r2, #8
 800578a:	4311      	orrs	r1, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005790:	0852      	lsrs	r2, r2, #1
 8005792:	3a01      	subs	r2, #1
 8005794:	0552      	lsls	r2, r2, #21
 8005796:	4311      	orrs	r1, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800579c:	0852      	lsrs	r2, r2, #1
 800579e:	3a01      	subs	r2, #1
 80057a0:	0652      	lsls	r2, r2, #25
 80057a2:	4311      	orrs	r1, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057a8:	0912      	lsrs	r2, r2, #4
 80057aa:	0452      	lsls	r2, r2, #17
 80057ac:	430a      	orrs	r2, r1
 80057ae:	4930      	ldr	r1, [pc, #192]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057cc:	f7fd fa96 	bl	8002cfc <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd fa92 	bl	8002cfc <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e058      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	4b22      	ldr	r3, [pc, #136]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f2:	e050      	b.n	8005896 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e04f      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d148      	bne.n	8005896 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800580a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800580e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005810:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800581a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800581c:	f7fd fa6e 	bl	8002cfc <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fd fa6a 	bl	8002cfc <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e030      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005836:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x734>
 8005842:	e028      	b.n	8005896 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b0c      	cmp	r3, #12
 8005848:	d023      	beq.n	8005892 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584a:	4b09      	ldr	r3, [pc, #36]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a08      	ldr	r2, [pc, #32]	@ (8005870 <HAL_RCC_OscConfig+0x780>)
 8005850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fd fa51 	bl	8002cfc <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	e00c      	b.n	8005878 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585e:	f7fd fa4d 	bl	8002cfc <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d905      	bls.n	8005878 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e013      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
 8005870:	40021000 	.word	0x40021000
 8005874:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <HAL_RCC_OscConfig+0x7b0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ec      	bne.n	800585e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005884:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <HAL_RCC_OscConfig+0x7b0>)
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	4905      	ldr	r1, [pc, #20]	@ (80058a0 <HAL_RCC_OscConfig+0x7b0>)
 800588a:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <HAL_RCC_OscConfig+0x7b4>)
 800588c:	4013      	ands	r3, r2
 800588e:	60cb      	str	r3, [r1, #12]
 8005890:	e001      	b.n	8005896 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000
 80058a4:	feeefffc 	.word	0xfeeefffc

080058a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0e7      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b75      	ldr	r3, [pc, #468]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d910      	bls.n	80058ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b72      	ldr	r3, [pc, #456]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 0207 	bic.w	r2, r3, #7
 80058d2:	4970      	ldr	r1, [pc, #448]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b6e      	ldr	r3, [pc, #440]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0cf      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4b66      	ldr	r3, [pc, #408]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005904:	429a      	cmp	r2, r3
 8005906:	d908      	bls.n	800591a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005908:	4b63      	ldr	r3, [pc, #396]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4960      	ldr	r1, [pc, #384]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d04c      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592e:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d121      	bne.n	800597e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0a6      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005946:	4b54      	ldr	r3, [pc, #336]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e09a      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595e:	4b4e      	ldr	r3, [pc, #312]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e08e      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e086      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800597e:	4b46      	ldr	r3, [pc, #280]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f023 0203 	bic.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4943      	ldr	r1, [pc, #268]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 800598c:	4313      	orrs	r3, r2
 800598e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005990:	f7fd f9b4 	bl	8002cfc <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	e00a      	b.n	80059ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005998:	f7fd f9b0 	bl	8002cfc <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e06e      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 020c 	and.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1eb      	bne.n	8005998 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059d8:	429a      	cmp	r2, r3
 80059da:	d208      	bcs.n	80059ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	492b      	ldr	r1, [pc, #172]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ee:	4b29      	ldr	r3, [pc, #164]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d210      	bcs.n	8005a1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fc:	4b25      	ldr	r3, [pc, #148]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f023 0207 	bic.w	r2, r3, #7
 8005a04:	4923      	ldr	r1, [pc, #140]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0c:	4b21      	ldr	r3, [pc, #132]	@ (8005a94 <HAL_RCC_ClockConfig+0x1ec>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e036      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4918      	ldr	r1, [pc, #96]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a48:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4910      	ldr	r1, [pc, #64]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a5c:	f000 f824 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a60:	4602      	mov	r2, r0
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <HAL_RCC_ClockConfig+0x1f0>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	490b      	ldr	r1, [pc, #44]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f4>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	4a09      	ldr	r2, [pc, #36]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005a7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fc f825 	bl	8001ad0 <HAL_InitTick>
 8005a86:	4603      	mov	r3, r0
 8005a88:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	0800c5ec 	.word	0x0800c5ec
 8005aa0:	20000008 	.word	0x20000008
 8005aa4:	20000094 	.word	0x20000094

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	@ 0x24
 8005aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x34>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d121      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d11e      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005adc:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ae8:	4b31      	ldr	r3, [pc, #196]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005af8:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b04:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b20:	4b25      	ldr	r3, [pc, #148]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e004      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b2c:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d134      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b36:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0xac>
 8005b4c:	e005      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b50:	617b      	str	r3, [r7, #20]
      break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b54:	4b19      	ldr	r3, [pc, #100]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	617b      	str	r3, [r7, #20]
      break;
 8005b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b60:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b6e:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	fb03 f202 	mul.w	r2, r3, r2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	0e5b      	lsrs	r3, r3, #25
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	3301      	adds	r3, #1
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3724      	adds	r7, #36	@ 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	0800c604 	.word	0x0800c604
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	@ (8005bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000008 	.word	0x20000008

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bdc:	f7ff fff0 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4904      	ldr	r1, [pc, #16]	@ (8005c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bee:	5ccb      	ldrb	r3, [r1, r3]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800c5fc 	.word	0x0800c5fc

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c08:	f7ff ffda 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0adb      	lsrs	r3, r3, #11
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	0800c5fc 	.word	0x0800c5fc

08005c30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c40:	4b12      	ldr	r3, [pc, #72]	@ (8005c8c <HAL_RCC_GetClockConfig+0x5c>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0203 	and.w	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c8c <HAL_RCC_GetClockConfig+0x5c>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005c58:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <HAL_RCC_GetClockConfig+0x5c>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005c64:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <HAL_RCC_GetClockConfig+0x5c>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c72:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <HAL_RCC_GetClockConfig+0x60>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0207 	and.w	r2, r3, #7
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40022000 	.word	0x40022000

08005c94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005cac:	f7ff f9bc 	bl	8005028 <HAL_PWREx_GetVoltageRange>
 8005cb0:	6178      	str	r0, [r7, #20]
 8005cb2:	e014      	b.n	8005cde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cb4:	4b25      	ldr	r3, [pc, #148]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb8:	4a24      	ldr	r2, [pc, #144]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cc0:	4b22      	ldr	r3, [pc, #136]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ccc:	f7ff f9ac 	bl	8005028 <HAL_PWREx_GetVoltageRange>
 8005cd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce4:	d10b      	bne.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b80      	cmp	r3, #128	@ 0x80
 8005cea:	d919      	bls.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cf0:	d902      	bls.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e013      	b.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e010      	b.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b80      	cmp	r3, #128	@ 0x80
 8005d02:	d902      	bls.n	8005d0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d04:	2303      	movs	r3, #3
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e00a      	b.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b80      	cmp	r3, #128	@ 0x80
 8005d0e:	d102      	bne.n	8005d16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d10:	2302      	movs	r3, #2
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	e004      	b.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d101      	bne.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f023 0207 	bic.w	r2, r3, #7
 8005d28:	4909      	ldr	r1, [pc, #36]	@ (8005d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d001      	beq.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40022000 	.word	0x40022000

08005d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d60:	2300      	movs	r3, #0
 8005d62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d041      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d78:	d02a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d7e:	d824      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d84:	d008      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d8a:	d81e      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d94:	d010      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d96:	e018      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d98:	4b86      	ldr	r3, [pc, #536]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4a85      	ldr	r2, [pc, #532]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005da4:	e015      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fabb 	bl	8006328 <RCCEx_PLLSAI1_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005db6:	e00c      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3320      	adds	r3, #32
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fba6 	bl	8006510 <RCCEx_PLLSAI2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dd8:	4b76      	ldr	r3, [pc, #472]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de6:	4973      	ldr	r1, [pc, #460]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dee:	e001      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d041      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e08:	d02a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e0e:	d824      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e14:	d008      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e1a:	d81e      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e24:	d010      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e26:	e018      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e28:	4b62      	ldr	r3, [pc, #392]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a61      	ldr	r2, [pc, #388]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e34:	e015      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa73 	bl	8006328 <RCCEx_PLLSAI1_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e46:	e00c      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3320      	adds	r3, #32
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb5e 	bl	8006510 <RCCEx_PLLSAI2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	74fb      	strb	r3, [r7, #19]
      break;
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e62:	7cfb      	ldrb	r3, [r7, #19]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e68:	4b52      	ldr	r3, [pc, #328]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e76:	494f      	ldr	r1, [pc, #316]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e7e:	e001      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80a0 	beq.w	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e92:	2300      	movs	r3, #0
 8005e94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e96:	4b47      	ldr	r3, [pc, #284]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eac:	4b41      	ldr	r3, [pc, #260]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb0:	4a40      	ldr	r2, [pc, #256]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ed4:	f7fc ff12 	bl	8002cfc <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eda:	e009      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005edc:	f7fc ff0e 	bl	8002cfc <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d902      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	74fb      	strb	r3, [r7, #19]
        break;
 8005eee:	e005      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ef0:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0ef      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005efc:	7cfb      	ldrb	r3, [r7, #19]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d15c      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f02:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01f      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d019      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f20:	4b24      	ldr	r3, [pc, #144]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f2c:	4b21      	ldr	r3, [pc, #132]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f32:	4a20      	ldr	r2, [pc, #128]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f4c:	4a19      	ldr	r2, [pc, #100]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fc fecd 	bl	8002cfc <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f64:	e00b      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fc fec9 	bl	8002cfc <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d902      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ec      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10c      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f92:	4b08      	ldr	r3, [pc, #32]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa2:	4904      	ldr	r1, [pc, #16]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005faa:	e009      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	74bb      	strb	r3, [r7, #18]
 8005fb0:	e006      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	7cfb      	ldrb	r3, [r7, #19]
 8005fbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fc0:	7c7b      	ldrb	r3, [r7, #17]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fca:	4a9d      	ldr	r2, [pc, #628]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fde:	4b98      	ldr	r3, [pc, #608]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe4:	f023 0203 	bic.w	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	4994      	ldr	r1, [pc, #592]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006000:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f023 020c 	bic.w	r2, r3, #12
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600e:	498c      	ldr	r1, [pc, #560]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006022:	4b87      	ldr	r3, [pc, #540]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006028:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	4983      	ldr	r1, [pc, #524]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006044:	4b7e      	ldr	r3, [pc, #504]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006052:	497b      	ldr	r1, [pc, #492]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006066:	4b76      	ldr	r3, [pc, #472]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006074:	4972      	ldr	r1, [pc, #456]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006088:	4b6d      	ldr	r3, [pc, #436]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006096:	496a      	ldr	r1, [pc, #424]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060aa:	4b65      	ldr	r3, [pc, #404]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	4961      	ldr	r1, [pc, #388]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060da:	4959      	ldr	r1, [pc, #356]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060ee:	4b54      	ldr	r3, [pc, #336]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fc:	4950      	ldr	r1, [pc, #320]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006110:	4b4b      	ldr	r3, [pc, #300]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	4948      	ldr	r1, [pc, #288]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006132:	4b43      	ldr	r3, [pc, #268]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006140:	493f      	ldr	r1, [pc, #252]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d028      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006154:	4b3a      	ldr	r3, [pc, #232]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006162:	4937      	ldr	r1, [pc, #220]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800616e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006172:	d106      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006174:	4b32      	ldr	r3, [pc, #200]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a31      	ldr	r2, [pc, #196]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617e:	60d3      	str	r3, [r2, #12]
 8006180:	e011      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800618a:	d10c      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f8c8 	bl	8006328 <RCCEx_PLLSAI1_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800619c:	7cfb      	ldrb	r3, [r7, #19]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d028      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061b2:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c0:	491f      	ldr	r1, [pc, #124]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061d0:	d106      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061dc:	60d3      	str	r3, [r2, #12]
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061e8:	d10c      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3304      	adds	r3, #4
 80061ee:	2101      	movs	r1, #1
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f899 	bl	8006328 <RCCEx_PLLSAI1_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061fa:	7cfb      	ldrb	r3, [r7, #19]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d02b      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006216:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	4908      	ldr	r1, [pc, #32]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800622e:	d109      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006230:	4b03      	ldr	r3, [pc, #12]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a02      	ldr	r2, [pc, #8]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800623a:	60d3      	str	r3, [r2, #12]
 800623c:	e014      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800624c:	d10c      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f867 	bl	8006328 <RCCEx_PLLSAI1_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800625e:	7cfb      	ldrb	r3, [r7, #19]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006264:	7cfb      	ldrb	r3, [r7, #19]
 8006266:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d02f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006282:	4928      	ldr	r1, [pc, #160]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800628e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006292:	d10d      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	2102      	movs	r1, #2
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f844 	bl	8006328 <RCCEx_PLLSAI1_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d014      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	74bb      	strb	r3, [r7, #18]
 80062ae:	e011      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3320      	adds	r3, #32
 80062be:	2102      	movs	r1, #2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f925 	bl	8006510 <RCCEx_PLLSAI2_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062d0:	7cfb      	ldrb	r3, [r7, #19]
 80062d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062e0:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ee:	490d      	ldr	r1, [pc, #52]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006302:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006308:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006312:	4904      	ldr	r1, [pc, #16]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800631a:	7cbb      	ldrb	r3, [r7, #18]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40021000 	.word	0x40021000

08006328 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006336:	4b75      	ldr	r3, [pc, #468]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d018      	beq.n	8006374 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006342:	4b72      	ldr	r3, [pc, #456]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0203 	and.w	r2, r3, #3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d10d      	bne.n	800636e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
       ||
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800635a:	4b6c      	ldr	r3, [pc, #432]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
       ||
 800636a:	429a      	cmp	r2, r3
 800636c:	d047      	beq.n	80063fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e044      	b.n	80063fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d018      	beq.n	80063ae <RCCEx_PLLSAI1_Config+0x86>
 800637c:	2b03      	cmp	r3, #3
 800637e:	d825      	bhi.n	80063cc <RCCEx_PLLSAI1_Config+0xa4>
 8006380:	2b01      	cmp	r3, #1
 8006382:	d002      	beq.n	800638a <RCCEx_PLLSAI1_Config+0x62>
 8006384:	2b02      	cmp	r3, #2
 8006386:	d009      	beq.n	800639c <RCCEx_PLLSAI1_Config+0x74>
 8006388:	e020      	b.n	80063cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800638a:	4b60      	ldr	r3, [pc, #384]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11d      	bne.n	80063d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800639a:	e01a      	b.n	80063d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800639c:	4b5b      	ldr	r3, [pc, #364]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ac:	e013      	b.n	80063d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063ae:	4b57      	ldr	r3, [pc, #348]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063ba:	4b54      	ldr	r3, [pc, #336]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ca:	e006      	b.n	80063da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      break;
 80063d0:	e004      	b.n	80063dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063d2:	bf00      	nop
 80063d4:	e002      	b.n	80063dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063da:	bf00      	nop
    }

    if(status == HAL_OK)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063e2:	4b4a      	ldr	r3, [pc, #296]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	430b      	orrs	r3, r1
 80063f8:	4944      	ldr	r1, [pc, #272]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d17d      	bne.n	8006500 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006404:	4b41      	ldr	r3, [pc, #260]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a40      	ldr	r2, [pc, #256]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800640a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800640e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006410:	f7fc fc74 	bl	8002cfc <HAL_GetTick>
 8006414:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006416:	e009      	b.n	800642c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006418:	f7fc fc70 	bl	8002cfc <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d902      	bls.n	800642c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	73fb      	strb	r3, [r7, #15]
        break;
 800642a:	e005      	b.n	8006438 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800642c:	4b37      	ldr	r3, [pc, #220]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ef      	bne.n	8006418 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d160      	bne.n	8006500 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d111      	bne.n	8006468 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006444:	4b31      	ldr	r3, [pc, #196]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800644c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6892      	ldr	r2, [r2, #8]
 8006454:	0211      	lsls	r1, r2, #8
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68d2      	ldr	r2, [r2, #12]
 800645a:	0912      	lsrs	r2, r2, #4
 800645c:	0452      	lsls	r2, r2, #17
 800645e:	430a      	orrs	r2, r1
 8006460:	492a      	ldr	r1, [pc, #168]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]
 8006466:	e027      	b.n	80064b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d112      	bne.n	8006494 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800646e:	4b27      	ldr	r3, [pc, #156]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006476:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6892      	ldr	r2, [r2, #8]
 800647e:	0211      	lsls	r1, r2, #8
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6912      	ldr	r2, [r2, #16]
 8006484:	0852      	lsrs	r2, r2, #1
 8006486:	3a01      	subs	r2, #1
 8006488:	0552      	lsls	r2, r2, #21
 800648a:	430a      	orrs	r2, r1
 800648c:	491f      	ldr	r1, [pc, #124]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	610b      	str	r3, [r1, #16]
 8006492:	e011      	b.n	80064b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800649c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6892      	ldr	r2, [r2, #8]
 80064a4:	0211      	lsls	r1, r2, #8
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6952      	ldr	r2, [r2, #20]
 80064aa:	0852      	lsrs	r2, r2, #1
 80064ac:	3a01      	subs	r2, #1
 80064ae:	0652      	lsls	r2, r2, #25
 80064b0:	430a      	orrs	r2, r1
 80064b2:	4916      	ldr	r1, [pc, #88]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064b8:	4b14      	ldr	r3, [pc, #80]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a13      	ldr	r2, [pc, #76]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c4:	f7fc fc1a 	bl	8002cfc <HAL_GetTick>
 80064c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064ca:	e009      	b.n	80064e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064cc:	f7fc fc16 	bl	8002cfc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d902      	bls.n	80064e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	73fb      	strb	r3, [r7, #15]
          break;
 80064de:	e005      	b.n	80064ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ef      	beq.n	80064cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064f2:	4b06      	ldr	r3, [pc, #24]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	4904      	ldr	r1, [pc, #16]	@ (800650c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000

08006510 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800651e:	4b6a      	ldr	r3, [pc, #424]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800652a:	4b67      	ldr	r3, [pc, #412]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0203 	and.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d10d      	bne.n	8006556 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
       ||
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006542:	4b61      	ldr	r3, [pc, #388]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
       ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d047      	beq.n	80065e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e044      	b.n	80065e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d018      	beq.n	8006596 <RCCEx_PLLSAI2_Config+0x86>
 8006564:	2b03      	cmp	r3, #3
 8006566:	d825      	bhi.n	80065b4 <RCCEx_PLLSAI2_Config+0xa4>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d002      	beq.n	8006572 <RCCEx_PLLSAI2_Config+0x62>
 800656c:	2b02      	cmp	r3, #2
 800656e:	d009      	beq.n	8006584 <RCCEx_PLLSAI2_Config+0x74>
 8006570:	e020      	b.n	80065b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006572:	4b55      	ldr	r3, [pc, #340]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11d      	bne.n	80065ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006582:	e01a      	b.n	80065ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006584:	4b50      	ldr	r3, [pc, #320]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d116      	bne.n	80065be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006594:	e013      	b.n	80065be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006596:	4b4c      	ldr	r3, [pc, #304]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065a2:	4b49      	ldr	r3, [pc, #292]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065b2:	e006      	b.n	80065c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e004      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ca:	4b3f      	ldr	r3, [pc, #252]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	3b01      	subs	r3, #1
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	430b      	orrs	r3, r1
 80065e0:	4939      	ldr	r1, [pc, #228]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d167      	bne.n	80066bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065ec:	4b36      	ldr	r3, [pc, #216]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a35      	ldr	r2, [pc, #212]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f8:	f7fc fb80 	bl	8002cfc <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065fe:	e009      	b.n	8006614 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006600:	f7fc fb7c 	bl	8002cfc <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d902      	bls.n	8006614 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
        break;
 8006612:	e005      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006614:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ef      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d14a      	bne.n	80066bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d111      	bne.n	8006650 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800662c:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6892      	ldr	r2, [r2, #8]
 800663c:	0211      	lsls	r1, r2, #8
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68d2      	ldr	r2, [r2, #12]
 8006642:	0912      	lsrs	r2, r2, #4
 8006644:	0452      	lsls	r2, r2, #17
 8006646:	430a      	orrs	r2, r1
 8006648:	491f      	ldr	r1, [pc, #124]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	614b      	str	r3, [r1, #20]
 800664e:	e011      	b.n	8006674 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006650:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6912      	ldr	r2, [r2, #16]
 8006666:	0852      	lsrs	r2, r2, #1
 8006668:	3a01      	subs	r2, #1
 800666a:	0652      	lsls	r2, r2, #25
 800666c:	430a      	orrs	r2, r1
 800666e:	4916      	ldr	r1, [pc, #88]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006674:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800667e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fc fb3c 	bl	8002cfc <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006686:	e009      	b.n	800669c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006688:	f7fc fb38 	bl	8002cfc <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d902      	bls.n	800669c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	73fb      	strb	r3, [r7, #15]
          break;
 800669a:	e005      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ef      	beq.n	8006688 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4904      	ldr	r1, [pc, #16]	@ (80066c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000

080066cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e095      	b.n	800680a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d108      	bne.n	80066f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ee:	d009      	beq.n	8006704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	61da      	str	r2, [r3, #28]
 80066f6:	e005      	b.n	8006704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fa ff74 	bl	800160c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006744:	d902      	bls.n	800674c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e002      	b.n	8006752 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800674c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800675a:	d007      	beq.n	800676c <HAL_SPI_Init+0xa0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006764:	d002      	beq.n	800676c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	ea42 0103 	orr.w	r1, r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	f003 0204 	and.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067e8:	ea42 0103 	orr.w	r1, r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e049      	b.n	80068b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fb fc53 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 fd47 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e04f      	b.n	8006978 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a23      	ldr	r2, [pc, #140]	@ (8006984 <HAL_TIM_Base_Start_IT+0xc4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01d      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006902:	d018      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	@ (8006988 <HAL_TIM_Base_Start_IT+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <HAL_TIM_Base_Start_IT+0xcc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00e      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <HAL_TIM_Base_Start_IT+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <HAL_TIM_Base_Start_IT+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <HAL_TIM_Base_Start_IT+0xd8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d115      	bne.n	8006962 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	4b17      	ldr	r3, [pc, #92]	@ (800699c <HAL_TIM_Base_Start_IT+0xdc>)
 800693e:	4013      	ands	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d015      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694e:	d011      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	e008      	b.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e000      	b.n	8006976 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	00010007 	.word	0x00010007

080069a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e049      	b.n	8006a46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f841 	bl	8006a4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f000 fc80 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e097      	b.n	8006ba6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb faea 	bl	8002064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 fc14 	bl	80072e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	4313      	orrs	r3, r2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b02:	f023 030c 	bic.w	r3, r3, #12
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	011a      	lsls	r2, r3, #4
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	031b      	lsls	r3, r3, #12
 8006b32:	4313      	orrs	r3, r2
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b40:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b48:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4313      	orrs	r3, r2
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bbe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bce:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d102      	bne.n	8006bea <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be4:	7b7b      	ldrb	r3, [r7, #13]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e069      	b.n	8006cc2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bfe:	e031      	b.n	8006c64 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d110      	bne.n	8006c28 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d102      	bne.n	8006c12 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c0c:	7b3b      	ldrb	r3, [r7, #12]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d001      	beq.n	8006c16 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e055      	b.n	8006cc2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c26:	e01d      	b.n	8006c64 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d108      	bne.n	8006c40 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d105      	bne.n	8006c40 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c34:	7b7b      	ldrb	r3, [r7, #13]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d102      	bne.n	8006c40 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c3a:	7b3b      	ldrb	r3, [r7, #12]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d001      	beq.n	8006c44 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e03e      	b.n	8006cc2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_TIM_Encoder_Start+0xc4>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d008      	beq.n	8006c82 <HAL_TIM_Encoder_Start+0xd4>
 8006c70:	e00f      	b.n	8006c92 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 ff48 	bl	8007b10 <TIM_CCxChannelCmd>
      break;
 8006c80:	e016      	b.n	8006cb0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2201      	movs	r2, #1
 8006c88:	2104      	movs	r1, #4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff40 	bl	8007b10 <TIM_CCxChannelCmd>
      break;
 8006c90:	e00e      	b.n	8006cb0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ff38 	bl	8007b10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 ff31 	bl	8007b10 <TIM_CCxChannelCmd>
      break;
 8006cae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01b      	beq.n	8006d2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0202 	mvn.w	r2, #2
 8006cfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fac6 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 8006d1a:	e005      	b.n	8006d28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fab8 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fac9 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0204 	mvn.w	r2, #4
 8006d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 faa0 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 8006d66:	e005      	b.n	8006d74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa92 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 faa3 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d020      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01b      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f06f 0208 	mvn.w	r2, #8
 8006d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fa7a 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 8006db2:	e005      	b.n	8006dc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa6c 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa7d 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d020      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01b      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f06f 0210 	mvn.w	r2, #16
 8006de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2208      	movs	r2, #8
 8006de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa54 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 8006dfe:	e005      	b.n	8006e0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa46 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa57 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f06f 0201 	mvn.w	r2, #1
 8006e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7fa fb95 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 ff0e 	bl	8007c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 ff06 	bl	8007c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d007      	beq.n	8006eac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa11 	bl	80072ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0220 	mvn.w	r2, #32
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fece 	bl	8007c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e0ff      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b14      	cmp	r3, #20
 8006f02:	f200 80f0 	bhi.w	80070e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	080070e7 	.word	0x080070e7
 8006f14:	080070e7 	.word	0x080070e7
 8006f18:	080070e7 	.word	0x080070e7
 8006f1c:	08006fa1 	.word	0x08006fa1
 8006f20:	080070e7 	.word	0x080070e7
 8006f24:	080070e7 	.word	0x080070e7
 8006f28:	080070e7 	.word	0x080070e7
 8006f2c:	08006fe3 	.word	0x08006fe3
 8006f30:	080070e7 	.word	0x080070e7
 8006f34:	080070e7 	.word	0x080070e7
 8006f38:	080070e7 	.word	0x080070e7
 8006f3c:	08007023 	.word	0x08007023
 8006f40:	080070e7 	.word	0x080070e7
 8006f44:	080070e7 	.word	0x080070e7
 8006f48:	080070e7 	.word	0x080070e7
 8006f4c:	08007065 	.word	0x08007065
 8006f50:	080070e7 	.word	0x080070e7
 8006f54:	080070e7 	.word	0x080070e7
 8006f58:	080070e7 	.word	0x080070e7
 8006f5c:	080070a5 	.word	0x080070a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fa62 	bl	8007430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0208 	orr.w	r2, r2, #8
 8006f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0204 	bic.w	r2, r2, #4
 8006f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6999      	ldr	r1, [r3, #24]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	619a      	str	r2, [r3, #24]
      break;
 8006f9e:	e0a5      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fad2 	bl	8007550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6999      	ldr	r1, [r3, #24]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	021a      	lsls	r2, r3, #8
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	619a      	str	r2, [r3, #24]
      break;
 8006fe0:	e084      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb3b 	bl	8007664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0208 	orr.w	r2, r2, #8
 8006ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0204 	bic.w	r2, r2, #4
 800700c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69d9      	ldr	r1, [r3, #28]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691a      	ldr	r2, [r3, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	61da      	str	r2, [r3, #28]
      break;
 8007020:	e064      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fba3 	bl	8007774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800703c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800704c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69d9      	ldr	r1, [r3, #28]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	021a      	lsls	r2, r3, #8
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	61da      	str	r2, [r3, #28]
      break;
 8007062:	e043      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fbec 	bl	8007848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0208 	orr.w	r2, r2, #8
 800707e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0204 	bic.w	r2, r2, #4
 800708e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80070a2:	e023      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fc30 	bl	8007910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	021a      	lsls	r2, r3, #8
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80070e4:	e002      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop

08007100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_TIM_ConfigClockSource+0x1c>
 8007118:	2302      	movs	r3, #2
 800711a:	e0b6      	b.n	800728a <HAL_TIM_ConfigClockSource+0x18a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800713a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800713e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007158:	d03e      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0xd8>
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800715e:	f200 8087 	bhi.w	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007166:	f000 8086 	beq.w	8007276 <HAL_TIM_ConfigClockSource+0x176>
 800716a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716e:	d87f      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007170:	2b70      	cmp	r3, #112	@ 0x70
 8007172:	d01a      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0xaa>
 8007174:	2b70      	cmp	r3, #112	@ 0x70
 8007176:	d87b      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007178:	2b60      	cmp	r3, #96	@ 0x60
 800717a:	d050      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x11e>
 800717c:	2b60      	cmp	r3, #96	@ 0x60
 800717e:	d877      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007180:	2b50      	cmp	r3, #80	@ 0x50
 8007182:	d03c      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0xfe>
 8007184:	2b50      	cmp	r3, #80	@ 0x50
 8007186:	d873      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007188:	2b40      	cmp	r3, #64	@ 0x40
 800718a:	d058      	beq.n	800723e <HAL_TIM_ConfigClockSource+0x13e>
 800718c:	2b40      	cmp	r3, #64	@ 0x40
 800718e:	d86f      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007190:	2b30      	cmp	r3, #48	@ 0x30
 8007192:	d064      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x15e>
 8007194:	2b30      	cmp	r3, #48	@ 0x30
 8007196:	d86b      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d060      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x15e>
 800719c:	2b20      	cmp	r3, #32
 800719e:	d867      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d05c      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x15e>
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d05a      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x15e>
 80071a8:	e062      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071ba:	f000 fc89 	bl	8007ad0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	609a      	str	r2, [r3, #8]
      break;
 80071d6:	e04f      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e8:	f000 fc72 	bl	8007ad0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071fa:	609a      	str	r2, [r3, #8]
      break;
 80071fc:	e03c      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	461a      	mov	r2, r3
 800720c:	f000 fbe6 	bl	80079dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2150      	movs	r1, #80	@ 0x50
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fc3f 	bl	8007a9a <TIM_ITRx_SetConfig>
      break;
 800721c:	e02c      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800722a:	461a      	mov	r2, r3
 800722c:	f000 fc05 	bl	8007a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2160      	movs	r1, #96	@ 0x60
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fc2f 	bl	8007a9a <TIM_ITRx_SetConfig>
      break;
 800723c:	e01c      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	461a      	mov	r2, r3
 800724c:	f000 fbc6 	bl	80079dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2140      	movs	r1, #64	@ 0x40
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fc1f 	bl	8007a9a <TIM_ITRx_SetConfig>
      break;
 800725c:	e00c      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f000 fc16 	bl	8007a9a <TIM_ITRx_SetConfig>
      break;
 800726e:	e003      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
      break;
 8007274:	e000      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a46      	ldr	r2, [pc, #280]	@ (8007410 <TIM_Base_SetConfig+0x12c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007302:	d00f      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a43      	ldr	r2, [pc, #268]	@ (8007414 <TIM_Base_SetConfig+0x130>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00b      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a42      	ldr	r2, [pc, #264]	@ (8007418 <TIM_Base_SetConfig+0x134>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a41      	ldr	r2, [pc, #260]	@ (800741c <TIM_Base_SetConfig+0x138>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a40      	ldr	r2, [pc, #256]	@ (8007420 <TIM_Base_SetConfig+0x13c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d108      	bne.n	8007336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a35      	ldr	r2, [pc, #212]	@ (8007410 <TIM_Base_SetConfig+0x12c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01f      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007344:	d01b      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a32      	ldr	r2, [pc, #200]	@ (8007414 <TIM_Base_SetConfig+0x130>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d017      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a31      	ldr	r2, [pc, #196]	@ (8007418 <TIM_Base_SetConfig+0x134>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a30      	ldr	r2, [pc, #192]	@ (800741c <TIM_Base_SetConfig+0x138>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00f      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2f      	ldr	r2, [pc, #188]	@ (8007420 <TIM_Base_SetConfig+0x13c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00b      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2e      	ldr	r2, [pc, #184]	@ (8007424 <TIM_Base_SetConfig+0x140>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2d      	ldr	r2, [pc, #180]	@ (8007428 <TIM_Base_SetConfig+0x144>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2c      	ldr	r2, [pc, #176]	@ (800742c <TIM_Base_SetConfig+0x148>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <TIM_Base_SetConfig+0x12c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00f      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a18      	ldr	r2, [pc, #96]	@ (8007420 <TIM_Base_SetConfig+0x13c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00b      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a17      	ldr	r2, [pc, #92]	@ (8007424 <TIM_Base_SetConfig+0x140>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d007      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <TIM_Base_SetConfig+0x144>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a15      	ldr	r2, [pc, #84]	@ (800742c <TIM_Base_SetConfig+0x148>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d103      	bne.n	80073e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]
  }
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40000c00 	.word	0x40000c00
 8007420:	40013400 	.word	0x40013400
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800

08007430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f023 0201 	bic.w	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0302 	bic.w	r3, r3, #2
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a2c      	ldr	r2, [pc, #176]	@ (800753c <TIM_OC1_SetConfig+0x10c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00f      	beq.n	80074b0 <TIM_OC1_SetConfig+0x80>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a2b      	ldr	r2, [pc, #172]	@ (8007540 <TIM_OC1_SetConfig+0x110>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00b      	beq.n	80074b0 <TIM_OC1_SetConfig+0x80>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a2a      	ldr	r2, [pc, #168]	@ (8007544 <TIM_OC1_SetConfig+0x114>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <TIM_OC1_SetConfig+0x80>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a29      	ldr	r2, [pc, #164]	@ (8007548 <TIM_OC1_SetConfig+0x118>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_OC1_SetConfig+0x80>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a28      	ldr	r2, [pc, #160]	@ (800754c <TIM_OC1_SetConfig+0x11c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10c      	bne.n	80074ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f023 0308 	bic.w	r3, r3, #8
 80074b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 0304 	bic.w	r3, r3, #4
 80074c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a1b      	ldr	r2, [pc, #108]	@ (800753c <TIM_OC1_SetConfig+0x10c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_OC1_SetConfig+0xc2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007540 <TIM_OC1_SetConfig+0x110>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_OC1_SetConfig+0xc2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a19      	ldr	r2, [pc, #100]	@ (8007544 <TIM_OC1_SetConfig+0x114>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_OC1_SetConfig+0xc2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a18      	ldr	r2, [pc, #96]	@ (8007548 <TIM_OC1_SetConfig+0x118>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_OC1_SetConfig+0xc2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a17      	ldr	r2, [pc, #92]	@ (800754c <TIM_OC1_SetConfig+0x11c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d111      	bne.n	8007516 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400
 800754c:	40014800 	.word	0x40014800

08007550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f023 0210 	bic.w	r2, r3, #16
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0320 	bic.w	r3, r3, #32
 800759e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a28      	ldr	r2, [pc, #160]	@ (8007650 <TIM_OC2_SetConfig+0x100>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC2_SetConfig+0x6c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a27      	ldr	r2, [pc, #156]	@ (8007654 <TIM_OC2_SetConfig+0x104>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d10d      	bne.n	80075d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1d      	ldr	r2, [pc, #116]	@ (8007650 <TIM_OC2_SetConfig+0x100>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00f      	beq.n	8007600 <TIM_OC2_SetConfig+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007654 <TIM_OC2_SetConfig+0x104>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00b      	beq.n	8007600 <TIM_OC2_SetConfig+0xb0>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007658 <TIM_OC2_SetConfig+0x108>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d007      	beq.n	8007600 <TIM_OC2_SetConfig+0xb0>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1a      	ldr	r2, [pc, #104]	@ (800765c <TIM_OC2_SetConfig+0x10c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC2_SetConfig+0xb0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a19      	ldr	r2, [pc, #100]	@ (8007660 <TIM_OC2_SetConfig+0x110>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d113      	bne.n	8007628 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40012c00 	.word	0x40012c00
 8007654:	40013400 	.word	0x40013400
 8007658:	40014000 	.word	0x40014000
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800

08007664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0303 	bic.w	r3, r3, #3
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a27      	ldr	r2, [pc, #156]	@ (8007760 <TIM_OC3_SetConfig+0xfc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_OC3_SetConfig+0x6a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a26      	ldr	r2, [pc, #152]	@ (8007764 <TIM_OC3_SetConfig+0x100>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10d      	bne.n	80076ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007760 <TIM_OC3_SetConfig+0xfc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00f      	beq.n	8007712 <TIM_OC3_SetConfig+0xae>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <TIM_OC3_SetConfig+0x100>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00b      	beq.n	8007712 <TIM_OC3_SetConfig+0xae>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007768 <TIM_OC3_SetConfig+0x104>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d007      	beq.n	8007712 <TIM_OC3_SetConfig+0xae>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a19      	ldr	r2, [pc, #100]	@ (800776c <TIM_OC3_SetConfig+0x108>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_OC3_SetConfig+0xae>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <TIM_OC3_SetConfig+0x10c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d113      	bne.n	800773a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	621a      	str	r2, [r3, #32]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40013400 	.word	0x40013400
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800

08007774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	031b      	lsls	r3, r3, #12
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a18      	ldr	r2, [pc, #96]	@ (8007834 <TIM_OC4_SetConfig+0xc0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00f      	beq.n	80077f8 <TIM_OC4_SetConfig+0x84>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a17      	ldr	r2, [pc, #92]	@ (8007838 <TIM_OC4_SetConfig+0xc4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00b      	beq.n	80077f8 <TIM_OC4_SetConfig+0x84>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a16      	ldr	r2, [pc, #88]	@ (800783c <TIM_OC4_SetConfig+0xc8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_OC4_SetConfig+0x84>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a15      	ldr	r2, [pc, #84]	@ (8007840 <TIM_OC4_SetConfig+0xcc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC4_SetConfig+0x84>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a14      	ldr	r2, [pc, #80]	@ (8007844 <TIM_OC4_SetConfig+0xd0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d109      	bne.n	800780c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	019b      	lsls	r3, r3, #6
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	bf00      	nop
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40012c00 	.word	0x40012c00
 8007838:	40013400 	.word	0x40013400
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800

08007848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800788c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a17      	ldr	r2, [pc, #92]	@ (80078fc <TIM_OC5_SetConfig+0xb4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00f      	beq.n	80078c2 <TIM_OC5_SetConfig+0x7a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a16      	ldr	r2, [pc, #88]	@ (8007900 <TIM_OC5_SetConfig+0xb8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00b      	beq.n	80078c2 <TIM_OC5_SetConfig+0x7a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a15      	ldr	r2, [pc, #84]	@ (8007904 <TIM_OC5_SetConfig+0xbc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <TIM_OC5_SetConfig+0x7a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <TIM_OC5_SetConfig+0xc0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d003      	beq.n	80078c2 <TIM_OC5_SetConfig+0x7a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a13      	ldr	r2, [pc, #76]	@ (800790c <TIM_OC5_SetConfig+0xc4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d109      	bne.n	80078d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	621a      	str	r2, [r3, #32]
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800

08007910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a18      	ldr	r2, [pc, #96]	@ (80079c8 <TIM_OC6_SetConfig+0xb8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00f      	beq.n	800798c <TIM_OC6_SetConfig+0x7c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a17      	ldr	r2, [pc, #92]	@ (80079cc <TIM_OC6_SetConfig+0xbc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_OC6_SetConfig+0x7c>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a16      	ldr	r2, [pc, #88]	@ (80079d0 <TIM_OC6_SetConfig+0xc0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_OC6_SetConfig+0x7c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <TIM_OC6_SetConfig+0xc4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_OC6_SetConfig+0x7c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a14      	ldr	r2, [pc, #80]	@ (80079d8 <TIM_OC6_SetConfig+0xc8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d109      	bne.n	80079a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40013400 	.word	0x40013400
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800

080079dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	f023 0201 	bic.w	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 030a 	bic.w	r3, r3, #10
 8007a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b087      	sub	sp, #28
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f023 0210 	bic.w	r2, r3, #16
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	031b      	lsls	r3, r3, #12
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f043 0307 	orr.w	r3, r3, #7
 8007abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	609a      	str	r2, [r3, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	021a      	lsls	r2, r3, #8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	609a      	str	r2, [r3, #8]
}
 8007b04:	bf00      	nop
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 031f 	and.w	r3, r3, #31
 8007b22:	2201      	movs	r2, #1
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	401a      	ands	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a1a      	ldr	r2, [r3, #32]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	fa01 f303 	lsl.w	r3, r1, r3
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e068      	b.n	8007c46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a2e      	ldr	r2, [pc, #184]	@ (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d108      	bne.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d01d      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be6:	d018      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d013      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d00e      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a18      	ldr	r2, [pc, #96]	@ (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d009      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a13      	ldr	r2, [pc, #76]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d004      	beq.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a14      	ldr	r2, [pc, #80]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10c      	bne.n	8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40000c00 	.word	0x40000c00
 8007c68:	40014000 	.word	0x40014000

08007c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e040      	b.n	8007d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fa fada 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2224      	movs	r2, #36	@ 0x24
 8007cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fc32 	bl	8008558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f977 	bl	8007fe8 <UART_SetConfig>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e01b      	b.n	8007d3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0201 	orr.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fcb1 	bl	800869c <UART_CheckIdleState>
 8007d3a:	4603      	mov	r3, r0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	@ 0x28
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d177      	bne.n	8007e4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_UART_Transmit+0x24>
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e070      	b.n	8007e4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2221      	movs	r2, #33	@ 0x21
 8007d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d7a:	f7fa ffbf 	bl	8002cfc <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d98:	d108      	bne.n	8007dac <HAL_UART_Transmit+0x68>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	e003      	b.n	8007db4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007db4:	e02f      	b.n	8007e16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2180      	movs	r1, #128	@ 0x80
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fd13 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e03b      	b.n	8007e4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10b      	bne.n	8007df4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de8:	b292      	uxth	r2, r2
 8007dea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	3302      	adds	r3, #2
 8007df0:	61bb      	str	r3, [r7, #24]
 8007df2:	e007      	b.n	8007e04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1c9      	bne.n	8007db6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2140      	movs	r1, #64	@ 0x40
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fcdd 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e005      	b.n	8007e4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2220      	movs	r2, #32
 8007e46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e000      	b.n	8007e4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b08a      	sub	sp, #40	@ 0x28
 8007e5a:	af02      	add	r7, sp, #8
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	f040 80b6 	bne.w	8007fde <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_UART_Receive+0x28>
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0ae      	b.n	8007fe0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2222      	movs	r2, #34	@ 0x22
 8007e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e98:	f7fa ff30 	bl	8002cfc <HAL_GetTick>
 8007e9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	88fa      	ldrh	r2, [r7, #6]
 8007ea2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb6:	d10e      	bne.n	8007ed6 <HAL_UART_Receive+0x80>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <HAL_UART_Receive+0x76>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007eca:	e02d      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	22ff      	movs	r2, #255	@ 0xff
 8007ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ed4:	e028      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <HAL_UART_Receive+0xa4>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <HAL_UART_Receive+0x9a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	22ff      	movs	r2, #255	@ 0xff
 8007eea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007eee:	e01b      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	227f      	movs	r2, #127	@ 0x7f
 8007ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ef8:	e016      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f02:	d10d      	bne.n	8007f20 <HAL_UART_Receive+0xca>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_UART_Receive+0xc0>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	227f      	movs	r2, #127	@ 0x7f
 8007f10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f14:	e008      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	223f      	movs	r2, #63	@ 0x3f
 8007f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f1e:	e003      	b.n	8007f28 <HAL_UART_Receive+0xd2>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f2e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f38:	d108      	bne.n	8007f4c <HAL_UART_Receive+0xf6>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	e003      	b.n	8007f54 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f54:	e037      	b.n	8007fc6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2120      	movs	r1, #32
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fc43 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e033      	b.n	8007fe0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10c      	bne.n	8007f98 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	8a7b      	ldrh	r3, [r7, #18]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	3302      	adds	r3, #2
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e00d      	b.n	8007fb4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	8a7b      	ldrh	r3, [r7, #18]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1c1      	bne.n	8007f56 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
  }
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fec:	b08a      	sub	sp, #40	@ 0x28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	431a      	orrs	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4313      	orrs	r3, r2
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4ba4      	ldr	r3, [pc, #656]	@ (80082a8 <UART_SetConfig+0x2c0>)
 8008018:	4013      	ands	r3, r2
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008020:	430b      	orrs	r3, r1
 8008022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a99      	ldr	r2, [pc, #612]	@ (80082ac <UART_SetConfig+0x2c4>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008050:	4313      	orrs	r3, r2
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a90      	ldr	r2, [pc, #576]	@ (80082b0 <UART_SetConfig+0x2c8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d126      	bne.n	80080c0 <UART_SetConfig+0xd8>
 8008072:	4b90      	ldr	r3, [pc, #576]	@ (80082b4 <UART_SetConfig+0x2cc>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	2b03      	cmp	r3, #3
 800807e:	d81b      	bhi.n	80080b8 <UART_SetConfig+0xd0>
 8008080:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0xa0>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	08008099 	.word	0x08008099
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080a1 	.word	0x080080a1
 8008094:	080080b1 	.word	0x080080b1
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800809e:	e116      	b.n	80082ce <UART_SetConfig+0x2e6>
 80080a0:	2302      	movs	r3, #2
 80080a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a6:	e112      	b.n	80082ce <UART_SetConfig+0x2e6>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ae:	e10e      	b.n	80082ce <UART_SetConfig+0x2e6>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080b6:	e10a      	b.n	80082ce <UART_SetConfig+0x2e6>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080be:	e106      	b.n	80082ce <UART_SetConfig+0x2e6>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a7c      	ldr	r2, [pc, #496]	@ (80082b8 <UART_SetConfig+0x2d0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d138      	bne.n	800813c <UART_SetConfig+0x154>
 80080ca:	4b7a      	ldr	r3, [pc, #488]	@ (80082b4 <UART_SetConfig+0x2cc>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d0:	f003 030c 	and.w	r3, r3, #12
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d82d      	bhi.n	8008134 <UART_SetConfig+0x14c>
 80080d8:	a201      	add	r2, pc, #4	@ (adr r2, 80080e0 <UART_SetConfig+0xf8>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008135 	.word	0x08008135
 80080e8:	08008135 	.word	0x08008135
 80080ec:	08008135 	.word	0x08008135
 80080f0:	08008125 	.word	0x08008125
 80080f4:	08008135 	.word	0x08008135
 80080f8:	08008135 	.word	0x08008135
 80080fc:	08008135 	.word	0x08008135
 8008100:	0800811d 	.word	0x0800811d
 8008104:	08008135 	.word	0x08008135
 8008108:	08008135 	.word	0x08008135
 800810c:	08008135 	.word	0x08008135
 8008110:	0800812d 	.word	0x0800812d
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800811a:	e0d8      	b.n	80082ce <UART_SetConfig+0x2e6>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008122:	e0d4      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800812a:	e0d0      	b.n	80082ce <UART_SetConfig+0x2e6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008132:	e0cc      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800813a:	e0c8      	b.n	80082ce <UART_SetConfig+0x2e6>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5e      	ldr	r2, [pc, #376]	@ (80082bc <UART_SetConfig+0x2d4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d125      	bne.n	8008192 <UART_SetConfig+0x1aa>
 8008146:	4b5b      	ldr	r3, [pc, #364]	@ (80082b4 <UART_SetConfig+0x2cc>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800814c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008150:	2b30      	cmp	r3, #48	@ 0x30
 8008152:	d016      	beq.n	8008182 <UART_SetConfig+0x19a>
 8008154:	2b30      	cmp	r3, #48	@ 0x30
 8008156:	d818      	bhi.n	800818a <UART_SetConfig+0x1a2>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d00a      	beq.n	8008172 <UART_SetConfig+0x18a>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d814      	bhi.n	800818a <UART_SetConfig+0x1a2>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <UART_SetConfig+0x182>
 8008164:	2b10      	cmp	r3, #16
 8008166:	d008      	beq.n	800817a <UART_SetConfig+0x192>
 8008168:	e00f      	b.n	800818a <UART_SetConfig+0x1a2>
 800816a:	2300      	movs	r3, #0
 800816c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008170:	e0ad      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008172:	2302      	movs	r3, #2
 8008174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008178:	e0a9      	b.n	80082ce <UART_SetConfig+0x2e6>
 800817a:	2304      	movs	r3, #4
 800817c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008180:	e0a5      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008182:	2308      	movs	r3, #8
 8008184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008188:	e0a1      	b.n	80082ce <UART_SetConfig+0x2e6>
 800818a:	2310      	movs	r3, #16
 800818c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008190:	e09d      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a4a      	ldr	r2, [pc, #296]	@ (80082c0 <UART_SetConfig+0x2d8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d125      	bne.n	80081e8 <UART_SetConfig+0x200>
 800819c:	4b45      	ldr	r3, [pc, #276]	@ (80082b4 <UART_SetConfig+0x2cc>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80081a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80081a8:	d016      	beq.n	80081d8 <UART_SetConfig+0x1f0>
 80081aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80081ac:	d818      	bhi.n	80081e0 <UART_SetConfig+0x1f8>
 80081ae:	2b80      	cmp	r3, #128	@ 0x80
 80081b0:	d00a      	beq.n	80081c8 <UART_SetConfig+0x1e0>
 80081b2:	2b80      	cmp	r3, #128	@ 0x80
 80081b4:	d814      	bhi.n	80081e0 <UART_SetConfig+0x1f8>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <UART_SetConfig+0x1d8>
 80081ba:	2b40      	cmp	r3, #64	@ 0x40
 80081bc:	d008      	beq.n	80081d0 <UART_SetConfig+0x1e8>
 80081be:	e00f      	b.n	80081e0 <UART_SetConfig+0x1f8>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081c6:	e082      	b.n	80082ce <UART_SetConfig+0x2e6>
 80081c8:	2302      	movs	r3, #2
 80081ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081ce:	e07e      	b.n	80082ce <UART_SetConfig+0x2e6>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081d6:	e07a      	b.n	80082ce <UART_SetConfig+0x2e6>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081de:	e076      	b.n	80082ce <UART_SetConfig+0x2e6>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081e6:	e072      	b.n	80082ce <UART_SetConfig+0x2e6>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a35      	ldr	r2, [pc, #212]	@ (80082c4 <UART_SetConfig+0x2dc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d12a      	bne.n	8008248 <UART_SetConfig+0x260>
 80081f2:	4b30      	ldr	r3, [pc, #192]	@ (80082b4 <UART_SetConfig+0x2cc>)
 80081f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008200:	d01a      	beq.n	8008238 <UART_SetConfig+0x250>
 8008202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008206:	d81b      	bhi.n	8008240 <UART_SetConfig+0x258>
 8008208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820c:	d00c      	beq.n	8008228 <UART_SetConfig+0x240>
 800820e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008212:	d815      	bhi.n	8008240 <UART_SetConfig+0x258>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <UART_SetConfig+0x238>
 8008218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821c:	d008      	beq.n	8008230 <UART_SetConfig+0x248>
 800821e:	e00f      	b.n	8008240 <UART_SetConfig+0x258>
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008226:	e052      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008228:	2302      	movs	r3, #2
 800822a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800822e:	e04e      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008236:	e04a      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800823e:	e046      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008246:	e042      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a17      	ldr	r2, [pc, #92]	@ (80082ac <UART_SetConfig+0x2c4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d13a      	bne.n	80082c8 <UART_SetConfig+0x2e0>
 8008252:	4b18      	ldr	r3, [pc, #96]	@ (80082b4 <UART_SetConfig+0x2cc>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008258:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800825c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008260:	d01a      	beq.n	8008298 <UART_SetConfig+0x2b0>
 8008262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008266:	d81b      	bhi.n	80082a0 <UART_SetConfig+0x2b8>
 8008268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800826c:	d00c      	beq.n	8008288 <UART_SetConfig+0x2a0>
 800826e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008272:	d815      	bhi.n	80082a0 <UART_SetConfig+0x2b8>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <UART_SetConfig+0x298>
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800827c:	d008      	beq.n	8008290 <UART_SetConfig+0x2a8>
 800827e:	e00f      	b.n	80082a0 <UART_SetConfig+0x2b8>
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008286:	e022      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008288:	2302      	movs	r3, #2
 800828a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800828e:	e01e      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008296:	e01a      	b.n	80082ce <UART_SetConfig+0x2e6>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800829e:	e016      	b.n	80082ce <UART_SetConfig+0x2e6>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082a6:	e012      	b.n	80082ce <UART_SetConfig+0x2e6>
 80082a8:	efff69f3 	.word	0xefff69f3
 80082ac:	40008000 	.word	0x40008000
 80082b0:	40013800 	.word	0x40013800
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40004400 	.word	0x40004400
 80082bc:	40004800 	.word	0x40004800
 80082c0:	40004c00 	.word	0x40004c00
 80082c4:	40005000 	.word	0x40005000
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a9f      	ldr	r2, [pc, #636]	@ (8008550 <UART_SetConfig+0x568>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d17a      	bne.n	80083ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d824      	bhi.n	800832a <UART_SetConfig+0x342>
 80082e0:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <UART_SetConfig+0x300>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	0800832b 	.word	0x0800832b
 80082f0:	08008315 	.word	0x08008315
 80082f4:	0800832b 	.word	0x0800832b
 80082f8:	0800831b 	.word	0x0800831b
 80082fc:	0800832b 	.word	0x0800832b
 8008300:	0800832b 	.word	0x0800832b
 8008304:	0800832b 	.word	0x0800832b
 8008308:	08008323 	.word	0x08008323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800830c:	f7fd fc64 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8008310:	61f8      	str	r0, [r7, #28]
        break;
 8008312:	e010      	b.n	8008336 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008314:	4b8f      	ldr	r3, [pc, #572]	@ (8008554 <UART_SetConfig+0x56c>)
 8008316:	61fb      	str	r3, [r7, #28]
        break;
 8008318:	e00d      	b.n	8008336 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800831a:	f7fd fbc5 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 800831e:	61f8      	str	r0, [r7, #28]
        break;
 8008320:	e009      	b.n	8008336 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008326:	61fb      	str	r3, [r7, #28]
        break;
 8008328:	e005      	b.n	8008336 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80fb 	beq.w	8008534 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4413      	add	r3, r2
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	429a      	cmp	r2, r3
 800834c:	d305      	bcc.n	800835a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	429a      	cmp	r2, r3
 8008358:	d903      	bls.n	8008362 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008360:	e0e8      	b.n	8008534 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2200      	movs	r2, #0
 8008366:	461c      	mov	r4, r3
 8008368:	4615      	mov	r5, r2
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	022b      	lsls	r3, r5, #8
 8008374:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008378:	0222      	lsls	r2, r4, #8
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	6849      	ldr	r1, [r1, #4]
 800837e:	0849      	lsrs	r1, r1, #1
 8008380:	2000      	movs	r0, #0
 8008382:	4688      	mov	r8, r1
 8008384:	4681      	mov	r9, r0
 8008386:	eb12 0a08 	adds.w	sl, r2, r8
 800838a:	eb43 0b09 	adc.w	fp, r3, r9
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	603b      	str	r3, [r7, #0]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839c:	4650      	mov	r0, sl
 800839e:	4659      	mov	r1, fp
 80083a0:	f7f8 fc02 	bl	8000ba8 <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b2:	d308      	bcc.n	80083c6 <UART_SetConfig+0x3de>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ba:	d204      	bcs.n	80083c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e0b6      	b.n	8008534 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80083cc:	e0b2      	b.n	8008534 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d6:	d15e      	bne.n	8008496 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80083d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d828      	bhi.n	8008432 <UART_SetConfig+0x44a>
 80083e0:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <UART_SetConfig+0x400>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	08008433 	.word	0x08008433
 80083f8:	08008423 	.word	0x08008423
 80083fc:	08008433 	.word	0x08008433
 8008400:	08008433 	.word	0x08008433
 8008404:	08008433 	.word	0x08008433
 8008408:	0800842b 	.word	0x0800842b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800840c:	f7fd fbe4 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8008410:	61f8      	str	r0, [r7, #28]
        break;
 8008412:	e014      	b.n	800843e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008414:	f7fd fbf6 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8008418:	61f8      	str	r0, [r7, #28]
        break;
 800841a:	e010      	b.n	800843e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800841c:	4b4d      	ldr	r3, [pc, #308]	@ (8008554 <UART_SetConfig+0x56c>)
 800841e:	61fb      	str	r3, [r7, #28]
        break;
 8008420:	e00d      	b.n	800843e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008422:	f7fd fb41 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8008426:	61f8      	str	r0, [r7, #28]
        break;
 8008428:	e009      	b.n	800843e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800842e:	61fb      	str	r3, [r7, #28]
        break;
 8008430:	e005      	b.n	800843e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800843c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d077      	beq.n	8008534 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	005a      	lsls	r2, r3, #1
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	441a      	add	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b0f      	cmp	r3, #15
 800845e:	d916      	bls.n	800848e <UART_SetConfig+0x4a6>
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008466:	d212      	bcs.n	800848e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f023 030f 	bic.w	r3, r3, #15
 8008470:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	085b      	lsrs	r3, r3, #1
 8008476:	b29b      	uxth	r3, r3
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	b29a      	uxth	r2, r3
 800847e:	8afb      	ldrh	r3, [r7, #22]
 8008480:	4313      	orrs	r3, r2
 8008482:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	8afa      	ldrh	r2, [r7, #22]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e052      	b.n	8008534 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008494:	e04e      	b.n	8008534 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008496:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800849a:	2b08      	cmp	r3, #8
 800849c:	d827      	bhi.n	80084ee <UART_SetConfig+0x506>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <UART_SetConfig+0x4bc>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	080084ef 	.word	0x080084ef
 80084b4:	080084df 	.word	0x080084df
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	080084ef 	.word	0x080084ef
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	080084e7 	.word	0x080084e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c8:	f7fd fb86 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80084cc:	61f8      	str	r0, [r7, #28]
        break;
 80084ce:	e014      	b.n	80084fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084d0:	f7fd fb98 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 80084d4:	61f8      	str	r0, [r7, #28]
        break;
 80084d6:	e010      	b.n	80084fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008554 <UART_SetConfig+0x56c>)
 80084da:	61fb      	str	r3, [r7, #28]
        break;
 80084dc:	e00d      	b.n	80084fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084de:	f7fd fae3 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80084e2:	61f8      	str	r0, [r7, #28]
        break;
 80084e4:	e009      	b.n	80084fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ea:	61fb      	str	r3, [r7, #28]
        break;
 80084ec:	e005      	b.n	80084fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80084f8:	bf00      	nop
    }

    if (pclk != 0U)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d019      	beq.n	8008534 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	085a      	lsrs	r2, r3, #1
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	441a      	add	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008512:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d909      	bls.n	800852e <UART_SetConfig+0x546>
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008520:	d205      	bcs.n	800852e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	b29a      	uxth	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60da      	str	r2, [r3, #12]
 800852c:	e002      	b.n	8008534 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008540:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008544:	4618      	mov	r0, r3
 8008546:	3728      	adds	r7, #40	@ 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854e:	bf00      	nop
 8008550:	40008000 	.word	0x40008000
 8008554:	00f42400 	.word	0x00f42400

08008558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	f003 0310 	and.w	r3, r3, #16
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01a      	beq.n	800866e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008656:	d10a      	bne.n	800866e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	605a      	str	r2, [r3, #4]
  }
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b098      	sub	sp, #96	@ 0x60
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086ac:	f7fa fb26 	bl	8002cfc <HAL_GetTick>
 80086b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d12e      	bne.n	800871e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086c8:	2200      	movs	r2, #0
 80086ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f88c 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d021      	beq.n	800871e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2220      	movs	r2, #32
 8008710:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e062      	b.n	80087e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b04      	cmp	r3, #4
 800872a:	d149      	bne.n	80087c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800872c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008734:	2200      	movs	r2, #0
 8008736:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f856 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d03c      	beq.n	80087c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	623b      	str	r3, [r7, #32]
   return(result);
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800875a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008764:	633b      	str	r3, [r7, #48]	@ 0x30
 8008766:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800876a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	60fb      	str	r3, [r7, #12]
   return(result);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008798:	61fa      	str	r2, [r7, #28]
 800879a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	617b      	str	r3, [r7, #20]
   return(result);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e011      	b.n	80087e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3758      	adds	r7, #88	@ 0x58
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087fc:	e04f      	b.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d04b      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008806:	f7fa fa79 	bl	8002cfc <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <UART_WaitOnFlagUntilTimeout+0x30>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e04e      	b.n	80088be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d037      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b80      	cmp	r3, #128	@ 0x80
 8008832:	d034      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d031      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	2b08      	cmp	r3, #8
 8008846:	d110      	bne.n	800886a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2208      	movs	r2, #8
 800884e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f838 	bl	80088c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2208      	movs	r2, #8
 800885a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e029      	b.n	80088be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008878:	d111      	bne.n	800889e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f81e 	bl	80088c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e00f      	b.n	80088be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	bf0c      	ite	eq
 80088ae:	2301      	moveq	r3, #1
 80088b0:	2300      	movne	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d0a0      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b095      	sub	sp, #84	@ 0x54
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e6      	bne.n	80088ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e5      	bne.n	8008900 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008938:	2b01      	cmp	r3, #1
 800893a:	d118      	bne.n	800896e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	60bb      	str	r3, [r7, #8]
   return(result);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 0310 	bic.w	r3, r3, #16
 8008950:	647b      	str	r3, [r7, #68]	@ 0x44
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6979      	ldr	r1, [r7, #20]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	613b      	str	r3, [r7, #16]
   return(result);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e6      	bne.n	800893c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008982:	bf00      	nop
 8008984:	3754      	adds	r7, #84	@ 0x54
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <__cvt>:
 800898e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008992:	ec57 6b10 	vmov	r6, r7, d0
 8008996:	2f00      	cmp	r7, #0
 8008998:	460c      	mov	r4, r1
 800899a:	4619      	mov	r1, r3
 800899c:	463b      	mov	r3, r7
 800899e:	bfbb      	ittet	lt
 80089a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089a4:	461f      	movlt	r7, r3
 80089a6:	2300      	movge	r3, #0
 80089a8:	232d      	movlt	r3, #45	@ 0x2d
 80089aa:	700b      	strb	r3, [r1, #0]
 80089ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089b2:	4691      	mov	r9, r2
 80089b4:	f023 0820 	bic.w	r8, r3, #32
 80089b8:	bfbc      	itt	lt
 80089ba:	4632      	movlt	r2, r6
 80089bc:	4616      	movlt	r6, r2
 80089be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089c2:	d005      	beq.n	80089d0 <__cvt+0x42>
 80089c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089c8:	d100      	bne.n	80089cc <__cvt+0x3e>
 80089ca:	3401      	adds	r4, #1
 80089cc:	2102      	movs	r1, #2
 80089ce:	e000      	b.n	80089d2 <__cvt+0x44>
 80089d0:	2103      	movs	r1, #3
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	ab02      	add	r3, sp, #8
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	ec47 6b10 	vmov	d0, r6, r7
 80089de:	4653      	mov	r3, sl
 80089e0:	4622      	mov	r2, r4
 80089e2:	f000 ff91 	bl	8009908 <_dtoa_r>
 80089e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089ea:	4605      	mov	r5, r0
 80089ec:	d119      	bne.n	8008a22 <__cvt+0x94>
 80089ee:	f019 0f01 	tst.w	r9, #1
 80089f2:	d00e      	beq.n	8008a12 <__cvt+0x84>
 80089f4:	eb00 0904 	add.w	r9, r0, r4
 80089f8:	2200      	movs	r2, #0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f8 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a04:	b108      	cbz	r0, 8008a0a <__cvt+0x7c>
 8008a06:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a0a:	2230      	movs	r2, #48	@ 0x30
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	454b      	cmp	r3, r9
 8008a10:	d31e      	bcc.n	8008a50 <__cvt+0xc2>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a16:	1b5b      	subs	r3, r3, r5
 8008a18:	4628      	mov	r0, r5
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	b004      	add	sp, #16
 8008a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a26:	eb00 0904 	add.w	r9, r0, r4
 8008a2a:	d1e5      	bne.n	80089f8 <__cvt+0x6a>
 8008a2c:	7803      	ldrb	r3, [r0, #0]
 8008a2e:	2b30      	cmp	r3, #48	@ 0x30
 8008a30:	d10a      	bne.n	8008a48 <__cvt+0xba>
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f8 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3e:	b918      	cbnz	r0, 8008a48 <__cvt+0xba>
 8008a40:	f1c4 0401 	rsb	r4, r4, #1
 8008a44:	f8ca 4000 	str.w	r4, [sl]
 8008a48:	f8da 3000 	ldr.w	r3, [sl]
 8008a4c:	4499      	add	r9, r3
 8008a4e:	e7d3      	b.n	80089f8 <__cvt+0x6a>
 8008a50:	1c59      	adds	r1, r3, #1
 8008a52:	9103      	str	r1, [sp, #12]
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e7d9      	b.n	8008a0c <__cvt+0x7e>

08008a58 <__exponent>:
 8008a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a5a:	2900      	cmp	r1, #0
 8008a5c:	bfba      	itte	lt
 8008a5e:	4249      	neglt	r1, r1
 8008a60:	232d      	movlt	r3, #45	@ 0x2d
 8008a62:	232b      	movge	r3, #43	@ 0x2b
 8008a64:	2909      	cmp	r1, #9
 8008a66:	7002      	strb	r2, [r0, #0]
 8008a68:	7043      	strb	r3, [r0, #1]
 8008a6a:	dd29      	ble.n	8008ac0 <__exponent+0x68>
 8008a6c:	f10d 0307 	add.w	r3, sp, #7
 8008a70:	461d      	mov	r5, r3
 8008a72:	270a      	movs	r7, #10
 8008a74:	461a      	mov	r2, r3
 8008a76:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a7a:	fb07 1416 	mls	r4, r7, r6, r1
 8008a7e:	3430      	adds	r4, #48	@ 0x30
 8008a80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a84:	460c      	mov	r4, r1
 8008a86:	2c63      	cmp	r4, #99	@ 0x63
 8008a88:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	dcf1      	bgt.n	8008a74 <__exponent+0x1c>
 8008a90:	3130      	adds	r1, #48	@ 0x30
 8008a92:	1e94      	subs	r4, r2, #2
 8008a94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a98:	1c41      	adds	r1, r0, #1
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	d30a      	bcc.n	8008ab6 <__exponent+0x5e>
 8008aa0:	f10d 0309 	add.w	r3, sp, #9
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	42ac      	cmp	r4, r5
 8008aa8:	bf88      	it	hi
 8008aaa:	2300      	movhi	r3, #0
 8008aac:	3302      	adds	r3, #2
 8008aae:	4403      	add	r3, r0
 8008ab0:	1a18      	subs	r0, r3, r0
 8008ab2:	b003      	add	sp, #12
 8008ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008aba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008abe:	e7ed      	b.n	8008a9c <__exponent+0x44>
 8008ac0:	2330      	movs	r3, #48	@ 0x30
 8008ac2:	3130      	adds	r1, #48	@ 0x30
 8008ac4:	7083      	strb	r3, [r0, #2]
 8008ac6:	70c1      	strb	r1, [r0, #3]
 8008ac8:	1d03      	adds	r3, r0, #4
 8008aca:	e7f1      	b.n	8008ab0 <__exponent+0x58>

08008acc <_printf_float>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	b08d      	sub	sp, #52	@ 0x34
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ad8:	4616      	mov	r6, r2
 8008ada:	461f      	mov	r7, r3
 8008adc:	4605      	mov	r5, r0
 8008ade:	f000 fe03 	bl	80096e8 <_localeconv_r>
 8008ae2:	6803      	ldr	r3, [r0, #0]
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f7 fbc2 	bl	8000270 <strlen>
 8008aec:	2300      	movs	r3, #0
 8008aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af0:	f8d8 3000 	ldr.w	r3, [r8]
 8008af4:	9005      	str	r0, [sp, #20]
 8008af6:	3307      	adds	r3, #7
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	f103 0208 	add.w	r2, r3, #8
 8008b00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b04:	f8d4 b000 	ldr.w	fp, [r4]
 8008b08:	f8c8 2000 	str.w	r2, [r8]
 8008b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b14:	9307      	str	r3, [sp, #28]
 8008b16:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b22:	4b9c      	ldr	r3, [pc, #624]	@ (8008d94 <_printf_float+0x2c8>)
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	f7f8 f800 	bl	8000b2c <__aeabi_dcmpun>
 8008b2c:	bb70      	cbnz	r0, 8008b8c <_printf_float+0xc0>
 8008b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b32:	4b98      	ldr	r3, [pc, #608]	@ (8008d94 <_printf_float+0x2c8>)
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	f7f7 ffda 	bl	8000af0 <__aeabi_dcmple>
 8008b3c:	bb30      	cbnz	r0, 8008b8c <_printf_float+0xc0>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8008b4a:	b110      	cbz	r0, 8008b52 <_printf_float+0x86>
 8008b4c:	232d      	movs	r3, #45	@ 0x2d
 8008b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b52:	4a91      	ldr	r2, [pc, #580]	@ (8008d98 <_printf_float+0x2cc>)
 8008b54:	4b91      	ldr	r3, [pc, #580]	@ (8008d9c <_printf_float+0x2d0>)
 8008b56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b5a:	bf94      	ite	ls
 8008b5c:	4690      	movls	r8, r2
 8008b5e:	4698      	movhi	r8, r3
 8008b60:	2303      	movs	r3, #3
 8008b62:	6123      	str	r3, [r4, #16]
 8008b64:	f02b 0304 	bic.w	r3, fp, #4
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	f04f 0900 	mov.w	r9, #0
 8008b6e:	9700      	str	r7, [sp, #0]
 8008b70:	4633      	mov	r3, r6
 8008b72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f9d2 	bl	8008f20 <_printf_common>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f040 808d 	bne.w	8008c9c <_printf_float+0x1d0>
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	b00d      	add	sp, #52	@ 0x34
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 ffca 	bl	8000b2c <__aeabi_dcmpun>
 8008b98:	b140      	cbz	r0, 8008bac <_printf_float+0xe0>
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfbc      	itt	lt
 8008ba0:	232d      	movlt	r3, #45	@ 0x2d
 8008ba2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8008da0 <_printf_float+0x2d4>)
 8008ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8008da4 <_printf_float+0x2d8>)
 8008baa:	e7d4      	b.n	8008b56 <_printf_float+0x8a>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bb2:	9206      	str	r2, [sp, #24]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	d13b      	bne.n	8008c30 <_printf_float+0x164>
 8008bb8:	2306      	movs	r3, #6
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6022      	str	r2, [r4, #0]
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bcc:	ab09      	add	r3, sp, #36	@ 0x24
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	6861      	ldr	r1, [r4, #4]
 8008bd2:	ec49 8b10 	vmov	d0, r8, r9
 8008bd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7ff fed7 	bl	800898e <__cvt>
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be4:	2b47      	cmp	r3, #71	@ 0x47
 8008be6:	4680      	mov	r8, r0
 8008be8:	d129      	bne.n	8008c3e <_printf_float+0x172>
 8008bea:	1cc8      	adds	r0, r1, #3
 8008bec:	db02      	blt.n	8008bf4 <_printf_float+0x128>
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	dd41      	ble.n	8008c78 <_printf_float+0x1ac>
 8008bf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008bf8:	fa5f fa8a 	uxtb.w	sl, sl
 8008bfc:	3901      	subs	r1, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c04:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c06:	f7ff ff27 	bl	8008a58 <__exponent>
 8008c0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c0c:	1813      	adds	r3, r2, r0
 8008c0e:	2a01      	cmp	r2, #1
 8008c10:	4681      	mov	r9, r0
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	dc02      	bgt.n	8008c1c <_printf_float+0x150>
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	07d2      	lsls	r2, r2, #31
 8008c1a:	d501      	bpl.n	8008c20 <_printf_float+0x154>
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0a2      	beq.n	8008b6e <_printf_float+0xa2>
 8008c28:	232d      	movs	r3, #45	@ 0x2d
 8008c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2e:	e79e      	b.n	8008b6e <_printf_float+0xa2>
 8008c30:	9a06      	ldr	r2, [sp, #24]
 8008c32:	2a47      	cmp	r2, #71	@ 0x47
 8008c34:	d1c2      	bne.n	8008bbc <_printf_float+0xf0>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1c0      	bne.n	8008bbc <_printf_float+0xf0>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e7bd      	b.n	8008bba <_printf_float+0xee>
 8008c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c42:	d9db      	bls.n	8008bfc <_printf_float+0x130>
 8008c44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c48:	d118      	bne.n	8008c7c <_printf_float+0x1b0>
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	dd0b      	ble.n	8008c68 <_printf_float+0x19c>
 8008c50:	6121      	str	r1, [r4, #16]
 8008c52:	b913      	cbnz	r3, 8008c5a <_printf_float+0x18e>
 8008c54:	6822      	ldr	r2, [r4, #0]
 8008c56:	07d0      	lsls	r0, r2, #31
 8008c58:	d502      	bpl.n	8008c60 <_printf_float+0x194>
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	440b      	add	r3, r1
 8008c5e:	6123      	str	r3, [r4, #16]
 8008c60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	e7db      	b.n	8008c20 <_printf_float+0x154>
 8008c68:	b913      	cbnz	r3, 8008c70 <_printf_float+0x1a4>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	07d2      	lsls	r2, r2, #31
 8008c6e:	d501      	bpl.n	8008c74 <_printf_float+0x1a8>
 8008c70:	3302      	adds	r3, #2
 8008c72:	e7f4      	b.n	8008c5e <_printf_float+0x192>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e7f2      	b.n	8008c5e <_printf_float+0x192>
 8008c78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	db05      	blt.n	8008c8e <_printf_float+0x1c2>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6121      	str	r1, [r4, #16]
 8008c86:	07d8      	lsls	r0, r3, #31
 8008c88:	d5ea      	bpl.n	8008c60 <_printf_float+0x194>
 8008c8a:	1c4b      	adds	r3, r1, #1
 8008c8c:	e7e7      	b.n	8008c5e <_printf_float+0x192>
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	bfd4      	ite	le
 8008c92:	f1c1 0202 	rsble	r2, r1, #2
 8008c96:	2201      	movgt	r2, #1
 8008c98:	4413      	add	r3, r2
 8008c9a:	e7e0      	b.n	8008c5e <_printf_float+0x192>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	055a      	lsls	r2, r3, #21
 8008ca0:	d407      	bmi.n	8008cb2 <_printf_float+0x1e6>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d12b      	bne.n	8008d08 <_printf_float+0x23c>
 8008cb0:	e767      	b.n	8008b82 <_printf_float+0xb6>
 8008cb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cb6:	f240 80dd 	bls.w	8008e74 <_printf_float+0x3a8>
 8008cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f7f7 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d033      	beq.n	8008d32 <_printf_float+0x266>
 8008cca:	4a37      	ldr	r2, [pc, #220]	@ (8008da8 <_printf_float+0x2dc>)
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	f43f af54 	beq.w	8008b82 <_printf_float+0xb6>
 8008cda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cde:	4543      	cmp	r3, r8
 8008ce0:	db02      	blt.n	8008ce8 <_printf_float+0x21c>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07d8      	lsls	r0, r3, #31
 8008ce6:	d50f      	bpl.n	8008d08 <_printf_float+0x23c>
 8008ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f af45 	beq.w	8008b82 <_printf_float+0xb6>
 8008cf8:	f04f 0900 	mov.w	r9, #0
 8008cfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d00:	f104 0a1a 	add.w	sl, r4, #26
 8008d04:	45c8      	cmp	r8, r9
 8008d06:	dc09      	bgt.n	8008d1c <_printf_float+0x250>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	079b      	lsls	r3, r3, #30
 8008d0c:	f100 8103 	bmi.w	8008f16 <_printf_float+0x44a>
 8008d10:	68e0      	ldr	r0, [r4, #12]
 8008d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d14:	4298      	cmp	r0, r3
 8008d16:	bfb8      	it	lt
 8008d18:	4618      	movlt	r0, r3
 8008d1a:	e734      	b.n	8008b86 <_printf_float+0xba>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f af2b 	beq.w	8008b82 <_printf_float+0xb6>
 8008d2c:	f109 0901 	add.w	r9, r9, #1
 8008d30:	e7e8      	b.n	8008d04 <_printf_float+0x238>
 8008d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc39      	bgt.n	8008dac <_printf_float+0x2e0>
 8008d38:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <_printf_float+0x2dc>)
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f af1d 	beq.w	8008b82 <_printf_float+0xb6>
 8008d48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d4c:	ea59 0303 	orrs.w	r3, r9, r3
 8008d50:	d102      	bne.n	8008d58 <_printf_float+0x28c>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d5d7      	bpl.n	8008d08 <_printf_float+0x23c>
 8008d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f af0d 	beq.w	8008b82 <_printf_float+0xb6>
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	f104 0b1a 	add.w	fp, r4, #26
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	425b      	negs	r3, r3
 8008d74:	4553      	cmp	r3, sl
 8008d76:	dc01      	bgt.n	8008d7c <_printf_float+0x2b0>
 8008d78:	464b      	mov	r3, r9
 8008d7a:	e793      	b.n	8008ca4 <_printf_float+0x1d8>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	465a      	mov	r2, fp
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	f43f aefb 	beq.w	8008b82 <_printf_float+0xb6>
 8008d8c:	f10a 0a01 	add.w	sl, sl, #1
 8008d90:	e7ee      	b.n	8008d70 <_printf_float+0x2a4>
 8008d92:	bf00      	nop
 8008d94:	7fefffff 	.word	0x7fefffff
 8008d98:	0800c634 	.word	0x0800c634
 8008d9c:	0800c638 	.word	0x0800c638
 8008da0:	0800c63c 	.word	0x0800c63c
 8008da4:	0800c640 	.word	0x0800c640
 8008da8:	0800c644 	.word	0x0800c644
 8008dac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008db2:	4553      	cmp	r3, sl
 8008db4:	bfa8      	it	ge
 8008db6:	4653      	movge	r3, sl
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	4699      	mov	r9, r3
 8008dbc:	dc36      	bgt.n	8008e2c <_printf_float+0x360>
 8008dbe:	f04f 0b00 	mov.w	fp, #0
 8008dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dc6:	f104 021a 	add.w	r2, r4, #26
 8008dca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dcc:	9306      	str	r3, [sp, #24]
 8008dce:	eba3 0309 	sub.w	r3, r3, r9
 8008dd2:	455b      	cmp	r3, fp
 8008dd4:	dc31      	bgt.n	8008e3a <_printf_float+0x36e>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd8:	459a      	cmp	sl, r3
 8008dda:	dc3a      	bgt.n	8008e52 <_printf_float+0x386>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	07da      	lsls	r2, r3, #31
 8008de0:	d437      	bmi.n	8008e52 <_printf_float+0x386>
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	ebaa 0903 	sub.w	r9, sl, r3
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	ebaa 0303 	sub.w	r3, sl, r3
 8008dee:	4599      	cmp	r9, r3
 8008df0:	bfa8      	it	ge
 8008df2:	4699      	movge	r9, r3
 8008df4:	f1b9 0f00 	cmp.w	r9, #0
 8008df8:	dc33      	bgt.n	8008e62 <_printf_float+0x396>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e02:	f104 0b1a 	add.w	fp, r4, #26
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	ebaa 0303 	sub.w	r3, sl, r3
 8008e0c:	eba3 0309 	sub.w	r3, r3, r9
 8008e10:	4543      	cmp	r3, r8
 8008e12:	f77f af79 	ble.w	8008d08 <_printf_float+0x23c>
 8008e16:	2301      	movs	r3, #1
 8008e18:	465a      	mov	r2, fp
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f aeae 	beq.w	8008b82 <_printf_float+0xb6>
 8008e26:	f108 0801 	add.w	r8, r8, #1
 8008e2a:	e7ec      	b.n	8008e06 <_printf_float+0x33a>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	d1c2      	bne.n	8008dbe <_printf_float+0x2f2>
 8008e38:	e6a3      	b.n	8008b82 <_printf_float+0xb6>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	9206      	str	r2, [sp, #24]
 8008e42:	47b8      	blx	r7
 8008e44:	3001      	adds	r0, #1
 8008e46:	f43f ae9c 	beq.w	8008b82 <_printf_float+0xb6>
 8008e4a:	9a06      	ldr	r2, [sp, #24]
 8008e4c:	f10b 0b01 	add.w	fp, fp, #1
 8008e50:	e7bb      	b.n	8008dca <_printf_float+0x2fe>
 8008e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d1c0      	bne.n	8008de2 <_printf_float+0x316>
 8008e60:	e68f      	b.n	8008b82 <_printf_float+0xb6>
 8008e62:	9a06      	ldr	r2, [sp, #24]
 8008e64:	464b      	mov	r3, r9
 8008e66:	4442      	add	r2, r8
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d1c3      	bne.n	8008dfa <_printf_float+0x32e>
 8008e72:	e686      	b.n	8008b82 <_printf_float+0xb6>
 8008e74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e78:	f1ba 0f01 	cmp.w	sl, #1
 8008e7c:	dc01      	bgt.n	8008e82 <_printf_float+0x3b6>
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d536      	bpl.n	8008ef0 <_printf_float+0x424>
 8008e82:	2301      	movs	r3, #1
 8008e84:	4642      	mov	r2, r8
 8008e86:	4631      	mov	r1, r6
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f43f ae78 	beq.w	8008b82 <_printf_float+0xb6>
 8008e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f ae70 	beq.w	8008b82 <_printf_float+0xb6>
 8008ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eae:	f7f7 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb2:	b9c0      	cbnz	r0, 8008ee6 <_printf_float+0x41a>
 8008eb4:	4653      	mov	r3, sl
 8008eb6:	f108 0201 	add.w	r2, r8, #1
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d10c      	bne.n	8008ede <_printf_float+0x412>
 8008ec4:	e65d      	b.n	8008b82 <_printf_float+0xb6>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	465a      	mov	r2, fp
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f ae56 	beq.w	8008b82 <_printf_float+0xb6>
 8008ed6:	f108 0801 	add.w	r8, r8, #1
 8008eda:	45d0      	cmp	r8, sl
 8008edc:	dbf3      	blt.n	8008ec6 <_printf_float+0x3fa>
 8008ede:	464b      	mov	r3, r9
 8008ee0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ee4:	e6df      	b.n	8008ca6 <_printf_float+0x1da>
 8008ee6:	f04f 0800 	mov.w	r8, #0
 8008eea:	f104 0b1a 	add.w	fp, r4, #26
 8008eee:	e7f4      	b.n	8008eda <_printf_float+0x40e>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	e7e1      	b.n	8008eba <_printf_float+0x3ee>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	464a      	mov	r2, r9
 8008efa:	4631      	mov	r1, r6
 8008efc:	4628      	mov	r0, r5
 8008efe:	47b8      	blx	r7
 8008f00:	3001      	adds	r0, #1
 8008f02:	f43f ae3e 	beq.w	8008b82 <_printf_float+0xb6>
 8008f06:	f108 0801 	add.w	r8, r8, #1
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	4543      	cmp	r3, r8
 8008f12:	dcf0      	bgt.n	8008ef6 <_printf_float+0x42a>
 8008f14:	e6fc      	b.n	8008d10 <_printf_float+0x244>
 8008f16:	f04f 0800 	mov.w	r8, #0
 8008f1a:	f104 0919 	add.w	r9, r4, #25
 8008f1e:	e7f4      	b.n	8008f0a <_printf_float+0x43e>

08008f20 <_printf_common>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	4616      	mov	r6, r2
 8008f26:	4698      	mov	r8, r3
 8008f28:	688a      	ldr	r2, [r1, #8]
 8008f2a:	690b      	ldr	r3, [r1, #16]
 8008f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bfb8      	it	lt
 8008f34:	4613      	movlt	r3, r2
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	b10a      	cbz	r2, 8008f46 <_printf_common+0x26>
 8008f42:	3301      	adds	r3, #1
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	0699      	lsls	r1, r3, #26
 8008f4a:	bf42      	ittt	mi
 8008f4c:	6833      	ldrmi	r3, [r6, #0]
 8008f4e:	3302      	addmi	r3, #2
 8008f50:	6033      	strmi	r3, [r6, #0]
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	f015 0506 	ands.w	r5, r5, #6
 8008f58:	d106      	bne.n	8008f68 <_printf_common+0x48>
 8008f5a:	f104 0a19 	add.w	sl, r4, #25
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	6832      	ldr	r2, [r6, #0]
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dc26      	bgt.n	8008fb6 <_printf_common+0x96>
 8008f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	3b00      	subs	r3, #0
 8008f70:	bf18      	it	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	0692      	lsls	r2, r2, #26
 8008f76:	d42b      	bmi.n	8008fd0 <_printf_common+0xb0>
 8008f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c8      	blx	r9
 8008f82:	3001      	adds	r0, #1
 8008f84:	d01e      	beq.n	8008fc4 <_printf_common+0xa4>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	f003 0306 	and.w	r3, r3, #6
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	bf02      	ittt	eq
 8008f92:	68e5      	ldreq	r5, [r4, #12]
 8008f94:	6833      	ldreq	r3, [r6, #0]
 8008f96:	1aed      	subeq	r5, r5, r3
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	bf0c      	ite	eq
 8008f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa0:	2500      	movne	r5, #0
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	bfc4      	itt	gt
 8008fa6:	1a9b      	subgt	r3, r3, r2
 8008fa8:	18ed      	addgt	r5, r5, r3
 8008faa:	2600      	movs	r6, #0
 8008fac:	341a      	adds	r4, #26
 8008fae:	42b5      	cmp	r5, r6
 8008fb0:	d11a      	bne.n	8008fe8 <_printf_common+0xc8>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e008      	b.n	8008fc8 <_printf_common+0xa8>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4652      	mov	r2, sl
 8008fba:	4641      	mov	r1, r8
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	47c8      	blx	r9
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d103      	bne.n	8008fcc <_printf_common+0xac>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7c6      	b.n	8008f5e <_printf_common+0x3e>
 8008fd0:	18e1      	adds	r1, r4, r3
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	2030      	movs	r0, #48	@ 0x30
 8008fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fda:	4422      	add	r2, r4
 8008fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	e7c7      	b.n	8008f78 <_printf_common+0x58>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4622      	mov	r2, r4
 8008fec:	4641      	mov	r1, r8
 8008fee:	4638      	mov	r0, r7
 8008ff0:	47c8      	blx	r9
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d0e6      	beq.n	8008fc4 <_printf_common+0xa4>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7d9      	b.n	8008fae <_printf_common+0x8e>
	...

08008ffc <_printf_i>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	7e0f      	ldrb	r7, [r1, #24]
 8009002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009004:	2f78      	cmp	r7, #120	@ 0x78
 8009006:	4691      	mov	r9, r2
 8009008:	4680      	mov	r8, r0
 800900a:	460c      	mov	r4, r1
 800900c:	469a      	mov	sl, r3
 800900e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009012:	d807      	bhi.n	8009024 <_printf_i+0x28>
 8009014:	2f62      	cmp	r7, #98	@ 0x62
 8009016:	d80a      	bhi.n	800902e <_printf_i+0x32>
 8009018:	2f00      	cmp	r7, #0
 800901a:	f000 80d2 	beq.w	80091c2 <_printf_i+0x1c6>
 800901e:	2f58      	cmp	r7, #88	@ 0x58
 8009020:	f000 80b9 	beq.w	8009196 <_printf_i+0x19a>
 8009024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800902c:	e03a      	b.n	80090a4 <_printf_i+0xa8>
 800902e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009032:	2b15      	cmp	r3, #21
 8009034:	d8f6      	bhi.n	8009024 <_printf_i+0x28>
 8009036:	a101      	add	r1, pc, #4	@ (adr r1, 800903c <_printf_i+0x40>)
 8009038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800903c:	08009095 	.word	0x08009095
 8009040:	080090a9 	.word	0x080090a9
 8009044:	08009025 	.word	0x08009025
 8009048:	08009025 	.word	0x08009025
 800904c:	08009025 	.word	0x08009025
 8009050:	08009025 	.word	0x08009025
 8009054:	080090a9 	.word	0x080090a9
 8009058:	08009025 	.word	0x08009025
 800905c:	08009025 	.word	0x08009025
 8009060:	08009025 	.word	0x08009025
 8009064:	08009025 	.word	0x08009025
 8009068:	080091a9 	.word	0x080091a9
 800906c:	080090d3 	.word	0x080090d3
 8009070:	08009163 	.word	0x08009163
 8009074:	08009025 	.word	0x08009025
 8009078:	08009025 	.word	0x08009025
 800907c:	080091cb 	.word	0x080091cb
 8009080:	08009025 	.word	0x08009025
 8009084:	080090d3 	.word	0x080090d3
 8009088:	08009025 	.word	0x08009025
 800908c:	08009025 	.word	0x08009025
 8009090:	0800916b 	.word	0x0800916b
 8009094:	6833      	ldr	r3, [r6, #0]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6032      	str	r2, [r6, #0]
 800909c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a4:	2301      	movs	r3, #1
 80090a6:	e09d      	b.n	80091e4 <_printf_i+0x1e8>
 80090a8:	6833      	ldr	r3, [r6, #0]
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	6031      	str	r1, [r6, #0]
 80090b0:	0606      	lsls	r6, r0, #24
 80090b2:	d501      	bpl.n	80090b8 <_printf_i+0xbc>
 80090b4:	681d      	ldr	r5, [r3, #0]
 80090b6:	e003      	b.n	80090c0 <_printf_i+0xc4>
 80090b8:	0645      	lsls	r5, r0, #25
 80090ba:	d5fb      	bpl.n	80090b4 <_printf_i+0xb8>
 80090bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	da03      	bge.n	80090cc <_printf_i+0xd0>
 80090c4:	232d      	movs	r3, #45	@ 0x2d
 80090c6:	426d      	negs	r5, r5
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090cc:	4859      	ldr	r0, [pc, #356]	@ (8009234 <_printf_i+0x238>)
 80090ce:	230a      	movs	r3, #10
 80090d0:	e011      	b.n	80090f6 <_printf_i+0xfa>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	0608      	lsls	r0, r1, #24
 80090d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80090dc:	d402      	bmi.n	80090e4 <_printf_i+0xe8>
 80090de:	0649      	lsls	r1, r1, #25
 80090e0:	bf48      	it	mi
 80090e2:	b2ad      	uxthmi	r5, r5
 80090e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80090e6:	4853      	ldr	r0, [pc, #332]	@ (8009234 <_printf_i+0x238>)
 80090e8:	6033      	str	r3, [r6, #0]
 80090ea:	bf14      	ite	ne
 80090ec:	230a      	movne	r3, #10
 80090ee:	2308      	moveq	r3, #8
 80090f0:	2100      	movs	r1, #0
 80090f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090f6:	6866      	ldr	r6, [r4, #4]
 80090f8:	60a6      	str	r6, [r4, #8]
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	bfa2      	ittt	ge
 80090fe:	6821      	ldrge	r1, [r4, #0]
 8009100:	f021 0104 	bicge.w	r1, r1, #4
 8009104:	6021      	strge	r1, [r4, #0]
 8009106:	b90d      	cbnz	r5, 800910c <_printf_i+0x110>
 8009108:	2e00      	cmp	r6, #0
 800910a:	d04b      	beq.n	80091a4 <_printf_i+0x1a8>
 800910c:	4616      	mov	r6, r2
 800910e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009112:	fb03 5711 	mls	r7, r3, r1, r5
 8009116:	5dc7      	ldrb	r7, [r0, r7]
 8009118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800911c:	462f      	mov	r7, r5
 800911e:	42bb      	cmp	r3, r7
 8009120:	460d      	mov	r5, r1
 8009122:	d9f4      	bls.n	800910e <_printf_i+0x112>
 8009124:	2b08      	cmp	r3, #8
 8009126:	d10b      	bne.n	8009140 <_printf_i+0x144>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	07df      	lsls	r7, r3, #31
 800912c:	d508      	bpl.n	8009140 <_printf_i+0x144>
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	6861      	ldr	r1, [r4, #4]
 8009132:	4299      	cmp	r1, r3
 8009134:	bfde      	ittt	le
 8009136:	2330      	movle	r3, #48	@ 0x30
 8009138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800913c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009140:	1b92      	subs	r2, r2, r6
 8009142:	6122      	str	r2, [r4, #16]
 8009144:	f8cd a000 	str.w	sl, [sp]
 8009148:	464b      	mov	r3, r9
 800914a:	aa03      	add	r2, sp, #12
 800914c:	4621      	mov	r1, r4
 800914e:	4640      	mov	r0, r8
 8009150:	f7ff fee6 	bl	8008f20 <_printf_common>
 8009154:	3001      	adds	r0, #1
 8009156:	d14a      	bne.n	80091ee <_printf_i+0x1f2>
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	b004      	add	sp, #16
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f043 0320 	orr.w	r3, r3, #32
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	4833      	ldr	r0, [pc, #204]	@ (8009238 <_printf_i+0x23c>)
 800916c:	2778      	movs	r7, #120	@ 0x78
 800916e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	6831      	ldr	r1, [r6, #0]
 8009176:	061f      	lsls	r7, r3, #24
 8009178:	f851 5b04 	ldr.w	r5, [r1], #4
 800917c:	d402      	bmi.n	8009184 <_printf_i+0x188>
 800917e:	065f      	lsls	r7, r3, #25
 8009180:	bf48      	it	mi
 8009182:	b2ad      	uxthmi	r5, r5
 8009184:	6031      	str	r1, [r6, #0]
 8009186:	07d9      	lsls	r1, r3, #31
 8009188:	bf44      	itt	mi
 800918a:	f043 0320 	orrmi.w	r3, r3, #32
 800918e:	6023      	strmi	r3, [r4, #0]
 8009190:	b11d      	cbz	r5, 800919a <_printf_i+0x19e>
 8009192:	2310      	movs	r3, #16
 8009194:	e7ac      	b.n	80090f0 <_printf_i+0xf4>
 8009196:	4827      	ldr	r0, [pc, #156]	@ (8009234 <_printf_i+0x238>)
 8009198:	e7e9      	b.n	800916e <_printf_i+0x172>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f023 0320 	bic.w	r3, r3, #32
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	e7f6      	b.n	8009192 <_printf_i+0x196>
 80091a4:	4616      	mov	r6, r2
 80091a6:	e7bd      	b.n	8009124 <_printf_i+0x128>
 80091a8:	6833      	ldr	r3, [r6, #0]
 80091aa:	6825      	ldr	r5, [r4, #0]
 80091ac:	6961      	ldr	r1, [r4, #20]
 80091ae:	1d18      	adds	r0, r3, #4
 80091b0:	6030      	str	r0, [r6, #0]
 80091b2:	062e      	lsls	r6, r5, #24
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	d501      	bpl.n	80091bc <_printf_i+0x1c0>
 80091b8:	6019      	str	r1, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <_printf_i+0x1c6>
 80091bc:	0668      	lsls	r0, r5, #25
 80091be:	d5fb      	bpl.n	80091b8 <_printf_i+0x1bc>
 80091c0:	8019      	strh	r1, [r3, #0]
 80091c2:	2300      	movs	r3, #0
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	4616      	mov	r6, r2
 80091c8:	e7bc      	b.n	8009144 <_printf_i+0x148>
 80091ca:	6833      	ldr	r3, [r6, #0]
 80091cc:	1d1a      	adds	r2, r3, #4
 80091ce:	6032      	str	r2, [r6, #0]
 80091d0:	681e      	ldr	r6, [r3, #0]
 80091d2:	6862      	ldr	r2, [r4, #4]
 80091d4:	2100      	movs	r1, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7f6 fffa 	bl	80001d0 <memchr>
 80091dc:	b108      	cbz	r0, 80091e2 <_printf_i+0x1e6>
 80091de:	1b80      	subs	r0, r0, r6
 80091e0:	6060      	str	r0, [r4, #4]
 80091e2:	6863      	ldr	r3, [r4, #4]
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	2300      	movs	r3, #0
 80091e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ec:	e7aa      	b.n	8009144 <_printf_i+0x148>
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	4632      	mov	r2, r6
 80091f2:	4649      	mov	r1, r9
 80091f4:	4640      	mov	r0, r8
 80091f6:	47d0      	blx	sl
 80091f8:	3001      	adds	r0, #1
 80091fa:	d0ad      	beq.n	8009158 <_printf_i+0x15c>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	079b      	lsls	r3, r3, #30
 8009200:	d413      	bmi.n	800922a <_printf_i+0x22e>
 8009202:	68e0      	ldr	r0, [r4, #12]
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	4298      	cmp	r0, r3
 8009208:	bfb8      	it	lt
 800920a:	4618      	movlt	r0, r3
 800920c:	e7a6      	b.n	800915c <_printf_i+0x160>
 800920e:	2301      	movs	r3, #1
 8009210:	4632      	mov	r2, r6
 8009212:	4649      	mov	r1, r9
 8009214:	4640      	mov	r0, r8
 8009216:	47d0      	blx	sl
 8009218:	3001      	adds	r0, #1
 800921a:	d09d      	beq.n	8009158 <_printf_i+0x15c>
 800921c:	3501      	adds	r5, #1
 800921e:	68e3      	ldr	r3, [r4, #12]
 8009220:	9903      	ldr	r1, [sp, #12]
 8009222:	1a5b      	subs	r3, r3, r1
 8009224:	42ab      	cmp	r3, r5
 8009226:	dcf2      	bgt.n	800920e <_printf_i+0x212>
 8009228:	e7eb      	b.n	8009202 <_printf_i+0x206>
 800922a:	2500      	movs	r5, #0
 800922c:	f104 0619 	add.w	r6, r4, #25
 8009230:	e7f5      	b.n	800921e <_printf_i+0x222>
 8009232:	bf00      	nop
 8009234:	0800c646 	.word	0x0800c646
 8009238:	0800c657 	.word	0x0800c657

0800923c <std>:
 800923c:	2300      	movs	r3, #0
 800923e:	b510      	push	{r4, lr}
 8009240:	4604      	mov	r4, r0
 8009242:	e9c0 3300 	strd	r3, r3, [r0]
 8009246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800924a:	6083      	str	r3, [r0, #8]
 800924c:	8181      	strh	r1, [r0, #12]
 800924e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009250:	81c2      	strh	r2, [r0, #14]
 8009252:	6183      	str	r3, [r0, #24]
 8009254:	4619      	mov	r1, r3
 8009256:	2208      	movs	r2, #8
 8009258:	305c      	adds	r0, #92	@ 0x5c
 800925a:	f000 fa2d 	bl	80096b8 <memset>
 800925e:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <std+0x58>)
 8009260:	6263      	str	r3, [r4, #36]	@ 0x24
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <std+0x5c>)
 8009264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <std+0x60>)
 8009268:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <std+0x64>)
 800926c:	6323      	str	r3, [r4, #48]	@ 0x30
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <std+0x68>)
 8009270:	6224      	str	r4, [r4, #32]
 8009272:	429c      	cmp	r4, r3
 8009274:	d006      	beq.n	8009284 <std+0x48>
 8009276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800927a:	4294      	cmp	r4, r2
 800927c:	d002      	beq.n	8009284 <std+0x48>
 800927e:	33d0      	adds	r3, #208	@ 0xd0
 8009280:	429c      	cmp	r4, r3
 8009282:	d105      	bne.n	8009290 <std+0x54>
 8009284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f000 baa0 	b.w	80097d0 <__retarget_lock_init_recursive>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	08009509 	.word	0x08009509
 8009298:	0800952b 	.word	0x0800952b
 800929c:	08009563 	.word	0x08009563
 80092a0:	08009587 	.word	0x08009587
 80092a4:	20000a14 	.word	0x20000a14

080092a8 <stdio_exit_handler>:
 80092a8:	4a02      	ldr	r2, [pc, #8]	@ (80092b4 <stdio_exit_handler+0xc>)
 80092aa:	4903      	ldr	r1, [pc, #12]	@ (80092b8 <stdio_exit_handler+0x10>)
 80092ac:	4803      	ldr	r0, [pc, #12]	@ (80092bc <stdio_exit_handler+0x14>)
 80092ae:	f000 b869 	b.w	8009384 <_fwalk_sglue>
 80092b2:	bf00      	nop
 80092b4:	2000009c 	.word	0x2000009c
 80092b8:	0800b3d1 	.word	0x0800b3d1
 80092bc:	200000ac 	.word	0x200000ac

080092c0 <cleanup_stdio>:
 80092c0:	6841      	ldr	r1, [r0, #4]
 80092c2:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <cleanup_stdio+0x34>)
 80092c4:	4299      	cmp	r1, r3
 80092c6:	b510      	push	{r4, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	d001      	beq.n	80092d0 <cleanup_stdio+0x10>
 80092cc:	f002 f880 	bl	800b3d0 <_fflush_r>
 80092d0:	68a1      	ldr	r1, [r4, #8]
 80092d2:	4b09      	ldr	r3, [pc, #36]	@ (80092f8 <cleanup_stdio+0x38>)
 80092d4:	4299      	cmp	r1, r3
 80092d6:	d002      	beq.n	80092de <cleanup_stdio+0x1e>
 80092d8:	4620      	mov	r0, r4
 80092da:	f002 f879 	bl	800b3d0 <_fflush_r>
 80092de:	68e1      	ldr	r1, [r4, #12]
 80092e0:	4b06      	ldr	r3, [pc, #24]	@ (80092fc <cleanup_stdio+0x3c>)
 80092e2:	4299      	cmp	r1, r3
 80092e4:	d004      	beq.n	80092f0 <cleanup_stdio+0x30>
 80092e6:	4620      	mov	r0, r4
 80092e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ec:	f002 b870 	b.w	800b3d0 <_fflush_r>
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	20000a14 	.word	0x20000a14
 80092f8:	20000a7c 	.word	0x20000a7c
 80092fc:	20000ae4 	.word	0x20000ae4

08009300 <global_stdio_init.part.0>:
 8009300:	b510      	push	{r4, lr}
 8009302:	4b0b      	ldr	r3, [pc, #44]	@ (8009330 <global_stdio_init.part.0+0x30>)
 8009304:	4c0b      	ldr	r4, [pc, #44]	@ (8009334 <global_stdio_init.part.0+0x34>)
 8009306:	4a0c      	ldr	r2, [pc, #48]	@ (8009338 <global_stdio_init.part.0+0x38>)
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	4620      	mov	r0, r4
 800930c:	2200      	movs	r2, #0
 800930e:	2104      	movs	r1, #4
 8009310:	f7ff ff94 	bl	800923c <std>
 8009314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009318:	2201      	movs	r2, #1
 800931a:	2109      	movs	r1, #9
 800931c:	f7ff ff8e 	bl	800923c <std>
 8009320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009324:	2202      	movs	r2, #2
 8009326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932a:	2112      	movs	r1, #18
 800932c:	f7ff bf86 	b.w	800923c <std>
 8009330:	20000b4c 	.word	0x20000b4c
 8009334:	20000a14 	.word	0x20000a14
 8009338:	080092a9 	.word	0x080092a9

0800933c <__sfp_lock_acquire>:
 800933c:	4801      	ldr	r0, [pc, #4]	@ (8009344 <__sfp_lock_acquire+0x8>)
 800933e:	f000 ba48 	b.w	80097d2 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	20000b55 	.word	0x20000b55

08009348 <__sfp_lock_release>:
 8009348:	4801      	ldr	r0, [pc, #4]	@ (8009350 <__sfp_lock_release+0x8>)
 800934a:	f000 ba43 	b.w	80097d4 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	20000b55 	.word	0x20000b55

08009354 <__sinit>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4604      	mov	r4, r0
 8009358:	f7ff fff0 	bl	800933c <__sfp_lock_acquire>
 800935c:	6a23      	ldr	r3, [r4, #32]
 800935e:	b11b      	cbz	r3, 8009368 <__sinit+0x14>
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f7ff bff0 	b.w	8009348 <__sfp_lock_release>
 8009368:	4b04      	ldr	r3, [pc, #16]	@ (800937c <__sinit+0x28>)
 800936a:	6223      	str	r3, [r4, #32]
 800936c:	4b04      	ldr	r3, [pc, #16]	@ (8009380 <__sinit+0x2c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1f5      	bne.n	8009360 <__sinit+0xc>
 8009374:	f7ff ffc4 	bl	8009300 <global_stdio_init.part.0>
 8009378:	e7f2      	b.n	8009360 <__sinit+0xc>
 800937a:	bf00      	nop
 800937c:	080092c1 	.word	0x080092c1
 8009380:	20000b4c 	.word	0x20000b4c

08009384 <_fwalk_sglue>:
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	4607      	mov	r7, r0
 800938a:	4688      	mov	r8, r1
 800938c:	4614      	mov	r4, r2
 800938e:	2600      	movs	r6, #0
 8009390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009394:	f1b9 0901 	subs.w	r9, r9, #1
 8009398:	d505      	bpl.n	80093a6 <_fwalk_sglue+0x22>
 800939a:	6824      	ldr	r4, [r4, #0]
 800939c:	2c00      	cmp	r4, #0
 800939e:	d1f7      	bne.n	8009390 <_fwalk_sglue+0xc>
 80093a0:	4630      	mov	r0, r6
 80093a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d907      	bls.n	80093bc <_fwalk_sglue+0x38>
 80093ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b0:	3301      	adds	r3, #1
 80093b2:	d003      	beq.n	80093bc <_fwalk_sglue+0x38>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c0      	blx	r8
 80093ba:	4306      	orrs	r6, r0
 80093bc:	3568      	adds	r5, #104	@ 0x68
 80093be:	e7e9      	b.n	8009394 <_fwalk_sglue+0x10>

080093c0 <iprintf>:
 80093c0:	b40f      	push	{r0, r1, r2, r3}
 80093c2:	b507      	push	{r0, r1, r2, lr}
 80093c4:	4906      	ldr	r1, [pc, #24]	@ (80093e0 <iprintf+0x20>)
 80093c6:	ab04      	add	r3, sp, #16
 80093c8:	6808      	ldr	r0, [r1, #0]
 80093ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ce:	6881      	ldr	r1, [r0, #8]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f001 fe61 	bl	800b098 <_vfiprintf_r>
 80093d6:	b003      	add	sp, #12
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b004      	add	sp, #16
 80093de:	4770      	bx	lr
 80093e0:	200000a8 	.word	0x200000a8

080093e4 <_puts_r>:
 80093e4:	6a03      	ldr	r3, [r0, #32]
 80093e6:	b570      	push	{r4, r5, r6, lr}
 80093e8:	6884      	ldr	r4, [r0, #8]
 80093ea:	4605      	mov	r5, r0
 80093ec:	460e      	mov	r6, r1
 80093ee:	b90b      	cbnz	r3, 80093f4 <_puts_r+0x10>
 80093f0:	f7ff ffb0 	bl	8009354 <__sinit>
 80093f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093f6:	07db      	lsls	r3, r3, #31
 80093f8:	d405      	bmi.n	8009406 <_puts_r+0x22>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	0598      	lsls	r0, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_puts_r+0x22>
 8009400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009402:	f000 f9e6 	bl	80097d2 <__retarget_lock_acquire_recursive>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d502      	bpl.n	8009412 <_puts_r+0x2e>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d135      	bne.n	800947e <_puts_r+0x9a>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f8f9 	bl	800960c <__swsetup_r>
 800941a:	b380      	cbz	r0, 800947e <_puts_r+0x9a>
 800941c:	f04f 35ff 	mov.w	r5, #4294967295
 8009420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d405      	bmi.n	8009432 <_puts_r+0x4e>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	059b      	lsls	r3, r3, #22
 800942a:	d402      	bmi.n	8009432 <_puts_r+0x4e>
 800942c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800942e:	f000 f9d1 	bl	80097d4 <__retarget_lock_release_recursive>
 8009432:	4628      	mov	r0, r5
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	2b00      	cmp	r3, #0
 8009438:	da04      	bge.n	8009444 <_puts_r+0x60>
 800943a:	69a2      	ldr	r2, [r4, #24]
 800943c:	429a      	cmp	r2, r3
 800943e:	dc17      	bgt.n	8009470 <_puts_r+0x8c>
 8009440:	290a      	cmp	r1, #10
 8009442:	d015      	beq.n	8009470 <_puts_r+0x8c>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	7019      	strb	r1, [r3, #0]
 800944c:	68a3      	ldr	r3, [r4, #8]
 800944e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009452:	3b01      	subs	r3, #1
 8009454:	60a3      	str	r3, [r4, #8]
 8009456:	2900      	cmp	r1, #0
 8009458:	d1ed      	bne.n	8009436 <_puts_r+0x52>
 800945a:	2b00      	cmp	r3, #0
 800945c:	da11      	bge.n	8009482 <_puts_r+0x9e>
 800945e:	4622      	mov	r2, r4
 8009460:	210a      	movs	r1, #10
 8009462:	4628      	mov	r0, r5
 8009464:	f000 f893 	bl	800958e <__swbuf_r>
 8009468:	3001      	adds	r0, #1
 800946a:	d0d7      	beq.n	800941c <_puts_r+0x38>
 800946c:	250a      	movs	r5, #10
 800946e:	e7d7      	b.n	8009420 <_puts_r+0x3c>
 8009470:	4622      	mov	r2, r4
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f88b 	bl	800958e <__swbuf_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d1e7      	bne.n	800944c <_puts_r+0x68>
 800947c:	e7ce      	b.n	800941c <_puts_r+0x38>
 800947e:	3e01      	subs	r6, #1
 8009480:	e7e4      	b.n	800944c <_puts_r+0x68>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	220a      	movs	r2, #10
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	e7ee      	b.n	800946c <_puts_r+0x88>
	...

08009490 <puts>:
 8009490:	4b02      	ldr	r3, [pc, #8]	@ (800949c <puts+0xc>)
 8009492:	4601      	mov	r1, r0
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f7ff bfa5 	b.w	80093e4 <_puts_r>
 800949a:	bf00      	nop
 800949c:	200000a8 	.word	0x200000a8

080094a0 <sniprintf>:
 80094a0:	b40c      	push	{r2, r3}
 80094a2:	b530      	push	{r4, r5, lr}
 80094a4:	4b17      	ldr	r3, [pc, #92]	@ (8009504 <sniprintf+0x64>)
 80094a6:	1e0c      	subs	r4, r1, #0
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	b09d      	sub	sp, #116	@ 0x74
 80094ac:	da08      	bge.n	80094c0 <sniprintf+0x20>
 80094ae:	238b      	movs	r3, #139	@ 0x8b
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	b01d      	add	sp, #116	@ 0x74
 80094b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094bc:	b002      	add	sp, #8
 80094be:	4770      	bx	lr
 80094c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80094c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094c8:	bf14      	ite	ne
 80094ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094ce:	4623      	moveq	r3, r4
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9307      	str	r3, [sp, #28]
 80094d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094d8:	9002      	str	r0, [sp, #8]
 80094da:	9006      	str	r0, [sp, #24]
 80094dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80094e2:	ab21      	add	r3, sp, #132	@ 0x84
 80094e4:	a902      	add	r1, sp, #8
 80094e6:	4628      	mov	r0, r5
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	f001 fcaf 	bl	800ae4c <_svfiprintf_r>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	bfbc      	itt	lt
 80094f2:	238b      	movlt	r3, #139	@ 0x8b
 80094f4:	602b      	strlt	r3, [r5, #0]
 80094f6:	2c00      	cmp	r4, #0
 80094f8:	d0dd      	beq.n	80094b6 <sniprintf+0x16>
 80094fa:	9b02      	ldr	r3, [sp, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	e7d9      	b.n	80094b6 <sniprintf+0x16>
 8009502:	bf00      	nop
 8009504:	200000a8 	.word	0x200000a8

08009508 <__sread>:
 8009508:	b510      	push	{r4, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009510:	f000 f910 	bl	8009734 <_read_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	bfab      	itete	ge
 8009518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800951a:	89a3      	ldrhlt	r3, [r4, #12]
 800951c:	181b      	addge	r3, r3, r0
 800951e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009522:	bfac      	ite	ge
 8009524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009526:	81a3      	strhlt	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__swrite>:
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	461f      	mov	r7, r3
 8009530:	898b      	ldrh	r3, [r1, #12]
 8009532:	05db      	lsls	r3, r3, #23
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d505      	bpl.n	8009548 <__swrite+0x1e>
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	2302      	movs	r3, #2
 8009542:	2200      	movs	r2, #0
 8009544:	f000 f8e4 	bl	8009710 <_lseek_r>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	f000 b8fb 	b.w	8009758 <_write_r>

08009562 <__sseek>:
 8009562:	b510      	push	{r4, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956a:	f000 f8d1 	bl	8009710 <_lseek_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	bf15      	itete	ne
 8009574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800957a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800957e:	81a3      	strheq	r3, [r4, #12]
 8009580:	bf18      	it	ne
 8009582:	81a3      	strhne	r3, [r4, #12]
 8009584:	bd10      	pop	{r4, pc}

08009586 <__sclose>:
 8009586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958a:	f000 b8b1 	b.w	80096f0 <_close_r>

0800958e <__swbuf_r>:
 800958e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009590:	460e      	mov	r6, r1
 8009592:	4614      	mov	r4, r2
 8009594:	4605      	mov	r5, r0
 8009596:	b118      	cbz	r0, 80095a0 <__swbuf_r+0x12>
 8009598:	6a03      	ldr	r3, [r0, #32]
 800959a:	b90b      	cbnz	r3, 80095a0 <__swbuf_r+0x12>
 800959c:	f7ff feda 	bl	8009354 <__sinit>
 80095a0:	69a3      	ldr	r3, [r4, #24]
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	071a      	lsls	r2, r3, #28
 80095a8:	d501      	bpl.n	80095ae <__swbuf_r+0x20>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	b943      	cbnz	r3, 80095c0 <__swbuf_r+0x32>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f000 f82b 	bl	800960c <__swsetup_r>
 80095b6:	b118      	cbz	r0, 80095c0 <__swbuf_r+0x32>
 80095b8:	f04f 37ff 	mov.w	r7, #4294967295
 80095bc:	4638      	mov	r0, r7
 80095be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	6922      	ldr	r2, [r4, #16]
 80095c4:	1a98      	subs	r0, r3, r2
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	b2f6      	uxtb	r6, r6
 80095ca:	4283      	cmp	r3, r0
 80095cc:	4637      	mov	r7, r6
 80095ce:	dc05      	bgt.n	80095dc <__swbuf_r+0x4e>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f001 fefc 	bl	800b3d0 <_fflush_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1ed      	bne.n	80095b8 <__swbuf_r+0x2a>
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	3b01      	subs	r3, #1
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	701e      	strb	r6, [r3, #0]
 80095ea:	6962      	ldr	r2, [r4, #20]
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d004      	beq.n	80095fc <__swbuf_r+0x6e>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	07db      	lsls	r3, r3, #31
 80095f6:	d5e1      	bpl.n	80095bc <__swbuf_r+0x2e>
 80095f8:	2e0a      	cmp	r6, #10
 80095fa:	d1df      	bne.n	80095bc <__swbuf_r+0x2e>
 80095fc:	4621      	mov	r1, r4
 80095fe:	4628      	mov	r0, r5
 8009600:	f001 fee6 	bl	800b3d0 <_fflush_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	d0d9      	beq.n	80095bc <__swbuf_r+0x2e>
 8009608:	e7d6      	b.n	80095b8 <__swbuf_r+0x2a>
	...

0800960c <__swsetup_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4b29      	ldr	r3, [pc, #164]	@ (80096b4 <__swsetup_r+0xa8>)
 8009610:	4605      	mov	r5, r0
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	460c      	mov	r4, r1
 8009616:	b118      	cbz	r0, 8009620 <__swsetup_r+0x14>
 8009618:	6a03      	ldr	r3, [r0, #32]
 800961a:	b90b      	cbnz	r3, 8009620 <__swsetup_r+0x14>
 800961c:	f7ff fe9a 	bl	8009354 <__sinit>
 8009620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009624:	0719      	lsls	r1, r3, #28
 8009626:	d422      	bmi.n	800966e <__swsetup_r+0x62>
 8009628:	06da      	lsls	r2, r3, #27
 800962a:	d407      	bmi.n	800963c <__swsetup_r+0x30>
 800962c:	2209      	movs	r2, #9
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	f04f 30ff 	mov.w	r0, #4294967295
 800963a:	e033      	b.n	80096a4 <__swsetup_r+0x98>
 800963c:	0758      	lsls	r0, r3, #29
 800963e:	d512      	bpl.n	8009666 <__swsetup_r+0x5a>
 8009640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009642:	b141      	cbz	r1, 8009656 <__swsetup_r+0x4a>
 8009644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009648:	4299      	cmp	r1, r3
 800964a:	d002      	beq.n	8009652 <__swsetup_r+0x46>
 800964c:	4628      	mov	r0, r5
 800964e:	f000 ff1f 	bl	800a490 <_free_r>
 8009652:	2300      	movs	r3, #0
 8009654:	6363      	str	r3, [r4, #52]	@ 0x34
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	2300      	movs	r3, #0
 8009660:	6063      	str	r3, [r4, #4]
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	b94b      	cbnz	r3, 8009686 <__swsetup_r+0x7a>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800967c:	d003      	beq.n	8009686 <__swsetup_r+0x7a>
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f001 fef3 	bl	800b46c <__smakebuf_r>
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	f013 0201 	ands.w	r2, r3, #1
 800968e:	d00a      	beq.n	80096a6 <__swsetup_r+0x9a>
 8009690:	2200      	movs	r2, #0
 8009692:	60a2      	str	r2, [r4, #8]
 8009694:	6962      	ldr	r2, [r4, #20]
 8009696:	4252      	negs	r2, r2
 8009698:	61a2      	str	r2, [r4, #24]
 800969a:	6922      	ldr	r2, [r4, #16]
 800969c:	b942      	cbnz	r2, 80096b0 <__swsetup_r+0xa4>
 800969e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096a2:	d1c5      	bne.n	8009630 <__swsetup_r+0x24>
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
 80096a6:	0799      	lsls	r1, r3, #30
 80096a8:	bf58      	it	pl
 80096aa:	6962      	ldrpl	r2, [r4, #20]
 80096ac:	60a2      	str	r2, [r4, #8]
 80096ae:	e7f4      	b.n	800969a <__swsetup_r+0x8e>
 80096b0:	2000      	movs	r0, #0
 80096b2:	e7f7      	b.n	80096a4 <__swsetup_r+0x98>
 80096b4:	200000a8 	.word	0x200000a8

080096b8 <memset>:
 80096b8:	4402      	add	r2, r0
 80096ba:	4603      	mov	r3, r0
 80096bc:	4293      	cmp	r3, r2
 80096be:	d100      	bne.n	80096c2 <memset+0xa>
 80096c0:	4770      	bx	lr
 80096c2:	f803 1b01 	strb.w	r1, [r3], #1
 80096c6:	e7f9      	b.n	80096bc <memset+0x4>

080096c8 <strcat>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	4602      	mov	r2, r0
 80096cc:	7814      	ldrb	r4, [r2, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	3201      	adds	r2, #1
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d1fa      	bne.n	80096cc <strcat+0x4>
 80096d6:	3b01      	subs	r3, #1
 80096d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	d1f9      	bne.n	80096d8 <strcat+0x10>
 80096e4:	bd10      	pop	{r4, pc}
	...

080096e8 <_localeconv_r>:
 80096e8:	4800      	ldr	r0, [pc, #0]	@ (80096ec <_localeconv_r+0x4>)
 80096ea:	4770      	bx	lr
 80096ec:	200001e8 	.word	0x200001e8

080096f0 <_close_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_close_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 fb1c 	bl	8001d38 <_close>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_close_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_close_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20000b50 	.word	0x20000b50

08009710 <_lseek_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d07      	ldr	r5, [pc, #28]	@ (8009730 <_lseek_r+0x20>)
 8009714:	4604      	mov	r4, r0
 8009716:	4608      	mov	r0, r1
 8009718:	4611      	mov	r1, r2
 800971a:	2200      	movs	r2, #0
 800971c:	602a      	str	r2, [r5, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f7f8 fb31 	bl	8001d86 <_lseek>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_lseek_r+0x1e>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_lseek_r+0x1e>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20000b50 	.word	0x20000b50

08009734 <_read_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d07      	ldr	r5, [pc, #28]	@ (8009754 <_read_r+0x20>)
 8009738:	4604      	mov	r4, r0
 800973a:	4608      	mov	r0, r1
 800973c:	4611      	mov	r1, r2
 800973e:	2200      	movs	r2, #0
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7f8 fabf 	bl	8001cc6 <_read>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_read_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_read_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000b50 	.word	0x20000b50

08009758 <_write_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	@ (8009778 <_write_r+0x20>)
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7f8 faca 	bl	8001d00 <_write>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_write_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_write_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000b50 	.word	0x20000b50

0800977c <__errno>:
 800977c:	4b01      	ldr	r3, [pc, #4]	@ (8009784 <__errno+0x8>)
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	200000a8 	.word	0x200000a8

08009788 <__libc_init_array>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	4d0d      	ldr	r5, [pc, #52]	@ (80097c0 <__libc_init_array+0x38>)
 800978c:	4c0d      	ldr	r4, [pc, #52]	@ (80097c4 <__libc_init_array+0x3c>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	2600      	movs	r6, #0
 8009794:	42a6      	cmp	r6, r4
 8009796:	d109      	bne.n	80097ac <__libc_init_array+0x24>
 8009798:	4d0b      	ldr	r5, [pc, #44]	@ (80097c8 <__libc_init_array+0x40>)
 800979a:	4c0c      	ldr	r4, [pc, #48]	@ (80097cc <__libc_init_array+0x44>)
 800979c:	f001 ffd4 	bl	800b748 <_init>
 80097a0:	1b64      	subs	r4, r4, r5
 80097a2:	10a4      	asrs	r4, r4, #2
 80097a4:	2600      	movs	r6, #0
 80097a6:	42a6      	cmp	r6, r4
 80097a8:	d105      	bne.n	80097b6 <__libc_init_array+0x2e>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b0:	4798      	blx	r3
 80097b2:	3601      	adds	r6, #1
 80097b4:	e7ee      	b.n	8009794 <__libc_init_array+0xc>
 80097b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ba:	4798      	blx	r3
 80097bc:	3601      	adds	r6, #1
 80097be:	e7f2      	b.n	80097a6 <__libc_init_array+0x1e>
 80097c0:	0800c9b0 	.word	0x0800c9b0
 80097c4:	0800c9b0 	.word	0x0800c9b0
 80097c8:	0800c9b0 	.word	0x0800c9b0
 80097cc:	0800c9b4 	.word	0x0800c9b4

080097d0 <__retarget_lock_init_recursive>:
 80097d0:	4770      	bx	lr

080097d2 <__retarget_lock_acquire_recursive>:
 80097d2:	4770      	bx	lr

080097d4 <__retarget_lock_release_recursive>:
 80097d4:	4770      	bx	lr

080097d6 <memcpy>:
 80097d6:	440a      	add	r2, r1
 80097d8:	4291      	cmp	r1, r2
 80097da:	f100 33ff 	add.w	r3, r0, #4294967295
 80097de:	d100      	bne.n	80097e2 <memcpy+0xc>
 80097e0:	4770      	bx	lr
 80097e2:	b510      	push	{r4, lr}
 80097e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ec:	4291      	cmp	r1, r2
 80097ee:	d1f9      	bne.n	80097e4 <memcpy+0xe>
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <quorem>:
 80097f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f6:	6903      	ldr	r3, [r0, #16]
 80097f8:	690c      	ldr	r4, [r1, #16]
 80097fa:	42a3      	cmp	r3, r4
 80097fc:	4607      	mov	r7, r0
 80097fe:	db7e      	blt.n	80098fe <quorem+0x10c>
 8009800:	3c01      	subs	r4, #1
 8009802:	f101 0814 	add.w	r8, r1, #20
 8009806:	00a3      	lsls	r3, r4, #2
 8009808:	f100 0514 	add.w	r5, r0, #20
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800981c:	3301      	adds	r3, #1
 800981e:	429a      	cmp	r2, r3
 8009820:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009824:	fbb2 f6f3 	udiv	r6, r2, r3
 8009828:	d32e      	bcc.n	8009888 <quorem+0x96>
 800982a:	f04f 0a00 	mov.w	sl, #0
 800982e:	46c4      	mov	ip, r8
 8009830:	46ae      	mov	lr, r5
 8009832:	46d3      	mov	fp, sl
 8009834:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009838:	b298      	uxth	r0, r3
 800983a:	fb06 a000 	mla	r0, r6, r0, sl
 800983e:	0c02      	lsrs	r2, r0, #16
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	fb06 2303 	mla	r3, r6, r3, r2
 8009846:	f8de 2000 	ldr.w	r2, [lr]
 800984a:	b280      	uxth	r0, r0
 800984c:	b292      	uxth	r2, r2
 800984e:	1a12      	subs	r2, r2, r0
 8009850:	445a      	add	r2, fp
 8009852:	f8de 0000 	ldr.w	r0, [lr]
 8009856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800985a:	b29b      	uxth	r3, r3
 800985c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009860:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009864:	b292      	uxth	r2, r2
 8009866:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800986a:	45e1      	cmp	r9, ip
 800986c:	f84e 2b04 	str.w	r2, [lr], #4
 8009870:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009874:	d2de      	bcs.n	8009834 <quorem+0x42>
 8009876:	9b00      	ldr	r3, [sp, #0]
 8009878:	58eb      	ldr	r3, [r5, r3]
 800987a:	b92b      	cbnz	r3, 8009888 <quorem+0x96>
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	3b04      	subs	r3, #4
 8009880:	429d      	cmp	r5, r3
 8009882:	461a      	mov	r2, r3
 8009884:	d32f      	bcc.n	80098e6 <quorem+0xf4>
 8009886:	613c      	str	r4, [r7, #16]
 8009888:	4638      	mov	r0, r7
 800988a:	f001 f97b 	bl	800ab84 <__mcmp>
 800988e:	2800      	cmp	r0, #0
 8009890:	db25      	blt.n	80098de <quorem+0xec>
 8009892:	4629      	mov	r1, r5
 8009894:	2000      	movs	r0, #0
 8009896:	f858 2b04 	ldr.w	r2, [r8], #4
 800989a:	f8d1 c000 	ldr.w	ip, [r1]
 800989e:	fa1f fe82 	uxth.w	lr, r2
 80098a2:	fa1f f38c 	uxth.w	r3, ip
 80098a6:	eba3 030e 	sub.w	r3, r3, lr
 80098aa:	4403      	add	r3, r0
 80098ac:	0c12      	lsrs	r2, r2, #16
 80098ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098bc:	45c1      	cmp	r9, r8
 80098be:	f841 3b04 	str.w	r3, [r1], #4
 80098c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098c6:	d2e6      	bcs.n	8009896 <quorem+0xa4>
 80098c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098d0:	b922      	cbnz	r2, 80098dc <quorem+0xea>
 80098d2:	3b04      	subs	r3, #4
 80098d4:	429d      	cmp	r5, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	d30b      	bcc.n	80098f2 <quorem+0x100>
 80098da:	613c      	str	r4, [r7, #16]
 80098dc:	3601      	adds	r6, #1
 80098de:	4630      	mov	r0, r6
 80098e0:	b003      	add	sp, #12
 80098e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	3b04      	subs	r3, #4
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	d1cb      	bne.n	8009886 <quorem+0x94>
 80098ee:	3c01      	subs	r4, #1
 80098f0:	e7c6      	b.n	8009880 <quorem+0x8e>
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	3b04      	subs	r3, #4
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	d1ef      	bne.n	80098da <quorem+0xe8>
 80098fa:	3c01      	subs	r4, #1
 80098fc:	e7ea      	b.n	80098d4 <quorem+0xe2>
 80098fe:	2000      	movs	r0, #0
 8009900:	e7ee      	b.n	80098e0 <quorem+0xee>
 8009902:	0000      	movs	r0, r0
 8009904:	0000      	movs	r0, r0
	...

08009908 <_dtoa_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	69c7      	ldr	r7, [r0, #28]
 800990e:	b099      	sub	sp, #100	@ 0x64
 8009910:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009914:	ec55 4b10 	vmov	r4, r5, d0
 8009918:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800991a:	9109      	str	r1, [sp, #36]	@ 0x24
 800991c:	4683      	mov	fp, r0
 800991e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009920:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009922:	b97f      	cbnz	r7, 8009944 <_dtoa_r+0x3c>
 8009924:	2010      	movs	r0, #16
 8009926:	f000 fdfd 	bl	800a524 <malloc>
 800992a:	4602      	mov	r2, r0
 800992c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009930:	b920      	cbnz	r0, 800993c <_dtoa_r+0x34>
 8009932:	4ba7      	ldr	r3, [pc, #668]	@ (8009bd0 <_dtoa_r+0x2c8>)
 8009934:	21ef      	movs	r1, #239	@ 0xef
 8009936:	48a7      	ldr	r0, [pc, #668]	@ (8009bd4 <_dtoa_r+0x2cc>)
 8009938:	f001 fe20 	bl	800b57c <__assert_func>
 800993c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009940:	6007      	str	r7, [r0, #0]
 8009942:	60c7      	str	r7, [r0, #12]
 8009944:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	b159      	cbz	r1, 8009964 <_dtoa_r+0x5c>
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	604a      	str	r2, [r1, #4]
 8009950:	2301      	movs	r3, #1
 8009952:	4093      	lsls	r3, r2
 8009954:	608b      	str	r3, [r1, #8]
 8009956:	4658      	mov	r0, fp
 8009958:	f000 feda 	bl	800a710 <_Bfree>
 800995c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	1e2b      	subs	r3, r5, #0
 8009966:	bfb9      	ittee	lt
 8009968:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800996c:	9303      	strlt	r3, [sp, #12]
 800996e:	2300      	movge	r3, #0
 8009970:	6033      	strge	r3, [r6, #0]
 8009972:	9f03      	ldr	r7, [sp, #12]
 8009974:	4b98      	ldr	r3, [pc, #608]	@ (8009bd8 <_dtoa_r+0x2d0>)
 8009976:	bfbc      	itt	lt
 8009978:	2201      	movlt	r2, #1
 800997a:	6032      	strlt	r2, [r6, #0]
 800997c:	43bb      	bics	r3, r7
 800997e:	d112      	bne.n	80099a6 <_dtoa_r+0x9e>
 8009980:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009982:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800998c:	4323      	orrs	r3, r4
 800998e:	f000 854d 	beq.w	800a42c <_dtoa_r+0xb24>
 8009992:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009994:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009bec <_dtoa_r+0x2e4>
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 854f 	beq.w	800a43c <_dtoa_r+0xb34>
 800999e:	f10a 0303 	add.w	r3, sl, #3
 80099a2:	f000 bd49 	b.w	800a438 <_dtoa_r+0xb30>
 80099a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	ec51 0b17 	vmov	r0, r1, d7
 80099b0:	2300      	movs	r3, #0
 80099b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80099b6:	f7f7 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ba:	4680      	mov	r8, r0
 80099bc:	b158      	cbz	r0, 80099d6 <_dtoa_r+0xce>
 80099be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099c0:	2301      	movs	r3, #1
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099c6:	b113      	cbz	r3, 80099ce <_dtoa_r+0xc6>
 80099c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099ca:	4b84      	ldr	r3, [pc, #528]	@ (8009bdc <_dtoa_r+0x2d4>)
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009bf0 <_dtoa_r+0x2e8>
 80099d2:	f000 bd33 	b.w	800a43c <_dtoa_r+0xb34>
 80099d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099da:	aa16      	add	r2, sp, #88	@ 0x58
 80099dc:	a917      	add	r1, sp, #92	@ 0x5c
 80099de:	4658      	mov	r0, fp
 80099e0:	f001 f980 	bl	800ace4 <__d2b>
 80099e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099e8:	4681      	mov	r9, r0
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	d077      	beq.n	8009ade <_dtoa_r+0x1d6>
 80099ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80099f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a08:	4619      	mov	r1, r3
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4b74      	ldr	r3, [pc, #464]	@ (8009be0 <_dtoa_r+0x2d8>)
 8009a0e:	f7f6 fc3b 	bl	8000288 <__aeabi_dsub>
 8009a12:	a369      	add	r3, pc, #420	@ (adr r3, 8009bb8 <_dtoa_r+0x2b0>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	a368      	add	r3, pc, #416	@ (adr r3, 8009bc0 <_dtoa_r+0x2b8>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc33 	bl	800028c <__adddf3>
 8009a26:	4604      	mov	r4, r0
 8009a28:	4630      	mov	r0, r6
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	f7f6 fd7a 	bl	8000524 <__aeabi_i2d>
 8009a30:	a365      	add	r3, pc, #404	@ (adr r3, 8009bc8 <_dtoa_r+0x2c0>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fc23 	bl	800028c <__adddf3>
 8009a46:	4604      	mov	r4, r0
 8009a48:	460d      	mov	r5, r1
 8009a4a:	f7f7 f885 	bl	8000b58 <__aeabi_d2iz>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4607      	mov	r7, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f7 f840 	bl	8000adc <__aeabi_dcmplt>
 8009a5c:	b140      	cbz	r0, 8009a70 <_dtoa_r+0x168>
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7f6 fd60 	bl	8000524 <__aeabi_i2d>
 8009a64:	4622      	mov	r2, r4
 8009a66:	462b      	mov	r3, r5
 8009a68:	f7f7 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a6c:	b900      	cbnz	r0, 8009a70 <_dtoa_r+0x168>
 8009a6e:	3f01      	subs	r7, #1
 8009a70:	2f16      	cmp	r7, #22
 8009a72:	d851      	bhi.n	8009b18 <_dtoa_r+0x210>
 8009a74:	4b5b      	ldr	r3, [pc, #364]	@ (8009be4 <_dtoa_r+0x2dc>)
 8009a76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a82:	f7f7 f82b 	bl	8000adc <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d048      	beq.n	8009b1c <_dtoa_r+0x214>
 8009a8a:	3f01      	subs	r7, #1
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a92:	1b9b      	subs	r3, r3, r6
 8009a94:	1e5a      	subs	r2, r3, #1
 8009a96:	bf44      	itt	mi
 8009a98:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a9c:	2300      	movmi	r3, #0
 8009a9e:	9208      	str	r2, [sp, #32]
 8009aa0:	bf54      	ite	pl
 8009aa2:	f04f 0800 	movpl.w	r8, #0
 8009aa6:	9308      	strmi	r3, [sp, #32]
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	db39      	blt.n	8009b20 <_dtoa_r+0x218>
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ab0:	443b      	add	r3, r7
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d864      	bhi.n	8009b88 <_dtoa_r+0x280>
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	bfc4      	itt	gt
 8009ac2:	3b04      	subgt	r3, #4
 8009ac4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	f1a3 0302 	sub.w	r3, r3, #2
 8009acc:	bfcc      	ite	gt
 8009ace:	2400      	movgt	r4, #0
 8009ad0:	2401      	movle	r4, #1
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d863      	bhi.n	8009b9e <_dtoa_r+0x296>
 8009ad6:	e8df f003 	tbb	[pc, r3]
 8009ada:	372a      	.short	0x372a
 8009adc:	5535      	.short	0x5535
 8009ade:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009ae2:	441e      	add	r6, r3
 8009ae4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	bfc1      	itttt	gt
 8009aec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009af0:	409f      	lslgt	r7, r3
 8009af2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009af6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009afa:	bfd6      	itet	le
 8009afc:	f1c3 0320 	rsble	r3, r3, #32
 8009b00:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b04:	fa04 f003 	lslle.w	r0, r4, r3
 8009b08:	f7f6 fcfc 	bl	8000504 <__aeabi_ui2d>
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b12:	3e01      	subs	r6, #1
 8009b14:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b16:	e777      	b.n	8009a08 <_dtoa_r+0x100>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7b8      	b.n	8009a8e <_dtoa_r+0x186>
 8009b1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b1e:	e7b7      	b.n	8009a90 <_dtoa_r+0x188>
 8009b20:	427b      	negs	r3, r7
 8009b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b24:	2300      	movs	r3, #0
 8009b26:	eba8 0807 	sub.w	r8, r8, r7
 8009b2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b2c:	e7c4      	b.n	8009ab8 <_dtoa_r+0x1b0>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dc35      	bgt.n	8009ba4 <_dtoa_r+0x29c>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	9307      	str	r3, [sp, #28]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b42:	e00b      	b.n	8009b5c <_dtoa_r+0x254>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7f3      	b.n	8009b30 <_dtoa_r+0x228>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	bfb8      	it	lt
 8009b5a:	2301      	movlt	r3, #1
 8009b5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b60:	2100      	movs	r1, #0
 8009b62:	2204      	movs	r2, #4
 8009b64:	f102 0514 	add.w	r5, r2, #20
 8009b68:	429d      	cmp	r5, r3
 8009b6a:	d91f      	bls.n	8009bac <_dtoa_r+0x2a4>
 8009b6c:	6041      	str	r1, [r0, #4]
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 fd8e 	bl	800a690 <_Balloc>
 8009b74:	4682      	mov	sl, r0
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d13c      	bne.n	8009bf4 <_dtoa_r+0x2ec>
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009be8 <_dtoa_r+0x2e0>)
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b82:	e6d8      	b.n	8009936 <_dtoa_r+0x2e>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e7e0      	b.n	8009b4a <_dtoa_r+0x242>
 8009b88:	2401      	movs	r4, #1
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2312      	movs	r3, #18
 8009b9c:	e7d0      	b.n	8009b40 <_dtoa_r+0x238>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ba2:	e7f5      	b.n	8009b90 <_dtoa_r+0x288>
 8009ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	9307      	str	r3, [sp, #28]
 8009baa:	e7d7      	b.n	8009b5c <_dtoa_r+0x254>
 8009bac:	3101      	adds	r1, #1
 8009bae:	0052      	lsls	r2, r2, #1
 8009bb0:	e7d8      	b.n	8009b64 <_dtoa_r+0x25c>
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	636f4361 	.word	0x636f4361
 8009bbc:	3fd287a7 	.word	0x3fd287a7
 8009bc0:	8b60c8b3 	.word	0x8b60c8b3
 8009bc4:	3fc68a28 	.word	0x3fc68a28
 8009bc8:	509f79fb 	.word	0x509f79fb
 8009bcc:	3fd34413 	.word	0x3fd34413
 8009bd0:	0800c675 	.word	0x0800c675
 8009bd4:	0800c68c 	.word	0x0800c68c
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	0800c645 	.word	0x0800c645
 8009be0:	3ff80000 	.word	0x3ff80000
 8009be4:	0800c788 	.word	0x0800c788
 8009be8:	0800c6e4 	.word	0x0800c6e4
 8009bec:	0800c671 	.word	0x0800c671
 8009bf0:	0800c644 	.word	0x0800c644
 8009bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bf8:	6018      	str	r0, [r3, #0]
 8009bfa:	9b07      	ldr	r3, [sp, #28]
 8009bfc:	2b0e      	cmp	r3, #14
 8009bfe:	f200 80a4 	bhi.w	8009d4a <_dtoa_r+0x442>
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	f000 80a1 	beq.w	8009d4a <_dtoa_r+0x442>
 8009c08:	2f00      	cmp	r7, #0
 8009c0a:	dd33      	ble.n	8009c74 <_dtoa_r+0x36c>
 8009c0c:	4bad      	ldr	r3, [pc, #692]	@ (8009ec4 <_dtoa_r+0x5bc>)
 8009c0e:	f007 020f 	and.w	r2, r7, #15
 8009c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c16:	ed93 7b00 	vldr	d7, [r3]
 8009c1a:	05f8      	lsls	r0, r7, #23
 8009c1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c24:	d516      	bpl.n	8009c54 <_dtoa_r+0x34c>
 8009c26:	4ba8      	ldr	r3, [pc, #672]	@ (8009ec8 <_dtoa_r+0x5c0>)
 8009c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c30:	f7f6 fe0c 	bl	800084c <__aeabi_ddiv>
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	f004 040f 	and.w	r4, r4, #15
 8009c3c:	2603      	movs	r6, #3
 8009c3e:	4da2      	ldr	r5, [pc, #648]	@ (8009ec8 <_dtoa_r+0x5c0>)
 8009c40:	b954      	cbnz	r4, 8009c58 <_dtoa_r+0x350>
 8009c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4a:	f7f6 fdff 	bl	800084c <__aeabi_ddiv>
 8009c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c52:	e028      	b.n	8009ca6 <_dtoa_r+0x39e>
 8009c54:	2602      	movs	r6, #2
 8009c56:	e7f2      	b.n	8009c3e <_dtoa_r+0x336>
 8009c58:	07e1      	lsls	r1, r4, #31
 8009c5a:	d508      	bpl.n	8009c6e <_dtoa_r+0x366>
 8009c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c64:	f7f6 fcc8 	bl	80005f8 <__aeabi_dmul>
 8009c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	1064      	asrs	r4, r4, #1
 8009c70:	3508      	adds	r5, #8
 8009c72:	e7e5      	b.n	8009c40 <_dtoa_r+0x338>
 8009c74:	f000 80d2 	beq.w	8009e1c <_dtoa_r+0x514>
 8009c78:	427c      	negs	r4, r7
 8009c7a:	4b92      	ldr	r3, [pc, #584]	@ (8009ec4 <_dtoa_r+0x5bc>)
 8009c7c:	4d92      	ldr	r5, [pc, #584]	@ (8009ec8 <_dtoa_r+0x5c0>)
 8009c7e:	f004 020f 	and.w	r2, r4, #15
 8009c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c8e:	f7f6 fcb3 	bl	80005f8 <__aeabi_dmul>
 8009c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c96:	1124      	asrs	r4, r4, #4
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2602      	movs	r6, #2
 8009c9c:	2c00      	cmp	r4, #0
 8009c9e:	f040 80b2 	bne.w	8009e06 <_dtoa_r+0x4fe>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1d3      	bne.n	8009c4e <_dtoa_r+0x346>
 8009ca6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ca8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 80b7 	beq.w	8009e20 <_dtoa_r+0x518>
 8009cb2:	4b86      	ldr	r3, [pc, #536]	@ (8009ecc <_dtoa_r+0x5c4>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7f6 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f000 80ae 	beq.w	8009e20 <_dtoa_r+0x518>
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80aa 	beq.w	8009e20 <_dtoa_r+0x518>
 8009ccc:	9b00      	ldr	r3, [sp, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dd37      	ble.n	8009d42 <_dtoa_r+0x43a>
 8009cd2:	1e7b      	subs	r3, r7, #1
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ed0 <_dtoa_r+0x5c8>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 fc8b 	bl	80005f8 <__aeabi_dmul>
 8009ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce6:	9c00      	ldr	r4, [sp, #0]
 8009ce8:	3601      	adds	r6, #1
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7f6 fc1a 	bl	8000524 <__aeabi_i2d>
 8009cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cf4:	f7f6 fc80 	bl	80005f8 <__aeabi_dmul>
 8009cf8:	4b76      	ldr	r3, [pc, #472]	@ (8009ed4 <_dtoa_r+0x5cc>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4605      	mov	r5, r0
 8009d02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	f040 808d 	bne.w	8009e26 <_dtoa_r+0x51e>
 8009d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d10:	4b71      	ldr	r3, [pc, #452]	@ (8009ed8 <_dtoa_r+0x5d0>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	f7f6 fab8 	bl	8000288 <__aeabi_dsub>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d20:	462a      	mov	r2, r5
 8009d22:	4633      	mov	r3, r6
 8009d24:	f7f6 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f040 828b 	bne.w	800a244 <_dtoa_r+0x93c>
 8009d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d32:	462a      	mov	r2, r5
 8009d34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d38:	f7f6 fed0 	bl	8000adc <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f040 8128 	bne.w	8009f92 <_dtoa_r+0x68a>
 8009d42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f2c0 815a 	blt.w	800a006 <_dtoa_r+0x6fe>
 8009d52:	2f0e      	cmp	r7, #14
 8009d54:	f300 8157 	bgt.w	800a006 <_dtoa_r+0x6fe>
 8009d58:	4b5a      	ldr	r3, [pc, #360]	@ (8009ec4 <_dtoa_r+0x5bc>)
 8009d5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d5e:	ed93 7b00 	vldr	d7, [r3]
 8009d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	ed8d 7b00 	vstr	d7, [sp]
 8009d6a:	da03      	bge.n	8009d74 <_dtoa_r+0x46c>
 8009d6c:	9b07      	ldr	r3, [sp, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f340 8101 	ble.w	8009f76 <_dtoa_r+0x66e>
 8009d74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d78:	4656      	mov	r6, sl
 8009d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 fd63 	bl	800084c <__aeabi_ddiv>
 8009d86:	f7f6 fee7 	bl	8000b58 <__aeabi_d2iz>
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	f7f6 fbca 	bl	8000524 <__aeabi_i2d>
 8009d90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	f806 4b01 	strb.w	r4, [r6], #1
 8009dac:	9d07      	ldr	r5, [sp, #28]
 8009dae:	eba6 040a 	sub.w	r4, r6, sl
 8009db2:	42a5      	cmp	r5, r4
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	f040 8117 	bne.w	8009fea <_dtoa_r+0x6e2>
 8009dbc:	f7f6 fa66 	bl	800028c <__adddf3>
 8009dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	f7f6 fea6 	bl	8000b18 <__aeabi_dcmpgt>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	f040 80f9 	bne.w	8009fc4 <_dtoa_r+0x6bc>
 8009dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dde:	b118      	cbz	r0, 8009de8 <_dtoa_r+0x4e0>
 8009de0:	f018 0f01 	tst.w	r8, #1
 8009de4:	f040 80ee 	bne.w	8009fc4 <_dtoa_r+0x6bc>
 8009de8:	4649      	mov	r1, r9
 8009dea:	4658      	mov	r0, fp
 8009dec:	f000 fc90 	bl	800a710 <_Bfree>
 8009df0:	2300      	movs	r3, #0
 8009df2:	7033      	strb	r3, [r6, #0]
 8009df4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009df6:	3701      	adds	r7, #1
 8009df8:	601f      	str	r7, [r3, #0]
 8009dfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 831d 	beq.w	800a43c <_dtoa_r+0xb34>
 8009e02:	601e      	str	r6, [r3, #0]
 8009e04:	e31a      	b.n	800a43c <_dtoa_r+0xb34>
 8009e06:	07e2      	lsls	r2, r4, #31
 8009e08:	d505      	bpl.n	8009e16 <_dtoa_r+0x50e>
 8009e0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e0e:	f7f6 fbf3 	bl	80005f8 <__aeabi_dmul>
 8009e12:	3601      	adds	r6, #1
 8009e14:	2301      	movs	r3, #1
 8009e16:	1064      	asrs	r4, r4, #1
 8009e18:	3508      	adds	r5, #8
 8009e1a:	e73f      	b.n	8009c9c <_dtoa_r+0x394>
 8009e1c:	2602      	movs	r6, #2
 8009e1e:	e742      	b.n	8009ca6 <_dtoa_r+0x39e>
 8009e20:	9c07      	ldr	r4, [sp, #28]
 8009e22:	9704      	str	r7, [sp, #16]
 8009e24:	e761      	b.n	8009cea <_dtoa_r+0x3e2>
 8009e26:	4b27      	ldr	r3, [pc, #156]	@ (8009ec4 <_dtoa_r+0x5bc>)
 8009e28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e32:	4454      	add	r4, sl
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d053      	beq.n	8009ee0 <_dtoa_r+0x5d8>
 8009e38:	4928      	ldr	r1, [pc, #160]	@ (8009edc <_dtoa_r+0x5d4>)
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	f7f6 fd06 	bl	800084c <__aeabi_ddiv>
 8009e40:	4633      	mov	r3, r6
 8009e42:	462a      	mov	r2, r5
 8009e44:	f7f6 fa20 	bl	8000288 <__aeabi_dsub>
 8009e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e4c:	4656      	mov	r6, sl
 8009e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e52:	f7f6 fe81 	bl	8000b58 <__aeabi_d2iz>
 8009e56:	4605      	mov	r5, r0
 8009e58:	f7f6 fb64 	bl	8000524 <__aeabi_i2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e64:	f7f6 fa10 	bl	8000288 <__aeabi_dsub>
 8009e68:	3530      	adds	r5, #48	@ 0x30
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e72:	f806 5b01 	strb.w	r5, [r6], #1
 8009e76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e7a:	f7f6 fe2f 	bl	8000adc <__aeabi_dcmplt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d171      	bne.n	8009f66 <_dtoa_r+0x65e>
 8009e82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e86:	4911      	ldr	r1, [pc, #68]	@ (8009ecc <_dtoa_r+0x5c4>)
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f7f6 f9fd 	bl	8000288 <__aeabi_dsub>
 8009e8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e92:	f7f6 fe23 	bl	8000adc <__aeabi_dcmplt>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	f040 8095 	bne.w	8009fc6 <_dtoa_r+0x6be>
 8009e9c:	42a6      	cmp	r6, r4
 8009e9e:	f43f af50 	beq.w	8009d42 <_dtoa_r+0x43a>
 8009ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed0 <_dtoa_r+0x5c8>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f7f6 fba5 	bl	80005f8 <__aeabi_dmul>
 8009eae:	4b08      	ldr	r3, [pc, #32]	@ (8009ed0 <_dtoa_r+0x5c8>)
 8009eb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec2:	e7c4      	b.n	8009e4e <_dtoa_r+0x546>
 8009ec4:	0800c788 	.word	0x0800c788
 8009ec8:	0800c760 	.word	0x0800c760
 8009ecc:	3ff00000 	.word	0x3ff00000
 8009ed0:	40240000 	.word	0x40240000
 8009ed4:	401c0000 	.word	0x401c0000
 8009ed8:	40140000 	.word	0x40140000
 8009edc:	3fe00000 	.word	0x3fe00000
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009eec:	9415      	str	r4, [sp, #84]	@ 0x54
 8009eee:	4656      	mov	r6, sl
 8009ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ef4:	f7f6 fe30 	bl	8000b58 <__aeabi_d2iz>
 8009ef8:	4605      	mov	r5, r0
 8009efa:	f7f6 fb13 	bl	8000524 <__aeabi_i2d>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f06:	f7f6 f9bf 	bl	8000288 <__aeabi_dsub>
 8009f0a:	3530      	adds	r5, #48	@ 0x30
 8009f0c:	f806 5b01 	strb.w	r5, [r6], #1
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	42a6      	cmp	r6, r4
 8009f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	d124      	bne.n	8009f6a <_dtoa_r+0x662>
 8009f20:	4bac      	ldr	r3, [pc, #688]	@ (800a1d4 <_dtoa_r+0x8cc>)
 8009f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f26:	f7f6 f9b1 	bl	800028c <__adddf3>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f32:	f7f6 fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d145      	bne.n	8009fc6 <_dtoa_r+0x6be>
 8009f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f3e:	49a5      	ldr	r1, [pc, #660]	@ (800a1d4 <_dtoa_r+0x8cc>)
 8009f40:	2000      	movs	r0, #0
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f4e:	f7f6 fdc5 	bl	8000adc <__aeabi_dcmplt>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f43f aef5 	beq.w	8009d42 <_dtoa_r+0x43a>
 8009f58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f5a:	1e73      	subs	r3, r6, #1
 8009f5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f62:	2b30      	cmp	r3, #48	@ 0x30
 8009f64:	d0f8      	beq.n	8009f58 <_dtoa_r+0x650>
 8009f66:	9f04      	ldr	r7, [sp, #16]
 8009f68:	e73e      	b.n	8009de8 <_dtoa_r+0x4e0>
 8009f6a:	4b9b      	ldr	r3, [pc, #620]	@ (800a1d8 <_dtoa_r+0x8d0>)
 8009f6c:	f7f6 fb44 	bl	80005f8 <__aeabi_dmul>
 8009f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f74:	e7bc      	b.n	8009ef0 <_dtoa_r+0x5e8>
 8009f76:	d10c      	bne.n	8009f92 <_dtoa_r+0x68a>
 8009f78:	4b98      	ldr	r3, [pc, #608]	@ (800a1dc <_dtoa_r+0x8d4>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f88:	f7f6 fdbc 	bl	8000b04 <__aeabi_dcmpge>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f000 8157 	beq.w	800a240 <_dtoa_r+0x938>
 8009f92:	2400      	movs	r4, #0
 8009f94:	4625      	mov	r5, r4
 8009f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	9304      	str	r3, [sp, #16]
 8009f9c:	4656      	mov	r6, sl
 8009f9e:	2700      	movs	r7, #0
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4658      	mov	r0, fp
 8009fa4:	f000 fbb4 	bl	800a710 <_Bfree>
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	d0dc      	beq.n	8009f66 <_dtoa_r+0x65e>
 8009fac:	b12f      	cbz	r7, 8009fba <_dtoa_r+0x6b2>
 8009fae:	42af      	cmp	r7, r5
 8009fb0:	d003      	beq.n	8009fba <_dtoa_r+0x6b2>
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f000 fbab 	bl	800a710 <_Bfree>
 8009fba:	4629      	mov	r1, r5
 8009fbc:	4658      	mov	r0, fp
 8009fbe:	f000 fba7 	bl	800a710 <_Bfree>
 8009fc2:	e7d0      	b.n	8009f66 <_dtoa_r+0x65e>
 8009fc4:	9704      	str	r7, [sp, #16]
 8009fc6:	4633      	mov	r3, r6
 8009fc8:	461e      	mov	r6, r3
 8009fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fce:	2a39      	cmp	r2, #57	@ 0x39
 8009fd0:	d107      	bne.n	8009fe2 <_dtoa_r+0x6da>
 8009fd2:	459a      	cmp	sl, r3
 8009fd4:	d1f8      	bne.n	8009fc8 <_dtoa_r+0x6c0>
 8009fd6:	9a04      	ldr	r2, [sp, #16]
 8009fd8:	3201      	adds	r2, #1
 8009fda:	9204      	str	r2, [sp, #16]
 8009fdc:	2230      	movs	r2, #48	@ 0x30
 8009fde:	f88a 2000 	strb.w	r2, [sl]
 8009fe2:	781a      	ldrb	r2, [r3, #0]
 8009fe4:	3201      	adds	r2, #1
 8009fe6:	701a      	strb	r2, [r3, #0]
 8009fe8:	e7bd      	b.n	8009f66 <_dtoa_r+0x65e>
 8009fea:	4b7b      	ldr	r3, [pc, #492]	@ (800a1d8 <_dtoa_r+0x8d0>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	f7f6 fb03 	bl	80005f8 <__aeabi_dmul>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	f7f6 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	f43f aebb 	beq.w	8009d7a <_dtoa_r+0x472>
 800a004:	e6f0      	b.n	8009de8 <_dtoa_r+0x4e0>
 800a006:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a008:	2a00      	cmp	r2, #0
 800a00a:	f000 80db 	beq.w	800a1c4 <_dtoa_r+0x8bc>
 800a00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a010:	2a01      	cmp	r2, #1
 800a012:	f300 80bf 	bgt.w	800a194 <_dtoa_r+0x88c>
 800a016:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a018:	2a00      	cmp	r2, #0
 800a01a:	f000 80b7 	beq.w	800a18c <_dtoa_r+0x884>
 800a01e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a022:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a024:	4646      	mov	r6, r8
 800a026:	9a08      	ldr	r2, [sp, #32]
 800a028:	2101      	movs	r1, #1
 800a02a:	441a      	add	r2, r3
 800a02c:	4658      	mov	r0, fp
 800a02e:	4498      	add	r8, r3
 800a030:	9208      	str	r2, [sp, #32]
 800a032:	f000 fc21 	bl	800a878 <__i2b>
 800a036:	4605      	mov	r5, r0
 800a038:	b15e      	cbz	r6, 800a052 <_dtoa_r+0x74a>
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd08      	ble.n	800a052 <_dtoa_r+0x74a>
 800a040:	42b3      	cmp	r3, r6
 800a042:	9a08      	ldr	r2, [sp, #32]
 800a044:	bfa8      	it	ge
 800a046:	4633      	movge	r3, r6
 800a048:	eba8 0803 	sub.w	r8, r8, r3
 800a04c:	1af6      	subs	r6, r6, r3
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	9308      	str	r3, [sp, #32]
 800a052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a054:	b1f3      	cbz	r3, 800a094 <_dtoa_r+0x78c>
 800a056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80b7 	beq.w	800a1cc <_dtoa_r+0x8c4>
 800a05e:	b18c      	cbz	r4, 800a084 <_dtoa_r+0x77c>
 800a060:	4629      	mov	r1, r5
 800a062:	4622      	mov	r2, r4
 800a064:	4658      	mov	r0, fp
 800a066:	f000 fcc7 	bl	800a9f8 <__pow5mult>
 800a06a:	464a      	mov	r2, r9
 800a06c:	4601      	mov	r1, r0
 800a06e:	4605      	mov	r5, r0
 800a070:	4658      	mov	r0, fp
 800a072:	f000 fc17 	bl	800a8a4 <__multiply>
 800a076:	4649      	mov	r1, r9
 800a078:	9004      	str	r0, [sp, #16]
 800a07a:	4658      	mov	r0, fp
 800a07c:	f000 fb48 	bl	800a710 <_Bfree>
 800a080:	9b04      	ldr	r3, [sp, #16]
 800a082:	4699      	mov	r9, r3
 800a084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a086:	1b1a      	subs	r2, r3, r4
 800a088:	d004      	beq.n	800a094 <_dtoa_r+0x78c>
 800a08a:	4649      	mov	r1, r9
 800a08c:	4658      	mov	r0, fp
 800a08e:	f000 fcb3 	bl	800a9f8 <__pow5mult>
 800a092:	4681      	mov	r9, r0
 800a094:	2101      	movs	r1, #1
 800a096:	4658      	mov	r0, fp
 800a098:	f000 fbee 	bl	800a878 <__i2b>
 800a09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a09e:	4604      	mov	r4, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81cf 	beq.w	800a444 <_dtoa_r+0xb3c>
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4601      	mov	r1, r0
 800a0aa:	4658      	mov	r0, fp
 800a0ac:	f000 fca4 	bl	800a9f8 <__pow5mult>
 800a0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	f300 8095 	bgt.w	800a1e4 <_dtoa_r+0x8dc>
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 8087 	bne.w	800a1d0 <_dtoa_r+0x8c8>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f040 8089 	bne.w	800a1e0 <_dtoa_r+0x8d8>
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0d4:	0d1b      	lsrs	r3, r3, #20
 800a0d6:	051b      	lsls	r3, r3, #20
 800a0d8:	b12b      	cbz	r3, 800a0e6 <_dtoa_r+0x7de>
 800a0da:	9b08      	ldr	r3, [sp, #32]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	9308      	str	r3, [sp, #32]
 800a0e0:	f108 0801 	add.w	r8, r8, #1
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 81b0 	beq.w	800a450 <_dtoa_r+0xb48>
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0f6:	6918      	ldr	r0, [r3, #16]
 800a0f8:	f000 fb72 	bl	800a7e0 <__hi0bits>
 800a0fc:	f1c0 0020 	rsb	r0, r0, #32
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	4418      	add	r0, r3
 800a104:	f010 001f 	ands.w	r0, r0, #31
 800a108:	d077      	beq.n	800a1fa <_dtoa_r+0x8f2>
 800a10a:	f1c0 0320 	rsb	r3, r0, #32
 800a10e:	2b04      	cmp	r3, #4
 800a110:	dd6b      	ble.n	800a1ea <_dtoa_r+0x8e2>
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	f1c0 001c 	rsb	r0, r0, #28
 800a118:	4403      	add	r3, r0
 800a11a:	4480      	add	r8, r0
 800a11c:	4406      	add	r6, r0
 800a11e:	9308      	str	r3, [sp, #32]
 800a120:	f1b8 0f00 	cmp.w	r8, #0
 800a124:	dd05      	ble.n	800a132 <_dtoa_r+0x82a>
 800a126:	4649      	mov	r1, r9
 800a128:	4642      	mov	r2, r8
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 fcbe 	bl	800aaac <__lshift>
 800a130:	4681      	mov	r9, r0
 800a132:	9b08      	ldr	r3, [sp, #32]
 800a134:	2b00      	cmp	r3, #0
 800a136:	dd05      	ble.n	800a144 <_dtoa_r+0x83c>
 800a138:	4621      	mov	r1, r4
 800a13a:	461a      	mov	r2, r3
 800a13c:	4658      	mov	r0, fp
 800a13e:	f000 fcb5 	bl	800aaac <__lshift>
 800a142:	4604      	mov	r4, r0
 800a144:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a146:	2b00      	cmp	r3, #0
 800a148:	d059      	beq.n	800a1fe <_dtoa_r+0x8f6>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4648      	mov	r0, r9
 800a14e:	f000 fd19 	bl	800ab84 <__mcmp>
 800a152:	2800      	cmp	r0, #0
 800a154:	da53      	bge.n	800a1fe <_dtoa_r+0x8f6>
 800a156:	1e7b      	subs	r3, r7, #1
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	4649      	mov	r1, r9
 800a15c:	2300      	movs	r3, #0
 800a15e:	220a      	movs	r2, #10
 800a160:	4658      	mov	r0, fp
 800a162:	f000 faf7 	bl	800a754 <__multadd>
 800a166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a168:	4681      	mov	r9, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 8172 	beq.w	800a454 <_dtoa_r+0xb4c>
 800a170:	2300      	movs	r3, #0
 800a172:	4629      	mov	r1, r5
 800a174:	220a      	movs	r2, #10
 800a176:	4658      	mov	r0, fp
 800a178:	f000 faec 	bl	800a754 <__multadd>
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	4605      	mov	r5, r0
 800a182:	dc67      	bgt.n	800a254 <_dtoa_r+0x94c>
 800a184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a186:	2b02      	cmp	r3, #2
 800a188:	dc41      	bgt.n	800a20e <_dtoa_r+0x906>
 800a18a:	e063      	b.n	800a254 <_dtoa_r+0x94c>
 800a18c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a18e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a192:	e746      	b.n	800a022 <_dtoa_r+0x71a>
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	1e5c      	subs	r4, r3, #1
 800a198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19a:	42a3      	cmp	r3, r4
 800a19c:	bfbf      	itttt	lt
 800a19e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a1a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1a4:	1ae3      	sublt	r3, r4, r3
 800a1a6:	bfb4      	ite	lt
 800a1a8:	18d2      	addlt	r2, r2, r3
 800a1aa:	1b1c      	subge	r4, r3, r4
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	bfbc      	itt	lt
 800a1b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a1b2:	2400      	movlt	r4, #0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	bfb5      	itete	lt
 800a1b8:	eba8 0603 	sublt.w	r6, r8, r3
 800a1bc:	9b07      	ldrge	r3, [sp, #28]
 800a1be:	2300      	movlt	r3, #0
 800a1c0:	4646      	movge	r6, r8
 800a1c2:	e730      	b.n	800a026 <_dtoa_r+0x71e>
 800a1c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a1c8:	4646      	mov	r6, r8
 800a1ca:	e735      	b.n	800a038 <_dtoa_r+0x730>
 800a1cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1ce:	e75c      	b.n	800a08a <_dtoa_r+0x782>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e788      	b.n	800a0e6 <_dtoa_r+0x7de>
 800a1d4:	3fe00000 	.word	0x3fe00000
 800a1d8:	40240000 	.word	0x40240000
 800a1dc:	40140000 	.word	0x40140000
 800a1e0:	9b02      	ldr	r3, [sp, #8]
 800a1e2:	e780      	b.n	800a0e6 <_dtoa_r+0x7de>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e8:	e782      	b.n	800a0f0 <_dtoa_r+0x7e8>
 800a1ea:	d099      	beq.n	800a120 <_dtoa_r+0x818>
 800a1ec:	9a08      	ldr	r2, [sp, #32]
 800a1ee:	331c      	adds	r3, #28
 800a1f0:	441a      	add	r2, r3
 800a1f2:	4498      	add	r8, r3
 800a1f4:	441e      	add	r6, r3
 800a1f6:	9208      	str	r2, [sp, #32]
 800a1f8:	e792      	b.n	800a120 <_dtoa_r+0x818>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	e7f6      	b.n	800a1ec <_dtoa_r+0x8e4>
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	9704      	str	r7, [sp, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc20      	bgt.n	800a248 <_dtoa_r+0x940>
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	dd1e      	ble.n	800a24c <_dtoa_r+0x944>
 800a20e:	9b00      	ldr	r3, [sp, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f47f aec0 	bne.w	8009f96 <_dtoa_r+0x68e>
 800a216:	4621      	mov	r1, r4
 800a218:	2205      	movs	r2, #5
 800a21a:	4658      	mov	r0, fp
 800a21c:	f000 fa9a 	bl	800a754 <__multadd>
 800a220:	4601      	mov	r1, r0
 800a222:	4604      	mov	r4, r0
 800a224:	4648      	mov	r0, r9
 800a226:	f000 fcad 	bl	800ab84 <__mcmp>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	f77f aeb3 	ble.w	8009f96 <_dtoa_r+0x68e>
 800a230:	4656      	mov	r6, sl
 800a232:	2331      	movs	r3, #49	@ 0x31
 800a234:	f806 3b01 	strb.w	r3, [r6], #1
 800a238:	9b04      	ldr	r3, [sp, #16]
 800a23a:	3301      	adds	r3, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	e6ae      	b.n	8009f9e <_dtoa_r+0x696>
 800a240:	9c07      	ldr	r4, [sp, #28]
 800a242:	9704      	str	r7, [sp, #16]
 800a244:	4625      	mov	r5, r4
 800a246:	e7f3      	b.n	800a230 <_dtoa_r+0x928>
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 8104 	beq.w	800a45c <_dtoa_r+0xb54>
 800a254:	2e00      	cmp	r6, #0
 800a256:	dd05      	ble.n	800a264 <_dtoa_r+0x95c>
 800a258:	4629      	mov	r1, r5
 800a25a:	4632      	mov	r2, r6
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 fc25 	bl	800aaac <__lshift>
 800a262:	4605      	mov	r5, r0
 800a264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d05a      	beq.n	800a320 <_dtoa_r+0xa18>
 800a26a:	6869      	ldr	r1, [r5, #4]
 800a26c:	4658      	mov	r0, fp
 800a26e:	f000 fa0f 	bl	800a690 <_Balloc>
 800a272:	4606      	mov	r6, r0
 800a274:	b928      	cbnz	r0, 800a282 <_dtoa_r+0x97a>
 800a276:	4b84      	ldr	r3, [pc, #528]	@ (800a488 <_dtoa_r+0xb80>)
 800a278:	4602      	mov	r2, r0
 800a27a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a27e:	f7ff bb5a 	b.w	8009936 <_dtoa_r+0x2e>
 800a282:	692a      	ldr	r2, [r5, #16]
 800a284:	3202      	adds	r2, #2
 800a286:	0092      	lsls	r2, r2, #2
 800a288:	f105 010c 	add.w	r1, r5, #12
 800a28c:	300c      	adds	r0, #12
 800a28e:	f7ff faa2 	bl	80097d6 <memcpy>
 800a292:	2201      	movs	r2, #1
 800a294:	4631      	mov	r1, r6
 800a296:	4658      	mov	r0, fp
 800a298:	f000 fc08 	bl	800aaac <__lshift>
 800a29c:	f10a 0301 	add.w	r3, sl, #1
 800a2a0:	9307      	str	r3, [sp, #28]
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	4453      	add	r3, sl
 800a2a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	462f      	mov	r7, r5
 800a2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	f7ff fa98 	bl	80097f2 <quorem>
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	9002      	str	r0, [sp, #8]
 800a2c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	f000 fc5a 	bl	800ab84 <__mcmp>
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	9008      	str	r0, [sp, #32]
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f000 fc70 	bl	800abbc <__mdiff>
 800a2dc:	68c2      	ldr	r2, [r0, #12]
 800a2de:	4606      	mov	r6, r0
 800a2e0:	bb02      	cbnz	r2, 800a324 <_dtoa_r+0xa1c>
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	4648      	mov	r0, r9
 800a2e6:	f000 fc4d 	bl	800ab84 <__mcmp>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2f2:	f000 fa0d 	bl	800a710 <_Bfree>
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2fa:	9e07      	ldr	r6, [sp, #28]
 800a2fc:	ea43 0102 	orr.w	r1, r3, r2
 800a300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a302:	4319      	orrs	r1, r3
 800a304:	d110      	bne.n	800a328 <_dtoa_r+0xa20>
 800a306:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a30a:	d029      	beq.n	800a360 <_dtoa_r+0xa58>
 800a30c:	9b08      	ldr	r3, [sp, #32]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dd02      	ble.n	800a318 <_dtoa_r+0xa10>
 800a312:	9b02      	ldr	r3, [sp, #8]
 800a314:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a318:	9b00      	ldr	r3, [sp, #0]
 800a31a:	f883 8000 	strb.w	r8, [r3]
 800a31e:	e63f      	b.n	8009fa0 <_dtoa_r+0x698>
 800a320:	4628      	mov	r0, r5
 800a322:	e7bb      	b.n	800a29c <_dtoa_r+0x994>
 800a324:	2201      	movs	r2, #1
 800a326:	e7e1      	b.n	800a2ec <_dtoa_r+0x9e4>
 800a328:	9b08      	ldr	r3, [sp, #32]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	db04      	blt.n	800a338 <_dtoa_r+0xa30>
 800a32e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a330:	430b      	orrs	r3, r1
 800a332:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a334:	430b      	orrs	r3, r1
 800a336:	d120      	bne.n	800a37a <_dtoa_r+0xa72>
 800a338:	2a00      	cmp	r2, #0
 800a33a:	dded      	ble.n	800a318 <_dtoa_r+0xa10>
 800a33c:	4649      	mov	r1, r9
 800a33e:	2201      	movs	r2, #1
 800a340:	4658      	mov	r0, fp
 800a342:	f000 fbb3 	bl	800aaac <__lshift>
 800a346:	4621      	mov	r1, r4
 800a348:	4681      	mov	r9, r0
 800a34a:	f000 fc1b 	bl	800ab84 <__mcmp>
 800a34e:	2800      	cmp	r0, #0
 800a350:	dc03      	bgt.n	800a35a <_dtoa_r+0xa52>
 800a352:	d1e1      	bne.n	800a318 <_dtoa_r+0xa10>
 800a354:	f018 0f01 	tst.w	r8, #1
 800a358:	d0de      	beq.n	800a318 <_dtoa_r+0xa10>
 800a35a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a35e:	d1d8      	bne.n	800a312 <_dtoa_r+0xa0a>
 800a360:	9a00      	ldr	r2, [sp, #0]
 800a362:	2339      	movs	r3, #57	@ 0x39
 800a364:	7013      	strb	r3, [r2, #0]
 800a366:	4633      	mov	r3, r6
 800a368:	461e      	mov	r6, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a370:	2a39      	cmp	r2, #57	@ 0x39
 800a372:	d052      	beq.n	800a41a <_dtoa_r+0xb12>
 800a374:	3201      	adds	r2, #1
 800a376:	701a      	strb	r2, [r3, #0]
 800a378:	e612      	b.n	8009fa0 <_dtoa_r+0x698>
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	dd07      	ble.n	800a38e <_dtoa_r+0xa86>
 800a37e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a382:	d0ed      	beq.n	800a360 <_dtoa_r+0xa58>
 800a384:	9a00      	ldr	r2, [sp, #0]
 800a386:	f108 0301 	add.w	r3, r8, #1
 800a38a:	7013      	strb	r3, [r2, #0]
 800a38c:	e608      	b.n	8009fa0 <_dtoa_r+0x698>
 800a38e:	9b07      	ldr	r3, [sp, #28]
 800a390:	9a07      	ldr	r2, [sp, #28]
 800a392:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a398:	4293      	cmp	r3, r2
 800a39a:	d028      	beq.n	800a3ee <_dtoa_r+0xae6>
 800a39c:	4649      	mov	r1, r9
 800a39e:	2300      	movs	r3, #0
 800a3a0:	220a      	movs	r2, #10
 800a3a2:	4658      	mov	r0, fp
 800a3a4:	f000 f9d6 	bl	800a754 <__multadd>
 800a3a8:	42af      	cmp	r7, r5
 800a3aa:	4681      	mov	r9, r0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	f04f 020a 	mov.w	r2, #10
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	d107      	bne.n	800a3ca <_dtoa_r+0xac2>
 800a3ba:	f000 f9cb 	bl	800a754 <__multadd>
 800a3be:	4607      	mov	r7, r0
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	9b07      	ldr	r3, [sp, #28]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	9307      	str	r3, [sp, #28]
 800a3c8:	e774      	b.n	800a2b4 <_dtoa_r+0x9ac>
 800a3ca:	f000 f9c3 	bl	800a754 <__multadd>
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f000 f9bc 	bl	800a754 <__multadd>
 800a3dc:	4605      	mov	r5, r0
 800a3de:	e7f0      	b.n	800a3c2 <_dtoa_r+0xaba>
 800a3e0:	9b00      	ldr	r3, [sp, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfcc      	ite	gt
 800a3e6:	461e      	movgt	r6, r3
 800a3e8:	2601      	movle	r6, #1
 800a3ea:	4456      	add	r6, sl
 800a3ec:	2700      	movs	r7, #0
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 fb5a 	bl	800aaac <__lshift>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4681      	mov	r9, r0
 800a3fc:	f000 fbc2 	bl	800ab84 <__mcmp>
 800a400:	2800      	cmp	r0, #0
 800a402:	dcb0      	bgt.n	800a366 <_dtoa_r+0xa5e>
 800a404:	d102      	bne.n	800a40c <_dtoa_r+0xb04>
 800a406:	f018 0f01 	tst.w	r8, #1
 800a40a:	d1ac      	bne.n	800a366 <_dtoa_r+0xa5e>
 800a40c:	4633      	mov	r3, r6
 800a40e:	461e      	mov	r6, r3
 800a410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a414:	2a30      	cmp	r2, #48	@ 0x30
 800a416:	d0fa      	beq.n	800a40e <_dtoa_r+0xb06>
 800a418:	e5c2      	b.n	8009fa0 <_dtoa_r+0x698>
 800a41a:	459a      	cmp	sl, r3
 800a41c:	d1a4      	bne.n	800a368 <_dtoa_r+0xa60>
 800a41e:	9b04      	ldr	r3, [sp, #16]
 800a420:	3301      	adds	r3, #1
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	2331      	movs	r3, #49	@ 0x31
 800a426:	f88a 3000 	strb.w	r3, [sl]
 800a42a:	e5b9      	b.n	8009fa0 <_dtoa_r+0x698>
 800a42c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a42e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a48c <_dtoa_r+0xb84>
 800a432:	b11b      	cbz	r3, 800a43c <_dtoa_r+0xb34>
 800a434:	f10a 0308 	add.w	r3, sl, #8
 800a438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	4650      	mov	r0, sl
 800a43e:	b019      	add	sp, #100	@ 0x64
 800a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a446:	2b01      	cmp	r3, #1
 800a448:	f77f ae37 	ble.w	800a0ba <_dtoa_r+0x7b2>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a450:	2001      	movs	r0, #1
 800a452:	e655      	b.n	800a100 <_dtoa_r+0x7f8>
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f77f aed6 	ble.w	800a208 <_dtoa_r+0x900>
 800a45c:	4656      	mov	r6, sl
 800a45e:	4621      	mov	r1, r4
 800a460:	4648      	mov	r0, r9
 800a462:	f7ff f9c6 	bl	80097f2 <quorem>
 800a466:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a46a:	f806 8b01 	strb.w	r8, [r6], #1
 800a46e:	9b00      	ldr	r3, [sp, #0]
 800a470:	eba6 020a 	sub.w	r2, r6, sl
 800a474:	4293      	cmp	r3, r2
 800a476:	ddb3      	ble.n	800a3e0 <_dtoa_r+0xad8>
 800a478:	4649      	mov	r1, r9
 800a47a:	2300      	movs	r3, #0
 800a47c:	220a      	movs	r2, #10
 800a47e:	4658      	mov	r0, fp
 800a480:	f000 f968 	bl	800a754 <__multadd>
 800a484:	4681      	mov	r9, r0
 800a486:	e7ea      	b.n	800a45e <_dtoa_r+0xb56>
 800a488:	0800c6e4 	.word	0x0800c6e4
 800a48c:	0800c668 	.word	0x0800c668

0800a490 <_free_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	2900      	cmp	r1, #0
 800a496:	d041      	beq.n	800a51c <_free_r+0x8c>
 800a498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49c:	1f0c      	subs	r4, r1, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	18e4      	addlt	r4, r4, r3
 800a4a4:	f000 f8e8 	bl	800a678 <__malloc_lock>
 800a4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a520 <_free_r+0x90>)
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x2c>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b8:	f000 b8e4 	b.w	800a684 <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x42>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	1821      	adds	r1, r4, r0
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x1e>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x4c>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x42>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1850      	adds	r0, r2, r1
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x6c>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	1850      	adds	r0, r2, r1
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x22>
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	6053      	str	r3, [r2, #4]
 800a4f6:	4408      	add	r0, r1
 800a4f8:	6010      	str	r0, [r2, #0]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x22>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x74>
 800a4fe:	230c      	movs	r3, #12
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x22>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	1821      	adds	r1, r4, r0
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf04      	itt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	6063      	str	r3, [r4, #4]
 800a512:	bf04      	itt	eq
 800a514:	1809      	addeq	r1, r1, r0
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	6054      	str	r4, [r2, #4]
 800a51a:	e7ca      	b.n	800a4b2 <_free_r+0x22>
 800a51c:	bd38      	pop	{r3, r4, r5, pc}
 800a51e:	bf00      	nop
 800a520:	20000b5c 	.word	0x20000b5c

0800a524 <malloc>:
 800a524:	4b02      	ldr	r3, [pc, #8]	@ (800a530 <malloc+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f000 b825 	b.w	800a578 <_malloc_r>
 800a52e:	bf00      	nop
 800a530:	200000a8 	.word	0x200000a8

0800a534 <sbrk_aligned>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	4e0f      	ldr	r6, [pc, #60]	@ (800a574 <sbrk_aligned+0x40>)
 800a538:	460c      	mov	r4, r1
 800a53a:	6831      	ldr	r1, [r6, #0]
 800a53c:	4605      	mov	r5, r0
 800a53e:	b911      	cbnz	r1, 800a546 <sbrk_aligned+0x12>
 800a540:	f001 f80c 	bl	800b55c <_sbrk_r>
 800a544:	6030      	str	r0, [r6, #0]
 800a546:	4621      	mov	r1, r4
 800a548:	4628      	mov	r0, r5
 800a54a:	f001 f807 	bl	800b55c <_sbrk_r>
 800a54e:	1c43      	adds	r3, r0, #1
 800a550:	d103      	bne.n	800a55a <sbrk_aligned+0x26>
 800a552:	f04f 34ff 	mov.w	r4, #4294967295
 800a556:	4620      	mov	r0, r4
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	1cc4      	adds	r4, r0, #3
 800a55c:	f024 0403 	bic.w	r4, r4, #3
 800a560:	42a0      	cmp	r0, r4
 800a562:	d0f8      	beq.n	800a556 <sbrk_aligned+0x22>
 800a564:	1a21      	subs	r1, r4, r0
 800a566:	4628      	mov	r0, r5
 800a568:	f000 fff8 	bl	800b55c <_sbrk_r>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d1f2      	bne.n	800a556 <sbrk_aligned+0x22>
 800a570:	e7ef      	b.n	800a552 <sbrk_aligned+0x1e>
 800a572:	bf00      	nop
 800a574:	20000b58 	.word	0x20000b58

0800a578 <_malloc_r>:
 800a578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a57c:	1ccd      	adds	r5, r1, #3
 800a57e:	f025 0503 	bic.w	r5, r5, #3
 800a582:	3508      	adds	r5, #8
 800a584:	2d0c      	cmp	r5, #12
 800a586:	bf38      	it	cc
 800a588:	250c      	movcc	r5, #12
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	4606      	mov	r6, r0
 800a58e:	db01      	blt.n	800a594 <_malloc_r+0x1c>
 800a590:	42a9      	cmp	r1, r5
 800a592:	d904      	bls.n	800a59e <_malloc_r+0x26>
 800a594:	230c      	movs	r3, #12
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	2000      	movs	r0, #0
 800a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a674 <_malloc_r+0xfc>
 800a5a2:	f000 f869 	bl	800a678 <__malloc_lock>
 800a5a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5aa:	461c      	mov	r4, r3
 800a5ac:	bb44      	cbnz	r4, 800a600 <_malloc_r+0x88>
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ffbf 	bl	800a534 <sbrk_aligned>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	d158      	bne.n	800a66e <_malloc_r+0xf6>
 800a5bc:	f8d8 4000 	ldr.w	r4, [r8]
 800a5c0:	4627      	mov	r7, r4
 800a5c2:	2f00      	cmp	r7, #0
 800a5c4:	d143      	bne.n	800a64e <_malloc_r+0xd6>
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	d04b      	beq.n	800a662 <_malloc_r+0xea>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	eb04 0903 	add.w	r9, r4, r3
 800a5d4:	f000 ffc2 	bl	800b55c <_sbrk_r>
 800a5d8:	4581      	cmp	r9, r0
 800a5da:	d142      	bne.n	800a662 <_malloc_r+0xea>
 800a5dc:	6821      	ldr	r1, [r4, #0]
 800a5de:	1a6d      	subs	r5, r5, r1
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff ffa6 	bl	800a534 <sbrk_aligned>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d03a      	beq.n	800a662 <_malloc_r+0xea>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	442b      	add	r3, r5
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	bb62      	cbnz	r2, 800a654 <_malloc_r+0xdc>
 800a5fa:	f8c8 7000 	str.w	r7, [r8]
 800a5fe:	e00f      	b.n	800a620 <_malloc_r+0xa8>
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	1b52      	subs	r2, r2, r5
 800a604:	d420      	bmi.n	800a648 <_malloc_r+0xd0>
 800a606:	2a0b      	cmp	r2, #11
 800a608:	d917      	bls.n	800a63a <_malloc_r+0xc2>
 800a60a:	1961      	adds	r1, r4, r5
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	6025      	str	r5, [r4, #0]
 800a610:	bf18      	it	ne
 800a612:	6059      	strne	r1, [r3, #4]
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	bf08      	it	eq
 800a618:	f8c8 1000 	streq.w	r1, [r8]
 800a61c:	5162      	str	r2, [r4, r5]
 800a61e:	604b      	str	r3, [r1, #4]
 800a620:	4630      	mov	r0, r6
 800a622:	f000 f82f 	bl	800a684 <__malloc_unlock>
 800a626:	f104 000b 	add.w	r0, r4, #11
 800a62a:	1d23      	adds	r3, r4, #4
 800a62c:	f020 0007 	bic.w	r0, r0, #7
 800a630:	1ac2      	subs	r2, r0, r3
 800a632:	bf1c      	itt	ne
 800a634:	1a1b      	subne	r3, r3, r0
 800a636:	50a3      	strne	r3, [r4, r2]
 800a638:	e7af      	b.n	800a59a <_malloc_r+0x22>
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	bf0c      	ite	eq
 800a640:	f8c8 2000 	streq.w	r2, [r8]
 800a644:	605a      	strne	r2, [r3, #4]
 800a646:	e7eb      	b.n	800a620 <_malloc_r+0xa8>
 800a648:	4623      	mov	r3, r4
 800a64a:	6864      	ldr	r4, [r4, #4]
 800a64c:	e7ae      	b.n	800a5ac <_malloc_r+0x34>
 800a64e:	463c      	mov	r4, r7
 800a650:	687f      	ldr	r7, [r7, #4]
 800a652:	e7b6      	b.n	800a5c2 <_malloc_r+0x4a>
 800a654:	461a      	mov	r2, r3
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	42a3      	cmp	r3, r4
 800a65a:	d1fb      	bne.n	800a654 <_malloc_r+0xdc>
 800a65c:	2300      	movs	r3, #0
 800a65e:	6053      	str	r3, [r2, #4]
 800a660:	e7de      	b.n	800a620 <_malloc_r+0xa8>
 800a662:	230c      	movs	r3, #12
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	4630      	mov	r0, r6
 800a668:	f000 f80c 	bl	800a684 <__malloc_unlock>
 800a66c:	e794      	b.n	800a598 <_malloc_r+0x20>
 800a66e:	6005      	str	r5, [r0, #0]
 800a670:	e7d6      	b.n	800a620 <_malloc_r+0xa8>
 800a672:	bf00      	nop
 800a674:	20000b5c 	.word	0x20000b5c

0800a678 <__malloc_lock>:
 800a678:	4801      	ldr	r0, [pc, #4]	@ (800a680 <__malloc_lock+0x8>)
 800a67a:	f7ff b8aa 	b.w	80097d2 <__retarget_lock_acquire_recursive>
 800a67e:	bf00      	nop
 800a680:	20000b54 	.word	0x20000b54

0800a684 <__malloc_unlock>:
 800a684:	4801      	ldr	r0, [pc, #4]	@ (800a68c <__malloc_unlock+0x8>)
 800a686:	f7ff b8a5 	b.w	80097d4 <__retarget_lock_release_recursive>
 800a68a:	bf00      	nop
 800a68c:	20000b54 	.word	0x20000b54

0800a690 <_Balloc>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	69c6      	ldr	r6, [r0, #28]
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	b976      	cbnz	r6, 800a6b8 <_Balloc+0x28>
 800a69a:	2010      	movs	r0, #16
 800a69c:	f7ff ff42 	bl	800a524 <malloc>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	61e0      	str	r0, [r4, #28]
 800a6a4:	b920      	cbnz	r0, 800a6b0 <_Balloc+0x20>
 800a6a6:	4b18      	ldr	r3, [pc, #96]	@ (800a708 <_Balloc+0x78>)
 800a6a8:	4818      	ldr	r0, [pc, #96]	@ (800a70c <_Balloc+0x7c>)
 800a6aa:	216b      	movs	r1, #107	@ 0x6b
 800a6ac:	f000 ff66 	bl	800b57c <__assert_func>
 800a6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b4:	6006      	str	r6, [r0, #0]
 800a6b6:	60c6      	str	r6, [r0, #12]
 800a6b8:	69e6      	ldr	r6, [r4, #28]
 800a6ba:	68f3      	ldr	r3, [r6, #12]
 800a6bc:	b183      	cbz	r3, 800a6e0 <_Balloc+0x50>
 800a6be:	69e3      	ldr	r3, [r4, #28]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6c6:	b9b8      	cbnz	r0, 800a6f8 <_Balloc+0x68>
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a6ce:	1d72      	adds	r2, r6, #5
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 ff70 	bl	800b5b8 <_calloc_r>
 800a6d8:	b160      	cbz	r0, 800a6f4 <_Balloc+0x64>
 800a6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6de:	e00e      	b.n	800a6fe <_Balloc+0x6e>
 800a6e0:	2221      	movs	r2, #33	@ 0x21
 800a6e2:	2104      	movs	r1, #4
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 ff67 	bl	800b5b8 <_calloc_r>
 800a6ea:	69e3      	ldr	r3, [r4, #28]
 800a6ec:	60f0      	str	r0, [r6, #12]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <_Balloc+0x2e>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	6802      	ldr	r2, [r0, #0]
 800a6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6fe:	2300      	movs	r3, #0
 800a700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a704:	e7f7      	b.n	800a6f6 <_Balloc+0x66>
 800a706:	bf00      	nop
 800a708:	0800c675 	.word	0x0800c675
 800a70c:	0800c6f5 	.word	0x0800c6f5

0800a710 <_Bfree>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	69c6      	ldr	r6, [r0, #28]
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b976      	cbnz	r6, 800a738 <_Bfree+0x28>
 800a71a:	2010      	movs	r0, #16
 800a71c:	f7ff ff02 	bl	800a524 <malloc>
 800a720:	4602      	mov	r2, r0
 800a722:	61e8      	str	r0, [r5, #28]
 800a724:	b920      	cbnz	r0, 800a730 <_Bfree+0x20>
 800a726:	4b09      	ldr	r3, [pc, #36]	@ (800a74c <_Bfree+0x3c>)
 800a728:	4809      	ldr	r0, [pc, #36]	@ (800a750 <_Bfree+0x40>)
 800a72a:	218f      	movs	r1, #143	@ 0x8f
 800a72c:	f000 ff26 	bl	800b57c <__assert_func>
 800a730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a734:	6006      	str	r6, [r0, #0]
 800a736:	60c6      	str	r6, [r0, #12]
 800a738:	b13c      	cbz	r4, 800a74a <_Bfree+0x3a>
 800a73a:	69eb      	ldr	r3, [r5, #28]
 800a73c:	6862      	ldr	r2, [r4, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a744:	6021      	str	r1, [r4, #0]
 800a746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	0800c675 	.word	0x0800c675
 800a750:	0800c6f5 	.word	0x0800c6f5

0800a754 <__multadd>:
 800a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a758:	690d      	ldr	r5, [r1, #16]
 800a75a:	4607      	mov	r7, r0
 800a75c:	460c      	mov	r4, r1
 800a75e:	461e      	mov	r6, r3
 800a760:	f101 0c14 	add.w	ip, r1, #20
 800a764:	2000      	movs	r0, #0
 800a766:	f8dc 3000 	ldr.w	r3, [ip]
 800a76a:	b299      	uxth	r1, r3
 800a76c:	fb02 6101 	mla	r1, r2, r1, r6
 800a770:	0c1e      	lsrs	r6, r3, #16
 800a772:	0c0b      	lsrs	r3, r1, #16
 800a774:	fb02 3306 	mla	r3, r2, r6, r3
 800a778:	b289      	uxth	r1, r1
 800a77a:	3001      	adds	r0, #1
 800a77c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a780:	4285      	cmp	r5, r0
 800a782:	f84c 1b04 	str.w	r1, [ip], #4
 800a786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a78a:	dcec      	bgt.n	800a766 <__multadd+0x12>
 800a78c:	b30e      	cbz	r6, 800a7d2 <__multadd+0x7e>
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	42ab      	cmp	r3, r5
 800a792:	dc19      	bgt.n	800a7c8 <__multadd+0x74>
 800a794:	6861      	ldr	r1, [r4, #4]
 800a796:	4638      	mov	r0, r7
 800a798:	3101      	adds	r1, #1
 800a79a:	f7ff ff79 	bl	800a690 <_Balloc>
 800a79e:	4680      	mov	r8, r0
 800a7a0:	b928      	cbnz	r0, 800a7ae <__multadd+0x5a>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d8 <__multadd+0x84>)
 800a7a6:	480d      	ldr	r0, [pc, #52]	@ (800a7dc <__multadd+0x88>)
 800a7a8:	21ba      	movs	r1, #186	@ 0xba
 800a7aa:	f000 fee7 	bl	800b57c <__assert_func>
 800a7ae:	6922      	ldr	r2, [r4, #16]
 800a7b0:	3202      	adds	r2, #2
 800a7b2:	f104 010c 	add.w	r1, r4, #12
 800a7b6:	0092      	lsls	r2, r2, #2
 800a7b8:	300c      	adds	r0, #12
 800a7ba:	f7ff f80c 	bl	80097d6 <memcpy>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ffa5 	bl	800a710 <_Bfree>
 800a7c6:	4644      	mov	r4, r8
 800a7c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	615e      	str	r6, [r3, #20]
 800a7d0:	6125      	str	r5, [r4, #16]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d8:	0800c6e4 	.word	0x0800c6e4
 800a7dc:	0800c6f5 	.word	0x0800c6f5

0800a7e0 <__hi0bits>:
 800a7e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	bf36      	itet	cc
 800a7e8:	0403      	lslcc	r3, r0, #16
 800a7ea:	2000      	movcs	r0, #0
 800a7ec:	2010      	movcc	r0, #16
 800a7ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7f2:	bf3c      	itt	cc
 800a7f4:	021b      	lslcc	r3, r3, #8
 800a7f6:	3008      	addcc	r0, #8
 800a7f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7fc:	bf3c      	itt	cc
 800a7fe:	011b      	lslcc	r3, r3, #4
 800a800:	3004      	addcc	r0, #4
 800a802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a806:	bf3c      	itt	cc
 800a808:	009b      	lslcc	r3, r3, #2
 800a80a:	3002      	addcc	r0, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	db05      	blt.n	800a81c <__hi0bits+0x3c>
 800a810:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a814:	f100 0001 	add.w	r0, r0, #1
 800a818:	bf08      	it	eq
 800a81a:	2020      	moveq	r0, #32
 800a81c:	4770      	bx	lr

0800a81e <__lo0bits>:
 800a81e:	6803      	ldr	r3, [r0, #0]
 800a820:	4602      	mov	r2, r0
 800a822:	f013 0007 	ands.w	r0, r3, #7
 800a826:	d00b      	beq.n	800a840 <__lo0bits+0x22>
 800a828:	07d9      	lsls	r1, r3, #31
 800a82a:	d421      	bmi.n	800a870 <__lo0bits+0x52>
 800a82c:	0798      	lsls	r0, r3, #30
 800a82e:	bf49      	itett	mi
 800a830:	085b      	lsrmi	r3, r3, #1
 800a832:	089b      	lsrpl	r3, r3, #2
 800a834:	2001      	movmi	r0, #1
 800a836:	6013      	strmi	r3, [r2, #0]
 800a838:	bf5c      	itt	pl
 800a83a:	6013      	strpl	r3, [r2, #0]
 800a83c:	2002      	movpl	r0, #2
 800a83e:	4770      	bx	lr
 800a840:	b299      	uxth	r1, r3
 800a842:	b909      	cbnz	r1, 800a848 <__lo0bits+0x2a>
 800a844:	0c1b      	lsrs	r3, r3, #16
 800a846:	2010      	movs	r0, #16
 800a848:	b2d9      	uxtb	r1, r3
 800a84a:	b909      	cbnz	r1, 800a850 <__lo0bits+0x32>
 800a84c:	3008      	adds	r0, #8
 800a84e:	0a1b      	lsrs	r3, r3, #8
 800a850:	0719      	lsls	r1, r3, #28
 800a852:	bf04      	itt	eq
 800a854:	091b      	lsreq	r3, r3, #4
 800a856:	3004      	addeq	r0, #4
 800a858:	0799      	lsls	r1, r3, #30
 800a85a:	bf04      	itt	eq
 800a85c:	089b      	lsreq	r3, r3, #2
 800a85e:	3002      	addeq	r0, #2
 800a860:	07d9      	lsls	r1, r3, #31
 800a862:	d403      	bmi.n	800a86c <__lo0bits+0x4e>
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	f100 0001 	add.w	r0, r0, #1
 800a86a:	d003      	beq.n	800a874 <__lo0bits+0x56>
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	4770      	bx	lr
 800a870:	2000      	movs	r0, #0
 800a872:	4770      	bx	lr
 800a874:	2020      	movs	r0, #32
 800a876:	4770      	bx	lr

0800a878 <__i2b>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	2101      	movs	r1, #1
 800a87e:	f7ff ff07 	bl	800a690 <_Balloc>
 800a882:	4602      	mov	r2, r0
 800a884:	b928      	cbnz	r0, 800a892 <__i2b+0x1a>
 800a886:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <__i2b+0x24>)
 800a888:	4805      	ldr	r0, [pc, #20]	@ (800a8a0 <__i2b+0x28>)
 800a88a:	f240 1145 	movw	r1, #325	@ 0x145
 800a88e:	f000 fe75 	bl	800b57c <__assert_func>
 800a892:	2301      	movs	r3, #1
 800a894:	6144      	str	r4, [r0, #20]
 800a896:	6103      	str	r3, [r0, #16]
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	bf00      	nop
 800a89c:	0800c6e4 	.word	0x0800c6e4
 800a8a0:	0800c6f5 	.word	0x0800c6f5

0800a8a4 <__multiply>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	690a      	ldr	r2, [r1, #16]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	bfa8      	it	ge
 800a8b2:	4623      	movge	r3, r4
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	bfa4      	itt	ge
 800a8b8:	460c      	movge	r4, r1
 800a8ba:	461f      	movge	r7, r3
 800a8bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a8c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	6861      	ldr	r1, [r4, #4]
 800a8c8:	eb0a 0609 	add.w	r6, sl, r9
 800a8cc:	42b3      	cmp	r3, r6
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	bfb8      	it	lt
 800a8d2:	3101      	addlt	r1, #1
 800a8d4:	f7ff fedc 	bl	800a690 <_Balloc>
 800a8d8:	b930      	cbnz	r0, 800a8e8 <__multiply+0x44>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4b44      	ldr	r3, [pc, #272]	@ (800a9f0 <__multiply+0x14c>)
 800a8de:	4845      	ldr	r0, [pc, #276]	@ (800a9f4 <__multiply+0x150>)
 800a8e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8e4:	f000 fe4a 	bl	800b57c <__assert_func>
 800a8e8:	f100 0514 	add.w	r5, r0, #20
 800a8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4543      	cmp	r3, r8
 800a8f6:	d321      	bcc.n	800a93c <__multiply+0x98>
 800a8f8:	f107 0114 	add.w	r1, r7, #20
 800a8fc:	f104 0214 	add.w	r2, r4, #20
 800a900:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a904:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	1b13      	subs	r3, r2, r4
 800a90c:	3b15      	subs	r3, #21
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	3304      	adds	r3, #4
 800a914:	f104 0715 	add.w	r7, r4, #21
 800a918:	42ba      	cmp	r2, r7
 800a91a:	bf38      	it	cc
 800a91c:	2304      	movcc	r3, #4
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	9103      	str	r1, [sp, #12]
 800a924:	428b      	cmp	r3, r1
 800a926:	d80c      	bhi.n	800a942 <__multiply+0x9e>
 800a928:	2e00      	cmp	r6, #0
 800a92a:	dd03      	ble.n	800a934 <__multiply+0x90>
 800a92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a930:	2b00      	cmp	r3, #0
 800a932:	d05b      	beq.n	800a9ec <__multiply+0x148>
 800a934:	6106      	str	r6, [r0, #16]
 800a936:	b005      	add	sp, #20
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	f843 2b04 	str.w	r2, [r3], #4
 800a940:	e7d8      	b.n	800a8f4 <__multiply+0x50>
 800a942:	f8b1 a000 	ldrh.w	sl, [r1]
 800a946:	f1ba 0f00 	cmp.w	sl, #0
 800a94a:	d024      	beq.n	800a996 <__multiply+0xf2>
 800a94c:	f104 0e14 	add.w	lr, r4, #20
 800a950:	46a9      	mov	r9, r5
 800a952:	f04f 0c00 	mov.w	ip, #0
 800a956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a95a:	f8d9 3000 	ldr.w	r3, [r9]
 800a95e:	fa1f fb87 	uxth.w	fp, r7
 800a962:	b29b      	uxth	r3, r3
 800a964:	fb0a 330b 	mla	r3, sl, fp, r3
 800a968:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a96c:	f8d9 7000 	ldr.w	r7, [r9]
 800a970:	4463      	add	r3, ip
 800a972:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a976:	fb0a c70b 	mla	r7, sl, fp, ip
 800a97a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a97e:	b29b      	uxth	r3, r3
 800a980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a984:	4572      	cmp	r2, lr
 800a986:	f849 3b04 	str.w	r3, [r9], #4
 800a98a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a98e:	d8e2      	bhi.n	800a956 <__multiply+0xb2>
 800a990:	9b01      	ldr	r3, [sp, #4]
 800a992:	f845 c003 	str.w	ip, [r5, r3]
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a99c:	3104      	adds	r1, #4
 800a99e:	f1b9 0f00 	cmp.w	r9, #0
 800a9a2:	d021      	beq.n	800a9e8 <__multiply+0x144>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	f104 0c14 	add.w	ip, r4, #20
 800a9aa:	46ae      	mov	lr, r5
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a9b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a9b8:	fb09 770b 	mla	r7, r9, fp, r7
 800a9bc:	4457      	add	r7, sl
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9c4:	f84e 3b04 	str.w	r3, [lr], #4
 800a9c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d0:	f8be 3000 	ldrh.w	r3, [lr]
 800a9d4:	fb09 330a 	mla	r3, r9, sl, r3
 800a9d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a9dc:	4562      	cmp	r2, ip
 800a9de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9e2:	d8e5      	bhi.n	800a9b0 <__multiply+0x10c>
 800a9e4:	9f01      	ldr	r7, [sp, #4]
 800a9e6:	51eb      	str	r3, [r5, r7]
 800a9e8:	3504      	adds	r5, #4
 800a9ea:	e799      	b.n	800a920 <__multiply+0x7c>
 800a9ec:	3e01      	subs	r6, #1
 800a9ee:	e79b      	b.n	800a928 <__multiply+0x84>
 800a9f0:	0800c6e4 	.word	0x0800c6e4
 800a9f4:	0800c6f5 	.word	0x0800c6f5

0800a9f8 <__pow5mult>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	4615      	mov	r5, r2
 800a9fe:	f012 0203 	ands.w	r2, r2, #3
 800aa02:	4607      	mov	r7, r0
 800aa04:	460e      	mov	r6, r1
 800aa06:	d007      	beq.n	800aa18 <__pow5mult+0x20>
 800aa08:	4c25      	ldr	r4, [pc, #148]	@ (800aaa0 <__pow5mult+0xa8>)
 800aa0a:	3a01      	subs	r2, #1
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa12:	f7ff fe9f 	bl	800a754 <__multadd>
 800aa16:	4606      	mov	r6, r0
 800aa18:	10ad      	asrs	r5, r5, #2
 800aa1a:	d03d      	beq.n	800aa98 <__pow5mult+0xa0>
 800aa1c:	69fc      	ldr	r4, [r7, #28]
 800aa1e:	b97c      	cbnz	r4, 800aa40 <__pow5mult+0x48>
 800aa20:	2010      	movs	r0, #16
 800aa22:	f7ff fd7f 	bl	800a524 <malloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	61f8      	str	r0, [r7, #28]
 800aa2a:	b928      	cbnz	r0, 800aa38 <__pow5mult+0x40>
 800aa2c:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa4 <__pow5mult+0xac>)
 800aa2e:	481e      	ldr	r0, [pc, #120]	@ (800aaa8 <__pow5mult+0xb0>)
 800aa30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa34:	f000 fda2 	bl	800b57c <__assert_func>
 800aa38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa3c:	6004      	str	r4, [r0, #0]
 800aa3e:	60c4      	str	r4, [r0, #12]
 800aa40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa48:	b94c      	cbnz	r4, 800aa5e <__pow5mult+0x66>
 800aa4a:	f240 2171 	movw	r1, #625	@ 0x271
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f7ff ff12 	bl	800a878 <__i2b>
 800aa54:	2300      	movs	r3, #0
 800aa56:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	07eb      	lsls	r3, r5, #31
 800aa64:	d50a      	bpl.n	800aa7c <__pow5mult+0x84>
 800aa66:	4631      	mov	r1, r6
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	f7ff ff1a 	bl	800a8a4 <__multiply>
 800aa70:	4631      	mov	r1, r6
 800aa72:	4680      	mov	r8, r0
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff fe4b 	bl	800a710 <_Bfree>
 800aa7a:	4646      	mov	r6, r8
 800aa7c:	106d      	asrs	r5, r5, #1
 800aa7e:	d00b      	beq.n	800aa98 <__pow5mult+0xa0>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	b938      	cbnz	r0, 800aa94 <__pow5mult+0x9c>
 800aa84:	4622      	mov	r2, r4
 800aa86:	4621      	mov	r1, r4
 800aa88:	4638      	mov	r0, r7
 800aa8a:	f7ff ff0b 	bl	800a8a4 <__multiply>
 800aa8e:	6020      	str	r0, [r4, #0]
 800aa90:	f8c0 9000 	str.w	r9, [r0]
 800aa94:	4604      	mov	r4, r0
 800aa96:	e7e4      	b.n	800aa62 <__pow5mult+0x6a>
 800aa98:	4630      	mov	r0, r6
 800aa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800c750 	.word	0x0800c750
 800aaa4:	0800c675 	.word	0x0800c675
 800aaa8:	0800c6f5 	.word	0x0800c6f5

0800aaac <__lshift>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	6849      	ldr	r1, [r1, #4]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	4607      	mov	r7, r0
 800aabe:	4691      	mov	r9, r2
 800aac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aac4:	f108 0601 	add.w	r6, r8, #1
 800aac8:	42b3      	cmp	r3, r6
 800aaca:	db0b      	blt.n	800aae4 <__lshift+0x38>
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff fddf 	bl	800a690 <_Balloc>
 800aad2:	4605      	mov	r5, r0
 800aad4:	b948      	cbnz	r0, 800aaea <__lshift+0x3e>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b28      	ldr	r3, [pc, #160]	@ (800ab7c <__lshift+0xd0>)
 800aada:	4829      	ldr	r0, [pc, #164]	@ (800ab80 <__lshift+0xd4>)
 800aadc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aae0:	f000 fd4c 	bl	800b57c <__assert_func>
 800aae4:	3101      	adds	r1, #1
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	e7ee      	b.n	800aac8 <__lshift+0x1c>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f100 0114 	add.w	r1, r0, #20
 800aaf0:	f100 0210 	add.w	r2, r0, #16
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	4553      	cmp	r3, sl
 800aaf8:	db33      	blt.n	800ab62 <__lshift+0xb6>
 800aafa:	6920      	ldr	r0, [r4, #16]
 800aafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab00:	f104 0314 	add.w	r3, r4, #20
 800ab04:	f019 091f 	ands.w	r9, r9, #31
 800ab08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab10:	d02b      	beq.n	800ab6a <__lshift+0xbe>
 800ab12:	f1c9 0e20 	rsb	lr, r9, #32
 800ab16:	468a      	mov	sl, r1
 800ab18:	2200      	movs	r2, #0
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab20:	4310      	orrs	r0, r2
 800ab22:	f84a 0b04 	str.w	r0, [sl], #4
 800ab26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2a:	459c      	cmp	ip, r3
 800ab2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab30:	d8f3      	bhi.n	800ab1a <__lshift+0x6e>
 800ab32:	ebac 0304 	sub.w	r3, ip, r4
 800ab36:	3b15      	subs	r3, #21
 800ab38:	f023 0303 	bic.w	r3, r3, #3
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	f104 0015 	add.w	r0, r4, #21
 800ab42:	4584      	cmp	ip, r0
 800ab44:	bf38      	it	cc
 800ab46:	2304      	movcc	r3, #4
 800ab48:	50ca      	str	r2, [r1, r3]
 800ab4a:	b10a      	cbz	r2, 800ab50 <__lshift+0xa4>
 800ab4c:	f108 0602 	add.w	r6, r8, #2
 800ab50:	3e01      	subs	r6, #1
 800ab52:	4638      	mov	r0, r7
 800ab54:	612e      	str	r6, [r5, #16]
 800ab56:	4621      	mov	r1, r4
 800ab58:	f7ff fdda 	bl	800a710 <_Bfree>
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab66:	3301      	adds	r3, #1
 800ab68:	e7c5      	b.n	800aaf6 <__lshift+0x4a>
 800ab6a:	3904      	subs	r1, #4
 800ab6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab74:	459c      	cmp	ip, r3
 800ab76:	d8f9      	bhi.n	800ab6c <__lshift+0xc0>
 800ab78:	e7ea      	b.n	800ab50 <__lshift+0xa4>
 800ab7a:	bf00      	nop
 800ab7c:	0800c6e4 	.word	0x0800c6e4
 800ab80:	0800c6f5 	.word	0x0800c6f5

0800ab84 <__mcmp>:
 800ab84:	690a      	ldr	r2, [r1, #16]
 800ab86:	4603      	mov	r3, r0
 800ab88:	6900      	ldr	r0, [r0, #16]
 800ab8a:	1a80      	subs	r0, r0, r2
 800ab8c:	b530      	push	{r4, r5, lr}
 800ab8e:	d10e      	bne.n	800abae <__mcmp+0x2a>
 800ab90:	3314      	adds	r3, #20
 800ab92:	3114      	adds	r1, #20
 800ab94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aba4:	4295      	cmp	r5, r2
 800aba6:	d003      	beq.n	800abb0 <__mcmp+0x2c>
 800aba8:	d205      	bcs.n	800abb6 <__mcmp+0x32>
 800abaa:	f04f 30ff 	mov.w	r0, #4294967295
 800abae:	bd30      	pop	{r4, r5, pc}
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	d3f3      	bcc.n	800ab9c <__mcmp+0x18>
 800abb4:	e7fb      	b.n	800abae <__mcmp+0x2a>
 800abb6:	2001      	movs	r0, #1
 800abb8:	e7f9      	b.n	800abae <__mcmp+0x2a>
	...

0800abbc <__mdiff>:
 800abbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	4689      	mov	r9, r1
 800abc2:	4606      	mov	r6, r0
 800abc4:	4611      	mov	r1, r2
 800abc6:	4648      	mov	r0, r9
 800abc8:	4614      	mov	r4, r2
 800abca:	f7ff ffdb 	bl	800ab84 <__mcmp>
 800abce:	1e05      	subs	r5, r0, #0
 800abd0:	d112      	bne.n	800abf8 <__mdiff+0x3c>
 800abd2:	4629      	mov	r1, r5
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff fd5b 	bl	800a690 <_Balloc>
 800abda:	4602      	mov	r2, r0
 800abdc:	b928      	cbnz	r0, 800abea <__mdiff+0x2e>
 800abde:	4b3f      	ldr	r3, [pc, #252]	@ (800acdc <__mdiff+0x120>)
 800abe0:	f240 2137 	movw	r1, #567	@ 0x237
 800abe4:	483e      	ldr	r0, [pc, #248]	@ (800ace0 <__mdiff+0x124>)
 800abe6:	f000 fcc9 	bl	800b57c <__assert_func>
 800abea:	2301      	movs	r3, #1
 800abec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abf0:	4610      	mov	r0, r2
 800abf2:	b003      	add	sp, #12
 800abf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf8:	bfbc      	itt	lt
 800abfa:	464b      	movlt	r3, r9
 800abfc:	46a1      	movlt	r9, r4
 800abfe:	4630      	mov	r0, r6
 800ac00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac04:	bfba      	itte	lt
 800ac06:	461c      	movlt	r4, r3
 800ac08:	2501      	movlt	r5, #1
 800ac0a:	2500      	movge	r5, #0
 800ac0c:	f7ff fd40 	bl	800a690 <_Balloc>
 800ac10:	4602      	mov	r2, r0
 800ac12:	b918      	cbnz	r0, 800ac1c <__mdiff+0x60>
 800ac14:	4b31      	ldr	r3, [pc, #196]	@ (800acdc <__mdiff+0x120>)
 800ac16:	f240 2145 	movw	r1, #581	@ 0x245
 800ac1a:	e7e3      	b.n	800abe4 <__mdiff+0x28>
 800ac1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac20:	6926      	ldr	r6, [r4, #16]
 800ac22:	60c5      	str	r5, [r0, #12]
 800ac24:	f109 0310 	add.w	r3, r9, #16
 800ac28:	f109 0514 	add.w	r5, r9, #20
 800ac2c:	f104 0e14 	add.w	lr, r4, #20
 800ac30:	f100 0b14 	add.w	fp, r0, #20
 800ac34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	46d9      	mov	r9, fp
 800ac40:	f04f 0c00 	mov.w	ip, #0
 800ac44:	9b01      	ldr	r3, [sp, #4]
 800ac46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	fa1f f38a 	uxth.w	r3, sl
 800ac54:	4619      	mov	r1, r3
 800ac56:	b283      	uxth	r3, r0
 800ac58:	1acb      	subs	r3, r1, r3
 800ac5a:	0c00      	lsrs	r0, r0, #16
 800ac5c:	4463      	add	r3, ip
 800ac5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac6c:	4576      	cmp	r6, lr
 800ac6e:	f849 3b04 	str.w	r3, [r9], #4
 800ac72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac76:	d8e5      	bhi.n	800ac44 <__mdiff+0x88>
 800ac78:	1b33      	subs	r3, r6, r4
 800ac7a:	3b15      	subs	r3, #21
 800ac7c:	f023 0303 	bic.w	r3, r3, #3
 800ac80:	3415      	adds	r4, #21
 800ac82:	3304      	adds	r3, #4
 800ac84:	42a6      	cmp	r6, r4
 800ac86:	bf38      	it	cc
 800ac88:	2304      	movcc	r3, #4
 800ac8a:	441d      	add	r5, r3
 800ac8c:	445b      	add	r3, fp
 800ac8e:	461e      	mov	r6, r3
 800ac90:	462c      	mov	r4, r5
 800ac92:	4544      	cmp	r4, r8
 800ac94:	d30e      	bcc.n	800acb4 <__mdiff+0xf8>
 800ac96:	f108 0103 	add.w	r1, r8, #3
 800ac9a:	1b49      	subs	r1, r1, r5
 800ac9c:	f021 0103 	bic.w	r1, r1, #3
 800aca0:	3d03      	subs	r5, #3
 800aca2:	45a8      	cmp	r8, r5
 800aca4:	bf38      	it	cc
 800aca6:	2100      	movcc	r1, #0
 800aca8:	440b      	add	r3, r1
 800acaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acae:	b191      	cbz	r1, 800acd6 <__mdiff+0x11a>
 800acb0:	6117      	str	r7, [r2, #16]
 800acb2:	e79d      	b.n	800abf0 <__mdiff+0x34>
 800acb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800acb8:	46e6      	mov	lr, ip
 800acba:	0c08      	lsrs	r0, r1, #16
 800acbc:	fa1c fc81 	uxtah	ip, ip, r1
 800acc0:	4471      	add	r1, lr
 800acc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acc6:	b289      	uxth	r1, r1
 800acc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800accc:	f846 1b04 	str.w	r1, [r6], #4
 800acd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acd4:	e7dd      	b.n	800ac92 <__mdiff+0xd6>
 800acd6:	3f01      	subs	r7, #1
 800acd8:	e7e7      	b.n	800acaa <__mdiff+0xee>
 800acda:	bf00      	nop
 800acdc:	0800c6e4 	.word	0x0800c6e4
 800ace0:	0800c6f5 	.word	0x0800c6f5

0800ace4 <__d2b>:
 800ace4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ace8:	460f      	mov	r7, r1
 800acea:	2101      	movs	r1, #1
 800acec:	ec59 8b10 	vmov	r8, r9, d0
 800acf0:	4616      	mov	r6, r2
 800acf2:	f7ff fccd 	bl	800a690 <_Balloc>
 800acf6:	4604      	mov	r4, r0
 800acf8:	b930      	cbnz	r0, 800ad08 <__d2b+0x24>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4b23      	ldr	r3, [pc, #140]	@ (800ad8c <__d2b+0xa8>)
 800acfe:	4824      	ldr	r0, [pc, #144]	@ (800ad90 <__d2b+0xac>)
 800ad00:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad04:	f000 fc3a 	bl	800b57c <__assert_func>
 800ad08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad10:	b10d      	cbz	r5, 800ad16 <__d2b+0x32>
 800ad12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	f1b8 0300 	subs.w	r3, r8, #0
 800ad1c:	d023      	beq.n	800ad66 <__d2b+0x82>
 800ad1e:	4668      	mov	r0, sp
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	f7ff fd7c 	bl	800a81e <__lo0bits>
 800ad26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad2a:	b1d0      	cbz	r0, 800ad62 <__d2b+0x7e>
 800ad2c:	f1c0 0320 	rsb	r3, r0, #32
 800ad30:	fa02 f303 	lsl.w	r3, r2, r3
 800ad34:	430b      	orrs	r3, r1
 800ad36:	40c2      	lsrs	r2, r0
 800ad38:	6163      	str	r3, [r4, #20]
 800ad3a:	9201      	str	r2, [sp, #4]
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	61a3      	str	r3, [r4, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	bf0c      	ite	eq
 800ad44:	2201      	moveq	r2, #1
 800ad46:	2202      	movne	r2, #2
 800ad48:	6122      	str	r2, [r4, #16]
 800ad4a:	b1a5      	cbz	r5, 800ad76 <__d2b+0x92>
 800ad4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad50:	4405      	add	r5, r0
 800ad52:	603d      	str	r5, [r7, #0]
 800ad54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad58:	6030      	str	r0, [r6, #0]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	b003      	add	sp, #12
 800ad5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad62:	6161      	str	r1, [r4, #20]
 800ad64:	e7ea      	b.n	800ad3c <__d2b+0x58>
 800ad66:	a801      	add	r0, sp, #4
 800ad68:	f7ff fd59 	bl	800a81e <__lo0bits>
 800ad6c:	9b01      	ldr	r3, [sp, #4]
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	3020      	adds	r0, #32
 800ad72:	2201      	movs	r2, #1
 800ad74:	e7e8      	b.n	800ad48 <__d2b+0x64>
 800ad76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad7e:	6038      	str	r0, [r7, #0]
 800ad80:	6918      	ldr	r0, [r3, #16]
 800ad82:	f7ff fd2d 	bl	800a7e0 <__hi0bits>
 800ad86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad8a:	e7e5      	b.n	800ad58 <__d2b+0x74>
 800ad8c:	0800c6e4 	.word	0x0800c6e4
 800ad90:	0800c6f5 	.word	0x0800c6f5

0800ad94 <__ssputs_r>:
 800ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	688e      	ldr	r6, [r1, #8]
 800ad9a:	461f      	mov	r7, r3
 800ad9c:	42be      	cmp	r6, r7
 800ad9e:	680b      	ldr	r3, [r1, #0]
 800ada0:	4682      	mov	sl, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4690      	mov	r8, r2
 800ada6:	d82d      	bhi.n	800ae04 <__ssputs_r+0x70>
 800ada8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adb0:	d026      	beq.n	800ae00 <__ssputs_r+0x6c>
 800adb2:	6965      	ldr	r5, [r4, #20]
 800adb4:	6909      	ldr	r1, [r1, #16]
 800adb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adba:	eba3 0901 	sub.w	r9, r3, r1
 800adbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adc2:	1c7b      	adds	r3, r7, #1
 800adc4:	444b      	add	r3, r9
 800adc6:	106d      	asrs	r5, r5, #1
 800adc8:	429d      	cmp	r5, r3
 800adca:	bf38      	it	cc
 800adcc:	461d      	movcc	r5, r3
 800adce:	0553      	lsls	r3, r2, #21
 800add0:	d527      	bpl.n	800ae22 <__ssputs_r+0x8e>
 800add2:	4629      	mov	r1, r5
 800add4:	f7ff fbd0 	bl	800a578 <_malloc_r>
 800add8:	4606      	mov	r6, r0
 800adda:	b360      	cbz	r0, 800ae36 <__ssputs_r+0xa2>
 800addc:	6921      	ldr	r1, [r4, #16]
 800adde:	464a      	mov	r2, r9
 800ade0:	f7fe fcf9 	bl	80097d6 <memcpy>
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	6126      	str	r6, [r4, #16]
 800adf2:	6165      	str	r5, [r4, #20]
 800adf4:	444e      	add	r6, r9
 800adf6:	eba5 0509 	sub.w	r5, r5, r9
 800adfa:	6026      	str	r6, [r4, #0]
 800adfc:	60a5      	str	r5, [r4, #8]
 800adfe:	463e      	mov	r6, r7
 800ae00:	42be      	cmp	r6, r7
 800ae02:	d900      	bls.n	800ae06 <__ssputs_r+0x72>
 800ae04:	463e      	mov	r6, r7
 800ae06:	6820      	ldr	r0, [r4, #0]
 800ae08:	4632      	mov	r2, r6
 800ae0a:	4641      	mov	r1, r8
 800ae0c:	f000 fb6a 	bl	800b4e4 <memmove>
 800ae10:	68a3      	ldr	r3, [r4, #8]
 800ae12:	1b9b      	subs	r3, r3, r6
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	4433      	add	r3, r6
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae22:	462a      	mov	r2, r5
 800ae24:	f000 fbee 	bl	800b604 <_realloc_r>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d1e0      	bne.n	800adf0 <__ssputs_r+0x5c>
 800ae2e:	6921      	ldr	r1, [r4, #16]
 800ae30:	4650      	mov	r0, sl
 800ae32:	f7ff fb2d 	bl	800a490 <_free_r>
 800ae36:	230c      	movs	r3, #12
 800ae38:	f8ca 3000 	str.w	r3, [sl]
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
 800ae48:	e7e9      	b.n	800ae1e <__ssputs_r+0x8a>
	...

0800ae4c <_svfiprintf_r>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	4698      	mov	r8, r3
 800ae52:	898b      	ldrh	r3, [r1, #12]
 800ae54:	061b      	lsls	r3, r3, #24
 800ae56:	b09d      	sub	sp, #116	@ 0x74
 800ae58:	4607      	mov	r7, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	d510      	bpl.n	800ae82 <_svfiprintf_r+0x36>
 800ae60:	690b      	ldr	r3, [r1, #16]
 800ae62:	b973      	cbnz	r3, 800ae82 <_svfiprintf_r+0x36>
 800ae64:	2140      	movs	r1, #64	@ 0x40
 800ae66:	f7ff fb87 	bl	800a578 <_malloc_r>
 800ae6a:	6028      	str	r0, [r5, #0]
 800ae6c:	6128      	str	r0, [r5, #16]
 800ae6e:	b930      	cbnz	r0, 800ae7e <_svfiprintf_r+0x32>
 800ae70:	230c      	movs	r3, #12
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	b01d      	add	sp, #116	@ 0x74
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	2340      	movs	r3, #64	@ 0x40
 800ae80:	616b      	str	r3, [r5, #20]
 800ae82:	2300      	movs	r3, #0
 800ae84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae86:	2320      	movs	r3, #32
 800ae88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae90:	2330      	movs	r3, #48	@ 0x30
 800ae92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b030 <_svfiprintf_r+0x1e4>
 800ae96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae9a:	f04f 0901 	mov.w	r9, #1
 800ae9e:	4623      	mov	r3, r4
 800aea0:	469a      	mov	sl, r3
 800aea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea6:	b10a      	cbz	r2, 800aeac <_svfiprintf_r+0x60>
 800aea8:	2a25      	cmp	r2, #37	@ 0x25
 800aeaa:	d1f9      	bne.n	800aea0 <_svfiprintf_r+0x54>
 800aeac:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb0:	d00b      	beq.n	800aeca <_svfiprintf_r+0x7e>
 800aeb2:	465b      	mov	r3, fp
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f7ff ff6b 	bl	800ad94 <__ssputs_r>
 800aebe:	3001      	adds	r0, #1
 800aec0:	f000 80a7 	beq.w	800b012 <_svfiprintf_r+0x1c6>
 800aec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aec6:	445a      	add	r2, fp
 800aec8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeca:	f89a 3000 	ldrb.w	r3, [sl]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 809f 	beq.w	800b012 <_svfiprintf_r+0x1c6>
 800aed4:	2300      	movs	r3, #0
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aede:	f10a 0a01 	add.w	sl, sl, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	9307      	str	r3, [sp, #28]
 800aee6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aeea:	931a      	str	r3, [sp, #104]	@ 0x68
 800aeec:	4654      	mov	r4, sl
 800aeee:	2205      	movs	r2, #5
 800aef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef4:	484e      	ldr	r0, [pc, #312]	@ (800b030 <_svfiprintf_r+0x1e4>)
 800aef6:	f7f5 f96b 	bl	80001d0 <memchr>
 800aefa:	9a04      	ldr	r2, [sp, #16]
 800aefc:	b9d8      	cbnz	r0, 800af36 <_svfiprintf_r+0xea>
 800aefe:	06d0      	lsls	r0, r2, #27
 800af00:	bf44      	itt	mi
 800af02:	2320      	movmi	r3, #32
 800af04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af08:	0711      	lsls	r1, r2, #28
 800af0a:	bf44      	itt	mi
 800af0c:	232b      	movmi	r3, #43	@ 0x2b
 800af0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af12:	f89a 3000 	ldrb.w	r3, [sl]
 800af16:	2b2a      	cmp	r3, #42	@ 0x2a
 800af18:	d015      	beq.n	800af46 <_svfiprintf_r+0xfa>
 800af1a:	9a07      	ldr	r2, [sp, #28]
 800af1c:	4654      	mov	r4, sl
 800af1e:	2000      	movs	r0, #0
 800af20:	f04f 0c0a 	mov.w	ip, #10
 800af24:	4621      	mov	r1, r4
 800af26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af2a:	3b30      	subs	r3, #48	@ 0x30
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	d94b      	bls.n	800afc8 <_svfiprintf_r+0x17c>
 800af30:	b1b0      	cbz	r0, 800af60 <_svfiprintf_r+0x114>
 800af32:	9207      	str	r2, [sp, #28]
 800af34:	e014      	b.n	800af60 <_svfiprintf_r+0x114>
 800af36:	eba0 0308 	sub.w	r3, r0, r8
 800af3a:	fa09 f303 	lsl.w	r3, r9, r3
 800af3e:	4313      	orrs	r3, r2
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	46a2      	mov	sl, r4
 800af44:	e7d2      	b.n	800aeec <_svfiprintf_r+0xa0>
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	1d19      	adds	r1, r3, #4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	9103      	str	r1, [sp, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfbb      	ittet	lt
 800af52:	425b      	neglt	r3, r3
 800af54:	f042 0202 	orrlt.w	r2, r2, #2
 800af58:	9307      	strge	r3, [sp, #28]
 800af5a:	9307      	strlt	r3, [sp, #28]
 800af5c:	bfb8      	it	lt
 800af5e:	9204      	strlt	r2, [sp, #16]
 800af60:	7823      	ldrb	r3, [r4, #0]
 800af62:	2b2e      	cmp	r3, #46	@ 0x2e
 800af64:	d10a      	bne.n	800af7c <_svfiprintf_r+0x130>
 800af66:	7863      	ldrb	r3, [r4, #1]
 800af68:	2b2a      	cmp	r3, #42	@ 0x2a
 800af6a:	d132      	bne.n	800afd2 <_svfiprintf_r+0x186>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	1d1a      	adds	r2, r3, #4
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	9203      	str	r2, [sp, #12]
 800af74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af78:	3402      	adds	r4, #2
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b040 <_svfiprintf_r+0x1f4>
 800af80:	7821      	ldrb	r1, [r4, #0]
 800af82:	2203      	movs	r2, #3
 800af84:	4650      	mov	r0, sl
 800af86:	f7f5 f923 	bl	80001d0 <memchr>
 800af8a:	b138      	cbz	r0, 800af9c <_svfiprintf_r+0x150>
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	eba0 000a 	sub.w	r0, r0, sl
 800af92:	2240      	movs	r2, #64	@ 0x40
 800af94:	4082      	lsls	r2, r0
 800af96:	4313      	orrs	r3, r2
 800af98:	3401      	adds	r4, #1
 800af9a:	9304      	str	r3, [sp, #16]
 800af9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa0:	4824      	ldr	r0, [pc, #144]	@ (800b034 <_svfiprintf_r+0x1e8>)
 800afa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afa6:	2206      	movs	r2, #6
 800afa8:	f7f5 f912 	bl	80001d0 <memchr>
 800afac:	2800      	cmp	r0, #0
 800afae:	d036      	beq.n	800b01e <_svfiprintf_r+0x1d2>
 800afb0:	4b21      	ldr	r3, [pc, #132]	@ (800b038 <_svfiprintf_r+0x1ec>)
 800afb2:	bb1b      	cbnz	r3, 800affc <_svfiprintf_r+0x1b0>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	3307      	adds	r3, #7
 800afb8:	f023 0307 	bic.w	r3, r3, #7
 800afbc:	3308      	adds	r3, #8
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc2:	4433      	add	r3, r6
 800afc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc6:	e76a      	b.n	800ae9e <_svfiprintf_r+0x52>
 800afc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afcc:	460c      	mov	r4, r1
 800afce:	2001      	movs	r0, #1
 800afd0:	e7a8      	b.n	800af24 <_svfiprintf_r+0xd8>
 800afd2:	2300      	movs	r3, #0
 800afd4:	3401      	adds	r4, #1
 800afd6:	9305      	str	r3, [sp, #20]
 800afd8:	4619      	mov	r1, r3
 800afda:	f04f 0c0a 	mov.w	ip, #10
 800afde:	4620      	mov	r0, r4
 800afe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe4:	3a30      	subs	r2, #48	@ 0x30
 800afe6:	2a09      	cmp	r2, #9
 800afe8:	d903      	bls.n	800aff2 <_svfiprintf_r+0x1a6>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0c6      	beq.n	800af7c <_svfiprintf_r+0x130>
 800afee:	9105      	str	r1, [sp, #20]
 800aff0:	e7c4      	b.n	800af7c <_svfiprintf_r+0x130>
 800aff2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff6:	4604      	mov	r4, r0
 800aff8:	2301      	movs	r3, #1
 800affa:	e7f0      	b.n	800afde <_svfiprintf_r+0x192>
 800affc:	ab03      	add	r3, sp, #12
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	462a      	mov	r2, r5
 800b002:	4b0e      	ldr	r3, [pc, #56]	@ (800b03c <_svfiprintf_r+0x1f0>)
 800b004:	a904      	add	r1, sp, #16
 800b006:	4638      	mov	r0, r7
 800b008:	f7fd fd60 	bl	8008acc <_printf_float>
 800b00c:	1c42      	adds	r2, r0, #1
 800b00e:	4606      	mov	r6, r0
 800b010:	d1d6      	bne.n	800afc0 <_svfiprintf_r+0x174>
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	065b      	lsls	r3, r3, #25
 800b016:	f53f af2d 	bmi.w	800ae74 <_svfiprintf_r+0x28>
 800b01a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b01c:	e72c      	b.n	800ae78 <_svfiprintf_r+0x2c>
 800b01e:	ab03      	add	r3, sp, #12
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	462a      	mov	r2, r5
 800b024:	4b05      	ldr	r3, [pc, #20]	@ (800b03c <_svfiprintf_r+0x1f0>)
 800b026:	a904      	add	r1, sp, #16
 800b028:	4638      	mov	r0, r7
 800b02a:	f7fd ffe7 	bl	8008ffc <_printf_i>
 800b02e:	e7ed      	b.n	800b00c <_svfiprintf_r+0x1c0>
 800b030:	0800c850 	.word	0x0800c850
 800b034:	0800c85a 	.word	0x0800c85a
 800b038:	08008acd 	.word	0x08008acd
 800b03c:	0800ad95 	.word	0x0800ad95
 800b040:	0800c856 	.word	0x0800c856

0800b044 <__sfputc_r>:
 800b044:	6893      	ldr	r3, [r2, #8]
 800b046:	3b01      	subs	r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	b410      	push	{r4}
 800b04c:	6093      	str	r3, [r2, #8]
 800b04e:	da08      	bge.n	800b062 <__sfputc_r+0x1e>
 800b050:	6994      	ldr	r4, [r2, #24]
 800b052:	42a3      	cmp	r3, r4
 800b054:	db01      	blt.n	800b05a <__sfputc_r+0x16>
 800b056:	290a      	cmp	r1, #10
 800b058:	d103      	bne.n	800b062 <__sfputc_r+0x1e>
 800b05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b05e:	f7fe ba96 	b.w	800958e <__swbuf_r>
 800b062:	6813      	ldr	r3, [r2, #0]
 800b064:	1c58      	adds	r0, r3, #1
 800b066:	6010      	str	r0, [r2, #0]
 800b068:	7019      	strb	r1, [r3, #0]
 800b06a:	4608      	mov	r0, r1
 800b06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <__sfputs_r>:
 800b072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	4614      	mov	r4, r2
 800b07a:	18d5      	adds	r5, r2, r3
 800b07c:	42ac      	cmp	r4, r5
 800b07e:	d101      	bne.n	800b084 <__sfputs_r+0x12>
 800b080:	2000      	movs	r0, #0
 800b082:	e007      	b.n	800b094 <__sfputs_r+0x22>
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	463a      	mov	r2, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ffda 	bl	800b044 <__sfputc_r>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d1f3      	bne.n	800b07c <__sfputs_r+0xa>
 800b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b098 <_vfiprintf_r>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	460d      	mov	r5, r1
 800b09e:	b09d      	sub	sp, #116	@ 0x74
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	4698      	mov	r8, r3
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	b118      	cbz	r0, 800b0b0 <_vfiprintf_r+0x18>
 800b0a8:	6a03      	ldr	r3, [r0, #32]
 800b0aa:	b90b      	cbnz	r3, 800b0b0 <_vfiprintf_r+0x18>
 800b0ac:	f7fe f952 	bl	8009354 <__sinit>
 800b0b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0b2:	07d9      	lsls	r1, r3, #31
 800b0b4:	d405      	bmi.n	800b0c2 <_vfiprintf_r+0x2a>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	059a      	lsls	r2, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_vfiprintf_r+0x2a>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7fe fb88 	bl	80097d2 <__retarget_lock_acquire_recursive>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	071b      	lsls	r3, r3, #28
 800b0c6:	d501      	bpl.n	800b0cc <_vfiprintf_r+0x34>
 800b0c8:	692b      	ldr	r3, [r5, #16]
 800b0ca:	b99b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x5c>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7fe fa9c 	bl	800960c <__swsetup_r>
 800b0d4:	b170      	cbz	r0, 800b0f4 <_vfiprintf_r+0x5c>
 800b0d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0d8:	07dc      	lsls	r4, r3, #31
 800b0da:	d504      	bpl.n	800b0e6 <_vfiprintf_r+0x4e>
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	b01d      	add	sp, #116	@ 0x74
 800b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	0598      	lsls	r0, r3, #22
 800b0ea:	d4f7      	bmi.n	800b0dc <_vfiprintf_r+0x44>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ee:	f7fe fb71 	bl	80097d4 <__retarget_lock_release_recursive>
 800b0f2:	e7f3      	b.n	800b0dc <_vfiprintf_r+0x44>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f8:	2320      	movs	r3, #32
 800b0fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b102:	2330      	movs	r3, #48	@ 0x30
 800b104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2b4 <_vfiprintf_r+0x21c>
 800b108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b10c:	f04f 0901 	mov.w	r9, #1
 800b110:	4623      	mov	r3, r4
 800b112:	469a      	mov	sl, r3
 800b114:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b118:	b10a      	cbz	r2, 800b11e <_vfiprintf_r+0x86>
 800b11a:	2a25      	cmp	r2, #37	@ 0x25
 800b11c:	d1f9      	bne.n	800b112 <_vfiprintf_r+0x7a>
 800b11e:	ebba 0b04 	subs.w	fp, sl, r4
 800b122:	d00b      	beq.n	800b13c <_vfiprintf_r+0xa4>
 800b124:	465b      	mov	r3, fp
 800b126:	4622      	mov	r2, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	4630      	mov	r0, r6
 800b12c:	f7ff ffa1 	bl	800b072 <__sfputs_r>
 800b130:	3001      	adds	r0, #1
 800b132:	f000 80a7 	beq.w	800b284 <_vfiprintf_r+0x1ec>
 800b136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b138:	445a      	add	r2, fp
 800b13a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b13c:	f89a 3000 	ldrb.w	r3, [sl]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 809f 	beq.w	800b284 <_vfiprintf_r+0x1ec>
 800b146:	2300      	movs	r3, #0
 800b148:	f04f 32ff 	mov.w	r2, #4294967295
 800b14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b150:	f10a 0a01 	add.w	sl, sl, #1
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	9307      	str	r3, [sp, #28]
 800b158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b15c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b15e:	4654      	mov	r4, sl
 800b160:	2205      	movs	r2, #5
 800b162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b166:	4853      	ldr	r0, [pc, #332]	@ (800b2b4 <_vfiprintf_r+0x21c>)
 800b168:	f7f5 f832 	bl	80001d0 <memchr>
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	b9d8      	cbnz	r0, 800b1a8 <_vfiprintf_r+0x110>
 800b170:	06d1      	lsls	r1, r2, #27
 800b172:	bf44      	itt	mi
 800b174:	2320      	movmi	r3, #32
 800b176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b17a:	0713      	lsls	r3, r2, #28
 800b17c:	bf44      	itt	mi
 800b17e:	232b      	movmi	r3, #43	@ 0x2b
 800b180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b184:	f89a 3000 	ldrb.w	r3, [sl]
 800b188:	2b2a      	cmp	r3, #42	@ 0x2a
 800b18a:	d015      	beq.n	800b1b8 <_vfiprintf_r+0x120>
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	4654      	mov	r4, sl
 800b190:	2000      	movs	r0, #0
 800b192:	f04f 0c0a 	mov.w	ip, #10
 800b196:	4621      	mov	r1, r4
 800b198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b19c:	3b30      	subs	r3, #48	@ 0x30
 800b19e:	2b09      	cmp	r3, #9
 800b1a0:	d94b      	bls.n	800b23a <_vfiprintf_r+0x1a2>
 800b1a2:	b1b0      	cbz	r0, 800b1d2 <_vfiprintf_r+0x13a>
 800b1a4:	9207      	str	r2, [sp, #28]
 800b1a6:	e014      	b.n	800b1d2 <_vfiprintf_r+0x13a>
 800b1a8:	eba0 0308 	sub.w	r3, r0, r8
 800b1ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	46a2      	mov	sl, r4
 800b1b6:	e7d2      	b.n	800b15e <_vfiprintf_r+0xc6>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	1d19      	adds	r1, r3, #4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	9103      	str	r1, [sp, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfbb      	ittet	lt
 800b1c4:	425b      	neglt	r3, r3
 800b1c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ca:	9307      	strge	r3, [sp, #28]
 800b1cc:	9307      	strlt	r3, [sp, #28]
 800b1ce:	bfb8      	it	lt
 800b1d0:	9204      	strlt	r2, [sp, #16]
 800b1d2:	7823      	ldrb	r3, [r4, #0]
 800b1d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d6:	d10a      	bne.n	800b1ee <_vfiprintf_r+0x156>
 800b1d8:	7863      	ldrb	r3, [r4, #1]
 800b1da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1dc:	d132      	bne.n	800b244 <_vfiprintf_r+0x1ac>
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	9203      	str	r2, [sp, #12]
 800b1e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ea:	3402      	adds	r4, #2
 800b1ec:	9305      	str	r3, [sp, #20]
 800b1ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2c4 <_vfiprintf_r+0x22c>
 800b1f2:	7821      	ldrb	r1, [r4, #0]
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f7f4 ffea 	bl	80001d0 <memchr>
 800b1fc:	b138      	cbz	r0, 800b20e <_vfiprintf_r+0x176>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	eba0 000a 	sub.w	r0, r0, sl
 800b204:	2240      	movs	r2, #64	@ 0x40
 800b206:	4082      	lsls	r2, r0
 800b208:	4313      	orrs	r3, r2
 800b20a:	3401      	adds	r4, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	4829      	ldr	r0, [pc, #164]	@ (800b2b8 <_vfiprintf_r+0x220>)
 800b214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b218:	2206      	movs	r2, #6
 800b21a:	f7f4 ffd9 	bl	80001d0 <memchr>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d03f      	beq.n	800b2a2 <_vfiprintf_r+0x20a>
 800b222:	4b26      	ldr	r3, [pc, #152]	@ (800b2bc <_vfiprintf_r+0x224>)
 800b224:	bb1b      	cbnz	r3, 800b26e <_vfiprintf_r+0x1d6>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3307      	adds	r3, #7
 800b22a:	f023 0307 	bic.w	r3, r3, #7
 800b22e:	3308      	adds	r3, #8
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b234:	443b      	add	r3, r7
 800b236:	9309      	str	r3, [sp, #36]	@ 0x24
 800b238:	e76a      	b.n	800b110 <_vfiprintf_r+0x78>
 800b23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b23e:	460c      	mov	r4, r1
 800b240:	2001      	movs	r0, #1
 800b242:	e7a8      	b.n	800b196 <_vfiprintf_r+0xfe>
 800b244:	2300      	movs	r3, #0
 800b246:	3401      	adds	r4, #1
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	4619      	mov	r1, r3
 800b24c:	f04f 0c0a 	mov.w	ip, #10
 800b250:	4620      	mov	r0, r4
 800b252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b256:	3a30      	subs	r2, #48	@ 0x30
 800b258:	2a09      	cmp	r2, #9
 800b25a:	d903      	bls.n	800b264 <_vfiprintf_r+0x1cc>
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0c6      	beq.n	800b1ee <_vfiprintf_r+0x156>
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	e7c4      	b.n	800b1ee <_vfiprintf_r+0x156>
 800b264:	fb0c 2101 	mla	r1, ip, r1, r2
 800b268:	4604      	mov	r4, r0
 800b26a:	2301      	movs	r3, #1
 800b26c:	e7f0      	b.n	800b250 <_vfiprintf_r+0x1b8>
 800b26e:	ab03      	add	r3, sp, #12
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	462a      	mov	r2, r5
 800b274:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <_vfiprintf_r+0x228>)
 800b276:	a904      	add	r1, sp, #16
 800b278:	4630      	mov	r0, r6
 800b27a:	f7fd fc27 	bl	8008acc <_printf_float>
 800b27e:	4607      	mov	r7, r0
 800b280:	1c78      	adds	r0, r7, #1
 800b282:	d1d6      	bne.n	800b232 <_vfiprintf_r+0x19a>
 800b284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b286:	07d9      	lsls	r1, r3, #31
 800b288:	d405      	bmi.n	800b296 <_vfiprintf_r+0x1fe>
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	059a      	lsls	r2, r3, #22
 800b28e:	d402      	bmi.n	800b296 <_vfiprintf_r+0x1fe>
 800b290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b292:	f7fe fa9f 	bl	80097d4 <__retarget_lock_release_recursive>
 800b296:	89ab      	ldrh	r3, [r5, #12]
 800b298:	065b      	lsls	r3, r3, #25
 800b29a:	f53f af1f 	bmi.w	800b0dc <_vfiprintf_r+0x44>
 800b29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a0:	e71e      	b.n	800b0e0 <_vfiprintf_r+0x48>
 800b2a2:	ab03      	add	r3, sp, #12
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <_vfiprintf_r+0x228>)
 800b2aa:	a904      	add	r1, sp, #16
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7fd fea5 	bl	8008ffc <_printf_i>
 800b2b2:	e7e4      	b.n	800b27e <_vfiprintf_r+0x1e6>
 800b2b4:	0800c850 	.word	0x0800c850
 800b2b8:	0800c85a 	.word	0x0800c85a
 800b2bc:	08008acd 	.word	0x08008acd
 800b2c0:	0800b073 	.word	0x0800b073
 800b2c4:	0800c856 	.word	0x0800c856

0800b2c8 <__sflush_r>:
 800b2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d0:	0716      	lsls	r6, r2, #28
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	d454      	bmi.n	800b382 <__sflush_r+0xba>
 800b2d8:	684b      	ldr	r3, [r1, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dc02      	bgt.n	800b2e4 <__sflush_r+0x1c>
 800b2de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dd48      	ble.n	800b376 <__sflush_r+0xae>
 800b2e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d045      	beq.n	800b376 <__sflush_r+0xae>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2f0:	682f      	ldr	r7, [r5, #0]
 800b2f2:	6a21      	ldr	r1, [r4, #32]
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	d030      	beq.n	800b35a <__sflush_r+0x92>
 800b2f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	0759      	lsls	r1, r3, #29
 800b2fe:	d505      	bpl.n	800b30c <__sflush_r+0x44>
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	1ad2      	subs	r2, r2, r3
 800b304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b306:	b10b      	cbz	r3, 800b30c <__sflush_r+0x44>
 800b308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b30a:	1ad2      	subs	r2, r2, r3
 800b30c:	2300      	movs	r3, #0
 800b30e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	4628      	mov	r0, r5
 800b314:	47b0      	blx	r6
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	d106      	bne.n	800b32a <__sflush_r+0x62>
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	291d      	cmp	r1, #29
 800b320:	d82b      	bhi.n	800b37a <__sflush_r+0xb2>
 800b322:	4a2a      	ldr	r2, [pc, #168]	@ (800b3cc <__sflush_r+0x104>)
 800b324:	410a      	asrs	r2, r1
 800b326:	07d6      	lsls	r6, r2, #31
 800b328:	d427      	bmi.n	800b37a <__sflush_r+0xb2>
 800b32a:	2200      	movs	r2, #0
 800b32c:	6062      	str	r2, [r4, #4]
 800b32e:	04d9      	lsls	r1, r3, #19
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	d504      	bpl.n	800b340 <__sflush_r+0x78>
 800b336:	1c42      	adds	r2, r0, #1
 800b338:	d101      	bne.n	800b33e <__sflush_r+0x76>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b903      	cbnz	r3, 800b340 <__sflush_r+0x78>
 800b33e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b342:	602f      	str	r7, [r5, #0]
 800b344:	b1b9      	cbz	r1, 800b376 <__sflush_r+0xae>
 800b346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b34a:	4299      	cmp	r1, r3
 800b34c:	d002      	beq.n	800b354 <__sflush_r+0x8c>
 800b34e:	4628      	mov	r0, r5
 800b350:	f7ff f89e 	bl	800a490 <_free_r>
 800b354:	2300      	movs	r3, #0
 800b356:	6363      	str	r3, [r4, #52]	@ 0x34
 800b358:	e00d      	b.n	800b376 <__sflush_r+0xae>
 800b35a:	2301      	movs	r3, #1
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	4602      	mov	r2, r0
 800b362:	1c50      	adds	r0, r2, #1
 800b364:	d1c9      	bne.n	800b2fa <__sflush_r+0x32>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0c6      	beq.n	800b2fa <__sflush_r+0x32>
 800b36c:	2b1d      	cmp	r3, #29
 800b36e:	d001      	beq.n	800b374 <__sflush_r+0xac>
 800b370:	2b16      	cmp	r3, #22
 800b372:	d11e      	bne.n	800b3b2 <__sflush_r+0xea>
 800b374:	602f      	str	r7, [r5, #0]
 800b376:	2000      	movs	r0, #0
 800b378:	e022      	b.n	800b3c0 <__sflush_r+0xf8>
 800b37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b37e:	b21b      	sxth	r3, r3
 800b380:	e01b      	b.n	800b3ba <__sflush_r+0xf2>
 800b382:	690f      	ldr	r7, [r1, #16]
 800b384:	2f00      	cmp	r7, #0
 800b386:	d0f6      	beq.n	800b376 <__sflush_r+0xae>
 800b388:	0793      	lsls	r3, r2, #30
 800b38a:	680e      	ldr	r6, [r1, #0]
 800b38c:	bf08      	it	eq
 800b38e:	694b      	ldreq	r3, [r1, #20]
 800b390:	600f      	str	r7, [r1, #0]
 800b392:	bf18      	it	ne
 800b394:	2300      	movne	r3, #0
 800b396:	eba6 0807 	sub.w	r8, r6, r7
 800b39a:	608b      	str	r3, [r1, #8]
 800b39c:	f1b8 0f00 	cmp.w	r8, #0
 800b3a0:	dde9      	ble.n	800b376 <__sflush_r+0xae>
 800b3a2:	6a21      	ldr	r1, [r4, #32]
 800b3a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3a6:	4643      	mov	r3, r8
 800b3a8:	463a      	mov	r2, r7
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b0      	blx	r6
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	dc08      	bgt.n	800b3c4 <__sflush_r+0xfc>
 800b3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	4407      	add	r7, r0
 800b3c6:	eba8 0800 	sub.w	r8, r8, r0
 800b3ca:	e7e7      	b.n	800b39c <__sflush_r+0xd4>
 800b3cc:	dfbffffe 	.word	0xdfbffffe

0800b3d0 <_fflush_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	690b      	ldr	r3, [r1, #16]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b913      	cbnz	r3, 800b3e0 <_fflush_r+0x10>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	4628      	mov	r0, r5
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	b118      	cbz	r0, 800b3ea <_fflush_r+0x1a>
 800b3e2:	6a03      	ldr	r3, [r0, #32]
 800b3e4:	b90b      	cbnz	r3, 800b3ea <_fflush_r+0x1a>
 800b3e6:	f7fd ffb5 	bl	8009354 <__sinit>
 800b3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f3      	beq.n	800b3da <_fflush_r+0xa>
 800b3f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3f4:	07d0      	lsls	r0, r2, #31
 800b3f6:	d404      	bmi.n	800b402 <_fflush_r+0x32>
 800b3f8:	0599      	lsls	r1, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_fflush_r+0x32>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3fe:	f7fe f9e8 	bl	80097d2 <__retarget_lock_acquire_recursive>
 800b402:	4628      	mov	r0, r5
 800b404:	4621      	mov	r1, r4
 800b406:	f7ff ff5f 	bl	800b2c8 <__sflush_r>
 800b40a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b40c:	07da      	lsls	r2, r3, #31
 800b40e:	4605      	mov	r5, r0
 800b410:	d4e4      	bmi.n	800b3dc <_fflush_r+0xc>
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	059b      	lsls	r3, r3, #22
 800b416:	d4e1      	bmi.n	800b3dc <_fflush_r+0xc>
 800b418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b41a:	f7fe f9db 	bl	80097d4 <__retarget_lock_release_recursive>
 800b41e:	e7dd      	b.n	800b3dc <_fflush_r+0xc>

0800b420 <__swhatbuf_r>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	460c      	mov	r4, r1
 800b424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b428:	2900      	cmp	r1, #0
 800b42a:	b096      	sub	sp, #88	@ 0x58
 800b42c:	4615      	mov	r5, r2
 800b42e:	461e      	mov	r6, r3
 800b430:	da0d      	bge.n	800b44e <__swhatbuf_r+0x2e>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b438:	f04f 0100 	mov.w	r1, #0
 800b43c:	bf14      	ite	ne
 800b43e:	2340      	movne	r3, #64	@ 0x40
 800b440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b444:	2000      	movs	r0, #0
 800b446:	6031      	str	r1, [r6, #0]
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	b016      	add	sp, #88	@ 0x58
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
 800b44e:	466a      	mov	r2, sp
 800b450:	f000 f862 	bl	800b518 <_fstat_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	dbec      	blt.n	800b432 <__swhatbuf_r+0x12>
 800b458:	9901      	ldr	r1, [sp, #4]
 800b45a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b45e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b462:	4259      	negs	r1, r3
 800b464:	4159      	adcs	r1, r3
 800b466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b46a:	e7eb      	b.n	800b444 <__swhatbuf_r+0x24>

0800b46c <__smakebuf_r>:
 800b46c:	898b      	ldrh	r3, [r1, #12]
 800b46e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b470:	079d      	lsls	r5, r3, #30
 800b472:	4606      	mov	r6, r0
 800b474:	460c      	mov	r4, r1
 800b476:	d507      	bpl.n	800b488 <__smakebuf_r+0x1c>
 800b478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	2301      	movs	r3, #1
 800b482:	6163      	str	r3, [r4, #20]
 800b484:	b003      	add	sp, #12
 800b486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b488:	ab01      	add	r3, sp, #4
 800b48a:	466a      	mov	r2, sp
 800b48c:	f7ff ffc8 	bl	800b420 <__swhatbuf_r>
 800b490:	9f00      	ldr	r7, [sp, #0]
 800b492:	4605      	mov	r5, r0
 800b494:	4639      	mov	r1, r7
 800b496:	4630      	mov	r0, r6
 800b498:	f7ff f86e 	bl	800a578 <_malloc_r>
 800b49c:	b948      	cbnz	r0, 800b4b2 <__smakebuf_r+0x46>
 800b49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a2:	059a      	lsls	r2, r3, #22
 800b4a4:	d4ee      	bmi.n	800b484 <__smakebuf_r+0x18>
 800b4a6:	f023 0303 	bic.w	r3, r3, #3
 800b4aa:	f043 0302 	orr.w	r3, r3, #2
 800b4ae:	81a3      	strh	r3, [r4, #12]
 800b4b0:	e7e2      	b.n	800b478 <__smakebuf_r+0xc>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	6020      	str	r0, [r4, #0]
 800b4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4c2:	b15b      	cbz	r3, 800b4dc <__smakebuf_r+0x70>
 800b4c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f000 f837 	bl	800b53c <_isatty_r>
 800b4ce:	b128      	cbz	r0, 800b4dc <__smakebuf_r+0x70>
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	f043 0301 	orr.w	r3, r3, #1
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	431d      	orrs	r5, r3
 800b4e0:	81a5      	strh	r5, [r4, #12]
 800b4e2:	e7cf      	b.n	800b484 <__smakebuf_r+0x18>

0800b4e4 <memmove>:
 800b4e4:	4288      	cmp	r0, r1
 800b4e6:	b510      	push	{r4, lr}
 800b4e8:	eb01 0402 	add.w	r4, r1, r2
 800b4ec:	d902      	bls.n	800b4f4 <memmove+0x10>
 800b4ee:	4284      	cmp	r4, r0
 800b4f0:	4623      	mov	r3, r4
 800b4f2:	d807      	bhi.n	800b504 <memmove+0x20>
 800b4f4:	1e43      	subs	r3, r0, #1
 800b4f6:	42a1      	cmp	r1, r4
 800b4f8:	d008      	beq.n	800b50c <memmove+0x28>
 800b4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b502:	e7f8      	b.n	800b4f6 <memmove+0x12>
 800b504:	4402      	add	r2, r0
 800b506:	4601      	mov	r1, r0
 800b508:	428a      	cmp	r2, r1
 800b50a:	d100      	bne.n	800b50e <memmove+0x2a>
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b516:	e7f7      	b.n	800b508 <memmove+0x24>

0800b518 <_fstat_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d07      	ldr	r5, [pc, #28]	@ (800b538 <_fstat_r+0x20>)
 800b51c:	2300      	movs	r3, #0
 800b51e:	4604      	mov	r4, r0
 800b520:	4608      	mov	r0, r1
 800b522:	4611      	mov	r1, r2
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	f7f6 fc13 	bl	8001d50 <_fstat>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d102      	bne.n	800b534 <_fstat_r+0x1c>
 800b52e:	682b      	ldr	r3, [r5, #0]
 800b530:	b103      	cbz	r3, 800b534 <_fstat_r+0x1c>
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	bd38      	pop	{r3, r4, r5, pc}
 800b536:	bf00      	nop
 800b538:	20000b50 	.word	0x20000b50

0800b53c <_isatty_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	@ (800b558 <_isatty_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7f6 fc12 	bl	8001d70 <_isatty>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_isatty_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_isatty_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20000b50 	.word	0x20000b50

0800b55c <_sbrk_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d06      	ldr	r5, [pc, #24]	@ (800b578 <_sbrk_r+0x1c>)
 800b560:	2300      	movs	r3, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	f7f6 fc1a 	bl	8001da0 <_sbrk>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_sbrk_r+0x1a>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_sbrk_r+0x1a>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20000b50 	.word	0x20000b50

0800b57c <__assert_func>:
 800b57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b57e:	4614      	mov	r4, r2
 800b580:	461a      	mov	r2, r3
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <__assert_func+0x2c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4605      	mov	r5, r0
 800b588:	68d8      	ldr	r0, [r3, #12]
 800b58a:	b954      	cbnz	r4, 800b5a2 <__assert_func+0x26>
 800b58c:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <__assert_func+0x30>)
 800b58e:	461c      	mov	r4, r3
 800b590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b594:	9100      	str	r1, [sp, #0]
 800b596:	462b      	mov	r3, r5
 800b598:	4905      	ldr	r1, [pc, #20]	@ (800b5b0 <__assert_func+0x34>)
 800b59a:	f000 f86f 	bl	800b67c <fiprintf>
 800b59e:	f000 f87f 	bl	800b6a0 <abort>
 800b5a2:	4b04      	ldr	r3, [pc, #16]	@ (800b5b4 <__assert_func+0x38>)
 800b5a4:	e7f4      	b.n	800b590 <__assert_func+0x14>
 800b5a6:	bf00      	nop
 800b5a8:	200000a8 	.word	0x200000a8
 800b5ac:	0800c8a6 	.word	0x0800c8a6
 800b5b0:	0800c878 	.word	0x0800c878
 800b5b4:	0800c86b 	.word	0x0800c86b

0800b5b8 <_calloc_r>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	fba1 5402 	umull	r5, r4, r1, r2
 800b5be:	b93c      	cbnz	r4, 800b5d0 <_calloc_r+0x18>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7fe ffd9 	bl	800a578 <_malloc_r>
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	b928      	cbnz	r0, 800b5d6 <_calloc_r+0x1e>
 800b5ca:	2600      	movs	r6, #0
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	220c      	movs	r2, #12
 800b5d2:	6002      	str	r2, [r0, #0]
 800b5d4:	e7f9      	b.n	800b5ca <_calloc_r+0x12>
 800b5d6:	462a      	mov	r2, r5
 800b5d8:	4621      	mov	r1, r4
 800b5da:	f7fe f86d 	bl	80096b8 <memset>
 800b5de:	e7f5      	b.n	800b5cc <_calloc_r+0x14>

0800b5e0 <__ascii_mbtowc>:
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	b901      	cbnz	r1, 800b5e6 <__ascii_mbtowc+0x6>
 800b5e4:	a901      	add	r1, sp, #4
 800b5e6:	b142      	cbz	r2, 800b5fa <__ascii_mbtowc+0x1a>
 800b5e8:	b14b      	cbz	r3, 800b5fe <__ascii_mbtowc+0x1e>
 800b5ea:	7813      	ldrb	r3, [r2, #0]
 800b5ec:	600b      	str	r3, [r1, #0]
 800b5ee:	7812      	ldrb	r2, [r2, #0]
 800b5f0:	1e10      	subs	r0, r2, #0
 800b5f2:	bf18      	it	ne
 800b5f4:	2001      	movne	r0, #1
 800b5f6:	b002      	add	sp, #8
 800b5f8:	4770      	bx	lr
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	e7fb      	b.n	800b5f6 <__ascii_mbtowc+0x16>
 800b5fe:	f06f 0001 	mvn.w	r0, #1
 800b602:	e7f8      	b.n	800b5f6 <__ascii_mbtowc+0x16>

0800b604 <_realloc_r>:
 800b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b608:	4680      	mov	r8, r0
 800b60a:	4615      	mov	r5, r2
 800b60c:	460c      	mov	r4, r1
 800b60e:	b921      	cbnz	r1, 800b61a <_realloc_r+0x16>
 800b610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	4611      	mov	r1, r2
 800b616:	f7fe bfaf 	b.w	800a578 <_malloc_r>
 800b61a:	b92a      	cbnz	r2, 800b628 <_realloc_r+0x24>
 800b61c:	f7fe ff38 	bl	800a490 <_free_r>
 800b620:	2400      	movs	r4, #0
 800b622:	4620      	mov	r0, r4
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	f000 f841 	bl	800b6ae <_malloc_usable_size_r>
 800b62c:	4285      	cmp	r5, r0
 800b62e:	4606      	mov	r6, r0
 800b630:	d802      	bhi.n	800b638 <_realloc_r+0x34>
 800b632:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b636:	d8f4      	bhi.n	800b622 <_realloc_r+0x1e>
 800b638:	4629      	mov	r1, r5
 800b63a:	4640      	mov	r0, r8
 800b63c:	f7fe ff9c 	bl	800a578 <_malloc_r>
 800b640:	4607      	mov	r7, r0
 800b642:	2800      	cmp	r0, #0
 800b644:	d0ec      	beq.n	800b620 <_realloc_r+0x1c>
 800b646:	42b5      	cmp	r5, r6
 800b648:	462a      	mov	r2, r5
 800b64a:	4621      	mov	r1, r4
 800b64c:	bf28      	it	cs
 800b64e:	4632      	movcs	r2, r6
 800b650:	f7fe f8c1 	bl	80097d6 <memcpy>
 800b654:	4621      	mov	r1, r4
 800b656:	4640      	mov	r0, r8
 800b658:	f7fe ff1a 	bl	800a490 <_free_r>
 800b65c:	463c      	mov	r4, r7
 800b65e:	e7e0      	b.n	800b622 <_realloc_r+0x1e>

0800b660 <__ascii_wctomb>:
 800b660:	4603      	mov	r3, r0
 800b662:	4608      	mov	r0, r1
 800b664:	b141      	cbz	r1, 800b678 <__ascii_wctomb+0x18>
 800b666:	2aff      	cmp	r2, #255	@ 0xff
 800b668:	d904      	bls.n	800b674 <__ascii_wctomb+0x14>
 800b66a:	228a      	movs	r2, #138	@ 0x8a
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	4770      	bx	lr
 800b674:	700a      	strb	r2, [r1, #0]
 800b676:	2001      	movs	r0, #1
 800b678:	4770      	bx	lr
	...

0800b67c <fiprintf>:
 800b67c:	b40e      	push	{r1, r2, r3}
 800b67e:	b503      	push	{r0, r1, lr}
 800b680:	4601      	mov	r1, r0
 800b682:	ab03      	add	r3, sp, #12
 800b684:	4805      	ldr	r0, [pc, #20]	@ (800b69c <fiprintf+0x20>)
 800b686:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68a:	6800      	ldr	r0, [r0, #0]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	f7ff fd03 	bl	800b098 <_vfiprintf_r>
 800b692:	b002      	add	sp, #8
 800b694:	f85d eb04 	ldr.w	lr, [sp], #4
 800b698:	b003      	add	sp, #12
 800b69a:	4770      	bx	lr
 800b69c:	200000a8 	.word	0x200000a8

0800b6a0 <abort>:
 800b6a0:	b508      	push	{r3, lr}
 800b6a2:	2006      	movs	r0, #6
 800b6a4:	f000 f834 	bl	800b710 <raise>
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	f7f6 fb01 	bl	8001cb0 <_exit>

0800b6ae <_malloc_usable_size_r>:
 800b6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b2:	1f18      	subs	r0, r3, #4
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bfbc      	itt	lt
 800b6b8:	580b      	ldrlt	r3, [r1, r0]
 800b6ba:	18c0      	addlt	r0, r0, r3
 800b6bc:	4770      	bx	lr

0800b6be <_raise_r>:
 800b6be:	291f      	cmp	r1, #31
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	d904      	bls.n	800b6d2 <_raise_r+0x14>
 800b6c8:	2316      	movs	r3, #22
 800b6ca:	6003      	str	r3, [r0, #0]
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6d4:	b112      	cbz	r2, 800b6dc <_raise_r+0x1e>
 800b6d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6da:	b94b      	cbnz	r3, 800b6f0 <_raise_r+0x32>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 f831 	bl	800b744 <_getpid_r>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ec:	f000 b818 	b.w	800b720 <_kill_r>
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d00a      	beq.n	800b70a <_raise_r+0x4c>
 800b6f4:	1c59      	adds	r1, r3, #1
 800b6f6:	d103      	bne.n	800b700 <_raise_r+0x42>
 800b6f8:	2316      	movs	r3, #22
 800b6fa:	6003      	str	r3, [r0, #0]
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	e7e7      	b.n	800b6d0 <_raise_r+0x12>
 800b700:	2100      	movs	r1, #0
 800b702:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b706:	4620      	mov	r0, r4
 800b708:	4798      	blx	r3
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7e0      	b.n	800b6d0 <_raise_r+0x12>
	...

0800b710 <raise>:
 800b710:	4b02      	ldr	r3, [pc, #8]	@ (800b71c <raise+0xc>)
 800b712:	4601      	mov	r1, r0
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	f7ff bfd2 	b.w	800b6be <_raise_r>
 800b71a:	bf00      	nop
 800b71c:	200000a8 	.word	0x200000a8

0800b720 <_kill_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	@ (800b740 <_kill_r+0x20>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	4611      	mov	r1, r2
 800b72c:	602b      	str	r3, [r5, #0]
 800b72e:	f7f6 faaf 	bl	8001c90 <_kill>
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	d102      	bne.n	800b73c <_kill_r+0x1c>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	b103      	cbz	r3, 800b73c <_kill_r+0x1c>
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	bf00      	nop
 800b740:	20000b50 	.word	0x20000b50

0800b744 <_getpid_r>:
 800b744:	f7f6 ba9c 	b.w	8001c80 <_getpid>

0800b748 <_init>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr

0800b754 <_fini>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr
